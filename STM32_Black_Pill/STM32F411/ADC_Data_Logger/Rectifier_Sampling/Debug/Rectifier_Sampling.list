
Rectifier_Sampling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009b8c  08009b8c  0000ab8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c28  08009c28  0000b168  2**0
                  CONTENTS
  4 .ARM          00000008  08009c28  08009c28  0000ac28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c30  08009c30  0000b168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c30  08009c30  0000ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c34  08009c34  0000ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08009c38  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e70  20000168  08009da0  0000b168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd8  08009da0  0000bfd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001835d  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c2  00000000  00000000  000234f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00026eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdd  00000000  00000000  00028348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe7  00000000  00000000  00029325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a67f  00000000  00000000  00043f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e313  00000000  00000000  0005e58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc89e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b8c  00000000  00000000  000fc8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00102470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b74 	.word	0x08009b74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08009b74 	.word	0x08009b74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fd18 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f836 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fa2a 	bl	80009d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 f89a 	bl	80006b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000584:	f000 f8ec 	bl	8000760 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000588:	f000 f9ae 	bl	80008e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800058c:	f000 f9f8 	bl	8000980 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000590:	f008 f940 	bl	8008814 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  while(CDC_Transmit_FS(myBuffer, sizeof(myBuffer) - 1) != USBD_OK)
 8000594:	e002      	b.n	800059c <main+0x2c>
  {
	  HAL_Delay(10);
 8000596:	200a      	movs	r0, #10
 8000598:	f000 fd78 	bl	800108c <HAL_Delay>
  while(CDC_Transmit_FS(myBuffer, sizeof(myBuffer) - 1) != USBD_OK)
 800059c:	211b      	movs	r1, #27
 800059e:	480f      	ldr	r0, [pc, #60]	@ (80005dc <main+0x6c>)
 80005a0:	f008 f9f6 	bl	8008990 <CDC_Transmit_FS>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f5      	bne.n	8000596 <main+0x26>
  }
  HAL_TIM_Base_Start_IT(&htim2);
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <main+0x70>)
 80005ac:	f003 fbb2 	bl	8003d14 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <main+0x74>)
 80005b8:	f001 fc98 	bl	8001eec <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c0:	f000 fd64 	bl	800108c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ca:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <main+0x74>)
 80005cc:	f001 fc8e 	bl	8001eec <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d4:	f000 fd5a 	bl	800108c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005d8:	bf00      	nop
 80005da:	e7e9      	b.n	80005b0 <main+0x40>
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000214 	.word	0x20000214
 80005e4:	40020800 	.word	0x40020800

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fe3c 	bl	8009274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <SystemClock_Config+0xc8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a26      	ldr	r2, [pc, #152]	@ (80006b0 <SystemClock_Config+0xc8>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <SystemClock_Config+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a20      	ldr	r2, [pc, #128]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <SystemClock_Config+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000658:	2319      	movs	r3, #25
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800065c:	23c0      	movs	r3, #192	@ 0xc0
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fea9 	bl	80033c4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 fa1a 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2103      	movs	r1, #3
 8000698:	4618      	mov	r0, r3
 800069a:	f003 f90b 	bl	80038b4 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a4:	f000 fa04 	bl	8000ab0 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	@ 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ca:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006cc:	4a23      	ldr	r2, [pc, #140]	@ (800075c <MX_ADC1_Init+0xa4>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006fe:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000702:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_ADC1_Init+0xa0>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_ADC1_Init+0xa0>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_ADC1_Init+0xa0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_ADC1_Init+0xa0>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	@ (8000758 <MX_ADC1_Init+0xa0>)
 8000720:	f000 fcd8 	bl	80010d4 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800072a:	f000 f9c1 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072e:	2301      	movs	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_ADC1_Init+0xa0>)
 8000740:	f000 ff06 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800074a:	f000 f9b1 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000184 	.word	0x20000184
 800075c:	40012000 	.word	0x40012000

08000760 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	@ 0x58
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2220      	movs	r2, #32
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f008 fd6b 	bl	8009274 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800079e:	4b50      	ldr	r3, [pc, #320]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007a0:	4a50      	ldr	r2, [pc, #320]	@ (80008e4 <MX_TIM1_Init+0x184>)
 80007a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007a4:	4b4e      	ldr	r3, [pc, #312]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b4d      	ldr	r3, [pc, #308]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007b0:	4b4b      	ldr	r3, [pc, #300]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b49      	ldr	r3, [pc, #292]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007be:	4b48      	ldr	r3, [pc, #288]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b46      	ldr	r3, [pc, #280]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ca:	4845      	ldr	r0, [pc, #276]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007cc:	f003 fa52 	bl	8003c74 <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007d6:	f000 f96b 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007e4:	4619      	mov	r1, r3
 80007e6:	483e      	ldr	r0, [pc, #248]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007e8:	f003 fdb6 	bl	8004358 <HAL_TIM_ConfigClockSource>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007f2:	f000 f95d 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f6:	483a      	ldr	r0, [pc, #232]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80007f8:	f003 fb47 	bl	8003e8a <HAL_TIM_PWM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000802:	f000 f955 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000806:	4836      	ldr	r0, [pc, #216]	@ (80008e0 <MX_TIM1_Init+0x180>)
 8000808:	f003 fae6 	bl	8003dd8 <HAL_TIM_OC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 f94d 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000822:	4619      	mov	r1, r3
 8000824:	482e      	ldr	r0, [pc, #184]	@ (80008e0 <MX_TIM1_Init+0x180>)
 8000826:	f004 f943 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000830:	f000 f93e 	bl	8000ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000834:	2360      	movs	r3, #96	@ 0x60
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4821      	ldr	r0, [pc, #132]	@ (80008e0 <MX_TIM1_Init+0x180>)
 800085a:	f003 fcbb 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000864:	f000 f924 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	2204      	movs	r2, #4
 800086e:	4619      	mov	r1, r3
 8000870:	481b      	ldr	r0, [pc, #108]	@ (80008e0 <MX_TIM1_Init+0x180>)
 8000872:	f003 fcaf 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800087c:	f000 f918 	bl	8000ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000888:	2208      	movs	r2, #8
 800088a:	4619      	mov	r1, r3
 800088c:	4814      	ldr	r0, [pc, #80]	@ (80008e0 <MX_TIM1_Init+0x180>)
 800088e:	f003 fc45 	bl	800411c <HAL_TIM_OC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000898:	f000 f90a 	bl	8000ab0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80008ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80008c2:	f004 f963 	bl	8004b8c <HAL_TIMEx_ConfigBreakDeadTime>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80008cc:	f000 f8f0 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <MX_TIM1_Init+0x180>)
 80008d2:	f000 f9cb 	bl	8000c6c <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3758      	adds	r7, #88	@ 0x58
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001cc 	.word	0x200001cc
 80008e4:	40010000 	.word	0x40010000

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000904:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_TIM2_Init+0x94>)
 8000906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_TIM2_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_TIM2_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_TIM2_Init+0x94>)
 800091a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800091e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_TIM2_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_TIM2_Init+0x94>)
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092c:	4813      	ldr	r0, [pc, #76]	@ (800097c <MX_TIM2_Init+0x94>)
 800092e:	f003 f9a1 	bl	8003c74 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000938:	f000 f8ba 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_TIM2_Init+0x94>)
 800094a:	f003 fd05 	bl	8004358 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000954:	f000 f8ac 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000958:	2320      	movs	r3, #32
 800095a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_TIM2_Init+0x94>)
 8000966:	f004 f8a3 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f89e 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000214 	.word	0x20000214

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f004 f94e 	bl	8004c58 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f875 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000025c 	.word	0x2000025c
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a25      	ldr	r2, [pc, #148]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a60:	4811      	ldr	r0, [pc, #68]	@ (8000aa8 <MX_GPIO_Init+0xd4>)
 8000a62:	f001 fa43 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480a      	ldr	r0, [pc, #40]	@ (8000aa8 <MX_GPIO_Init+0xd4>)
 8000a80:	f001 f8b0 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_GPIO_Init+0xd8>)
 8000a98:	f001 f8a4 	bl	8001be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <HAL_ADC_MspInit+0x8c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12f      	bne.n	8000b8e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_ADC_MspInit+0x90>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <HAL_ADC_MspInit+0x90>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_ADC_MspInit+0x90>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <HAL_ADC_MspInit+0x90>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <HAL_ADC_MspInit+0x90>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_ADC_MspInit+0x90>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4809      	ldr	r0, [pc, #36]	@ (8000ba0 <HAL_ADC_MspInit+0x94>)
 8000b7a:	f001 f833 	bl	8001be4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2012      	movs	r0, #18
 8000b84:	f000 fff7 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b88:	2012      	movs	r0, #18
 8000b8a:	f001 f810 	bl	8001bae <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012000 	.word	0x40012000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a27      	ldr	r2, [pc, #156]	@ (8000c60 <HAL_TIM_Base_MspInit+0xbc>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12d      	bne.n	8000c22 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	4a25      	ldr	r2, [pc, #148]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd6:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a1e      	ldr	r2, [pc, #120]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <HAL_TIM_Base_MspInit+0xc4>)
 8000c1c:	f000 ffe2 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c20:	e01a      	b.n	8000c58 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c2a:	d115      	bne.n	8000c58 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_TIM_Base_MspInit+0xc0>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	201c      	movs	r0, #28
 8000c4e:	f000 ff92 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c52:	201c      	movs	r0, #28
 8000c54:	f000 ffab 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	@ 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010000 	.word	0x40010000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400

08000c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <HAL_TIM_MspPostInit+0xa8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d13d      	bne.n	8000d0a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <HAL_TIM_MspPostInit+0xac>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a20      	ldr	r2, [pc, #128]	@ (8000d18 <HAL_TIM_MspPostInit+0xac>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <HAL_TIM_MspPostInit+0xac>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <HAL_TIM_MspPostInit+0xac>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a19      	ldr	r2, [pc, #100]	@ (8000d18 <HAL_TIM_MspPostInit+0xac>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <HAL_TIM_MspPostInit+0xac>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cc6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <HAL_TIM_MspPostInit+0xb0>)
 8000ce4:	f000 ff7e 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ce8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <HAL_TIM_MspPostInit+0xb4>)
 8000d06:	f000 ff6d 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	@ 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40010000 	.word	0x40010000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <HAL_UART_MspInit+0xc0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d14a      	bne.n	8000ddc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a26      	ldr	r2, [pc, #152]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d50:	f043 0310 	orr.w	r3, r3, #16
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a18      	ldr	r2, [pc, #96]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dac:	2307      	movs	r3, #7
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <HAL_UART_MspInit+0xc8>)
 8000db8:	f000 ff14 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <HAL_UART_MspInit+0xcc>)
 8000dd8:	f000 ff04 	bl	8001be4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	@ 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40011000 	.word	0x40011000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	40020400 	.word	0x40020400

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f8ff 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e5a:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <ADC_IRQHandler+0x34>)
 8000e5c:	f000 fa3c 	bl	80012d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  uint8_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <ADC_IRQHandler+0x34>)
 8000e62:	f000 fb49 	bl	80014f8 <HAL_ADC_GetValue>
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  int len = sprintf(myBuffer, "%lu\r\n", adcValue);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <ADC_IRQHandler+0x38>)
 8000e70:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <ADC_IRQHandler+0x3c>)
 8000e72:	f008 f9df 	bl	8009234 <siprintf>
 8000e76:	6038      	str	r0, [r7, #0]
  CDC_Transmit_FS((uint8_t*)myBuffer, len);
 8000e78:	6839      	ldr	r1, [r7, #0]
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <ADC_IRQHandler+0x3c>)
 8000e7c:	f007 fd88 	bl	8008990 <CDC_Transmit_FS>
  /* USER CODE END ADC_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000184 	.word	0x20000184
 8000e8c:	08009b8c 	.word	0x08009b8c
 8000e90:	20000000 	.word	0x20000000

08000e94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <TIM2_IRQHandler+0x14>)
 8000e9a:	f003 f84f 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  HAL_ADC_Start_IT(&hadc1);
 8000e9e:	4803      	ldr	r0, [pc, #12]	@ (8000eac <TIM2_IRQHandler+0x18>)
 8000ea0:	f000 f95c 	bl	800115c <HAL_ADC_Start_IT>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000214 	.word	0x20000214
 8000eac:	20000184 	.word	0x20000184

08000eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <OTG_FS_IRQHandler+0x10>)
 8000eb6:	f001 f976 	bl	80021a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000178c 	.word	0x2000178c

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f008 f9c6 	bl	8009284 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20020000 	.word	0x20020000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	200002a4 	.word	0x200002a4
 8000f2c:	20001fd8 	.word	0x20001fd8

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f58:	f7ff ffea 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	@ (8000f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f82:	f008 f985 	bl	8009290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff faf3 	bl	8000570 <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000f98:	08009c38 	.word	0x08009c38
  ldr r2, =_sbss
 8000f9c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000fa0:	20001fd8 	.word	0x20001fd8

08000fa4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <DMA1_Stream0_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 fdc5 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fd6e 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fddd 	bl	8001bca <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 fda5 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000001c 	.word	0x2000001c
 8001044:	20000024 	.word	0x20000024
 8001048:	20000020 	.word	0x20000020

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000024 	.word	0x20000024
 8001070:	200002a8 	.word	0x200002a8

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200002a8 	.word	0x200002a8

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000024 	.word	0x20000024

080010d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e033      	b.n	8001152 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fd0a 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	d118      	bne.n	8001144 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800111a:	f023 0302 	bic.w	r3, r3, #2
 800111e:	f043 0202 	orr.w	r2, r3, #2
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fb44 	bl	80017b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f023 0303 	bic.w	r3, r3, #3
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
 8001142:	e001      	b.n	8001148 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Start_IT+0x1a>
 8001172:	2302      	movs	r3, #2
 8001174:	e0a1      	b.n	80012ba <HAL_ADC_Start_IT+0x15e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	d018      	beq.n	80011be <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800119c:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <HAL_ADC_Start_IT+0x16c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <HAL_ADC_Start_IT+0x170>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9a      	lsrs	r2, r3, #18
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d169      	bne.n	80012a0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800120a:	d106      	bne.n	800121a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001210:	f023 0206 	bic.w	r2, r3, #6
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	645a      	str	r2, [r3, #68]	@ 0x44
 8001218:	e002      	b.n	8001220 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001228:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <HAL_ADC_Start_IT+0x174>)
 800122a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001234:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d129      	bne.n	80012b8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e020      	b.n	80012b8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a16      	ldr	r2, [pc, #88]	@ (80012d4 <HAL_ADC_Start_IT+0x178>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d11b      	bne.n	80012b8 <HAL_ADC_Start_IT+0x15c>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d114      	bne.n	80012b8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e00b      	b.n	80012b8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f043 0210 	orr.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000001c 	.word	0x2000001c
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	40012300 	.word	0x40012300
 80012d4:	40012000 	.word	0x40012000

080012d8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d049      	beq.n	80013a2 <HAL_ADC_IRQHandler+0xca>
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d046      	beq.n	80013a2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d12b      	bne.n	8001392 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800133e:	2b00      	cmp	r3, #0
 8001340:	d127      	bne.n	8001392 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001348:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800135a:	2b00      	cmp	r3, #0
 800135c:	d119      	bne.n	8001392 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0220 	bic.w	r2, r2, #32
 800136c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8bd 	bl	8001512 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f06f 0212 	mvn.w	r2, #18
 80013a0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d057      	beq.n	8001468 <HAL_ADC_IRQHandler+0x190>
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d054      	beq.n	8001468 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d139      	bne.n	8001458 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12b      	bne.n	8001458 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d124      	bne.n	8001458 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11d      	bne.n	8001458 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001420:	2b00      	cmp	r3, #0
 8001422:	d119      	bne.n	8001458 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001432:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 faa7 	bl	80019ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f06f 020c 	mvn.w	r2, #12
 8001466:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001476:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d017      	beq.n	80014ae <HAL_ADC_IRQHandler+0x1d6>
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d014      	beq.n	80014ae <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10d      	bne.n	80014ae <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f841 	bl	8001526 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0201 	mvn.w	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014bc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d015      	beq.n	80014f0 <HAL_ADC_IRQHandler+0x218>
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d012      	beq.n	80014f0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f043 0202 	orr.w	r2, r3, #2
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f06f 0220 	mvn.w	r2, #32
 80014de:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f82a 	bl	800153a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f06f 0220 	mvn.w	r2, #32
 80014ee:	601a      	str	r2, [r3, #0]
  }
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1c>
 8001568:	2302      	movs	r3, #2
 800156a:	e113      	b.n	8001794 <HAL_ADC_ConfigChannel+0x244>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b09      	cmp	r3, #9
 800157a:	d925      	bls.n	80015c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68d9      	ldr	r1, [r3, #12]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	3b1e      	subs	r3, #30
 8001592:	2207      	movs	r2, #7
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43da      	mvns	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	400a      	ands	r2, r1
 80015a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68d9      	ldr	r1, [r3, #12]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	4603      	mov	r3, r0
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4403      	add	r3, r0
 80015ba:	3b1e      	subs	r3, #30
 80015bc:	409a      	lsls	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	e022      	b.n	800160e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6919      	ldr	r1, [r3, #16]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	2207      	movs	r2, #7
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6919      	ldr	r1, [r3, #16]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4403      	add	r3, r0
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b06      	cmp	r3, #6
 8001614:	d824      	bhi.n	8001660 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	3b05      	subs	r3, #5
 8001628:	221f      	movs	r2, #31
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	400a      	ands	r2, r1
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b05      	subs	r3, #5
 8001652:	fa00 f203 	lsl.w	r2, r0, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	635a      	str	r2, [r3, #52]	@ 0x34
 800165e:	e04c      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b0c      	cmp	r3, #12
 8001666:	d824      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	3b23      	subs	r3, #35	@ 0x23
 800167a:	221f      	movs	r2, #31
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43da      	mvns	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	400a      	ands	r2, r1
 8001688:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b23      	subs	r3, #35	@ 0x23
 80016a4:	fa00 f203 	lsl.w	r2, r0, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80016b0:	e023      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b41      	subs	r3, #65	@ 0x41
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	400a      	ands	r2, r1
 80016d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b41      	subs	r3, #65	@ 0x41
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016fa:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <HAL_ADC_ConfigChannel+0x250>)
 80016fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a28      	ldr	r2, [pc, #160]	@ (80017a4 <HAL_ADC_ConfigChannel+0x254>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d10f      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1d8>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d10b      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <HAL_ADC_ConfigChannel+0x254>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_ADC_ConfigChannel+0x23a>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <HAL_ADC_ConfigChannel+0x258>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d003      	beq.n	8001744 <HAL_ADC_ConfigChannel+0x1f4>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b11      	cmp	r3, #17
 8001742:	d122      	bne.n	800178a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <HAL_ADC_ConfigChannel+0x258>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d111      	bne.n	800178a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_ADC_ConfigChannel+0x25c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <HAL_ADC_ConfigChannel+0x260>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9a      	lsrs	r2, r3, #18
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800177c:	e002      	b.n	8001784 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40012300 	.word	0x40012300
 80017a4:	40012000 	.word	0x40012000
 80017a8:	10000012 	.word	0x10000012
 80017ac:	2000001c 	.word	0x2000001c
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017bc:	4b79      	ldr	r3, [pc, #484]	@ (80019a4 <ADC_Init+0x1f0>)
 80017be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	021a      	lsls	r2, r3, #8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800180c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800182e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6899      	ldr	r1, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	4a58      	ldr	r2, [pc, #352]	@ (80019a8 <ADC_Init+0x1f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d022      	beq.n	8001892 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800185a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6899      	ldr	r1, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800187c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	e00f      	b.n	80018b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0202 	bic.w	r2, r2, #2
 80018c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7e1b      	ldrb	r3, [r3, #24]
 80018cc:	005a      	lsls	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01b      	beq.n	8001918 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	035a      	lsls	r2, r3, #13
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	e007      	b.n	8001928 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001926:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001936:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	3b01      	subs	r3, #1
 8001944:	051a      	lsls	r2, r3, #20
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800195c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6899      	ldr	r1, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800196a:	025a      	lsls	r2, r3, #9
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	029a      	lsls	r2, r3, #10
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40012300 	.word	0x40012300
 80019a8:	0f000001 	.word	0x0f000001

080019ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	@ (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	@ (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e159      	b.n	8001eb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8148 	bne.w	8001eae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d005      	beq.n	8001c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d130      	bne.n	8001c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d017      	beq.n	8001cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a2 	beq.w	8001eae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b57      	ldr	r3, [pc, #348]	@ (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a56      	ldr	r2, [pc, #344]	@ (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b54      	ldr	r3, [pc, #336]	@ (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d86:	4a52      	ldr	r2, [pc, #328]	@ (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a49      	ldr	r2, [pc, #292]	@ (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x202>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a48      	ldr	r2, [pc, #288]	@ (8001ed8 <HAL_GPIO_Init+0x2f4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x1fe>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a47      	ldr	r2, [pc, #284]	@ (8001edc <HAL_GPIO_Init+0x2f8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a46      	ldr	r2, [pc, #280]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x1f6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a45      	ldr	r2, [pc, #276]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x1f2>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e008      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x204>
 8001de6:	2300      	movs	r3, #0
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f002 0203 	and.w	r2, r2, #3
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	4093      	lsls	r3, r2
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df8:	4935      	ldr	r1, [pc, #212]	@ (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e06:	4b38      	ldr	r3, [pc, #224]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e54:	4a24      	ldr	r2, [pc, #144]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <HAL_GPIO_Init+0x304>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	f67f aea2 	bls.w	8001c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3724      	adds	r7, #36	@ 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af02      	add	r7, sp, #8
 8001f24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e101      	b.n	8002134 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f006 fe68 	bl	8008c20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f5e:	d102      	bne.n	8001f66 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fa4f 	bl	800540e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7c1a      	ldrb	r2, [r3, #16]
 8001f78:	f88d 2000 	strb.w	r2, [sp]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f80:	f003 f92e 	bl	80051e0 <USB_CoreInit>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0ce      	b.n	8002134 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 fa47 	bl	8005430 <USB_SetCurrentMode>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0bf      	b.n	8002134 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e04a      	b.n	8002050 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3315      	adds	r3, #21
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3314      	adds	r3, #20
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	b298      	uxth	r0, r3
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	332e      	adds	r3, #46	@ 0x2e
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3318      	adds	r3, #24
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	331c      	adds	r3, #28
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3320      	adds	r3, #32
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3324      	adds	r3, #36	@ 0x24
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3301      	adds	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	429a      	cmp	r2, r3
 8002058:	d3af      	bcc.n	8001fba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	e044      	b.n	80020ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	3301      	adds	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	791b      	ldrb	r3, [r3, #4]
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3b5      	bcc.n	8002060 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7c1a      	ldrb	r2, [r3, #16]
 80020fc:	f88d 2000 	strb.w	r2, [sp]
 8002100:	3304      	adds	r3, #4
 8002102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002104:	f003 f9e0 	bl	80054c8 <USB_DevInit>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00c      	b.n	8002134 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fa2a 	bl	8006586 <USB_DevDisconnect>

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_Start+0x1c>
 8002154:	2302      	movs	r3, #2
 8002156:	e022      	b.n	800219e <HAL_PCD_Start+0x62>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002178:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 f931 	bl	80053ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f004 f9d8 	bl	8006544 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021a6:	b590      	push	{r4, r7, lr}
 80021a8:	b08d      	sub	sp, #52	@ 0x34
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fa96 	bl	80066ee <USB_GetMode>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 848c 	bne.w	8002ae2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 f9fa 	bl	80065c8 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8482 	beq.w	8002ae0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f004 f9e7 	bl	80065c8 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b02      	cmp	r3, #2
 8002202:	d107      	bne.n	8002214 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f002 0202 	and.w	r2, r2, #2
 8002212:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f004 f9d5 	bl	80065c8 <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d161      	bne.n	80022ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0210 	bic.w	r2, r2, #16
 8002236:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	0c5b      	lsrs	r3, r3, #17
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2b02      	cmp	r3, #2
 8002262:	d124      	bne.n	80022ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d035      	beq.n	80022dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800227a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6a38      	ldr	r0, [r7, #32]
 8002284:	f004 f80c 	bl	80062a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002294:	441a      	add	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	615a      	str	r2, [r3, #20]
 80022ac:	e016      	b.n	80022dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	0c5b      	lsrs	r3, r3, #17
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d110      	bne.n	80022dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022c0:	2208      	movs	r2, #8
 80022c2:	4619      	mov	r1, r3
 80022c4:	6a38      	ldr	r0, [r7, #32]
 80022c6:	f003 ffeb 	bl	80062a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d6:	441a      	add	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0210 	orr.w	r2, r2, #16
 80022ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f969 	bl	80065c8 <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002300:	f040 80a7 	bne.w	8002452 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f004 f96e 	bl	80065ee <USB_ReadDevAllOutEpInterrupt>
 8002312:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002314:	e099      	b.n	800244a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 808e 	beq.w	800243e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f004 f992 	bl	8006656 <USB_ReadDevOutEPInterrupt>
 8002332:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002350:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fea4 	bl	80030a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 ff7a 	bl	8003270 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	2310      	movs	r3, #16
 8002396:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d030      	beq.n	8002404 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d109      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	78db      	ldrb	r3, [r3, #3]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2200      	movs	r2, #0
 80023e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f006 fd13 	bl	8008e18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fe:	461a      	mov	r2, r3
 8002400:	2302      	movs	r3, #2
 8002402:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241a:	461a      	mov	r2, r3
 800241c:	2320      	movs	r3, #32
 800241e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800243c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	3301      	adds	r3, #1
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	f47f af62 	bne.w	8002316 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 f8b6 	bl	80065c8 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002466:	f040 80db 	bne.w	8002620 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 f8d7 	bl	8006622 <USB_ReadDevAllInEpInterrupt>
 8002474:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800247a:	e0cd      	b.n	8002618 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80c2 	beq.w	800260c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f004 f8fd 	bl	8006692 <USB_ReadDevInEPInterrupt>
 8002498:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d057      	beq.n	8002554 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69f9      	ldr	r1, [r7, #28]
 80024c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024c4:	4013      	ands	r3, r2
 80024c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024d4:	461a      	mov	r2, r3
 80024d6:	2301      	movs	r3, #1
 80024d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	799b      	ldrb	r3, [r3, #6]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d132      	bne.n	8002548 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3320      	adds	r3, #32
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4403      	add	r3, r0
 8002502:	331c      	adds	r3, #28
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4419      	add	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4403      	add	r3, r0
 8002516:	3320      	adds	r3, #32
 8002518:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d113      	bne.n	8002548 <HAL_PCD_IRQHandler+0x3a2>
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3324      	adds	r3, #36	@ 0x24
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002540:	461a      	mov	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	f004 f904 	bl	8006750 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f006 fbe7 	bl	8008d22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800256a:	461a      	mov	r2, r3
 800256c:	2308      	movs	r3, #8
 800256e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002586:	461a      	mov	r2, r3
 8002588:	2310      	movs	r3, #16
 800258a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a2:	461a      	mov	r2, r3
 80025a4:	2340      	movs	r3, #64	@ 0x40
 80025a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d023      	beq.n	80025fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025b4:	6a38      	ldr	r0, [r7, #32]
 80025b6:	f003 f8eb 	bl	8005790 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	3310      	adds	r3, #16
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	78db      	ldrb	r3, [r3, #3]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f006 fc2a 	bl	8008e3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025f4:	461a      	mov	r2, r3
 80025f6:	2302      	movs	r3, #2
 80025f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fcbd 	bl	8002f86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	3301      	adds	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	f47f af2e 	bne.w	800247c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 ffcf 	bl	80065c8 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002634:	d122      	bne.n	800267c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002650:	2b01      	cmp	r3, #1
 8002652:	d108      	bne.n	8002666 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fea4 	bl	80033ac <HAL_PCDEx_LPM_Callback>
 8002664:	e002      	b.n	800266c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f006 fbc8 	bl	8008dfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800267a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f003 ffa1 	bl	80065c8 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800268c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002690:	d112      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f006 fb84 	bl	8008db0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80026b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 ff83 	bl	80065c8 <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026cc:	f040 80b7 	bne.w	800283e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2110      	movs	r1, #16
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 f850 	bl	8005790 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026f4:	e046      	b.n	8002784 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002702:	461a      	mov	r2, r3
 8002704:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002708:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	440a      	add	r2, r1
 8002720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002724:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002728:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002736:	461a      	mov	r2, r3
 8002738:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800273c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	440a      	add	r2, r1
 8002754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002758:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800275c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800276e:	0151      	lsls	r1, r2, #5
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	440a      	add	r2, r1
 8002774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002778:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800277c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	3301      	adds	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	791b      	ldrb	r3, [r3, #4]
 8002788:	461a      	mov	r2, r3
 800278a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278c:	4293      	cmp	r3, r2
 800278e:	d3b2      	bcc.n	80026f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800279e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80027a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7bdb      	ldrb	r3, [r3, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027bc:	f043 030b 	orr.w	r3, r3, #11
 80027c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027d2:	f043 030b 	orr.w	r3, r3, #11
 80027d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d8:	e015      	b.n	8002806 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027ec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80027f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002800:	f043 030b 	orr.w	r3, r3, #11
 8002804:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002814:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002818:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002828:	461a      	mov	r2, r3
 800282a:	f003 ff91 	bl	8006750 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800283c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fec0 	bl	80065c8 <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002852:	d123      	bne.n	800289c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 ff56 	bl	800670a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f003 f80d 	bl	8005882 <USB_GetDevSpeed>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681c      	ldr	r4, [r3, #0]
 8002874:	f001 f9ca 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8002878:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800287e:	461a      	mov	r2, r3
 8002880:	4620      	mov	r0, r4
 8002882:	f002 fd11 	bl	80052a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f006 fa73 	bl	8008d72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800289a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 fe91 	bl	80065c8 <USB_ReadInterrupts>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d10a      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f006 fa50 	bl	8008d56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f002 0208 	and.w	r2, r2, #8
 80028c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fe7c 	bl	80065c8 <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d6:	2b80      	cmp	r3, #128	@ 0x80
 80028d8:	d123      	bne.n	8002922 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e6:	2301      	movs	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ea:	e014      	b.n	8002916 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fb0a 	bl	8002f24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	791b      	ldrb	r3, [r3, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	4293      	cmp	r3, r2
 8002920:	d3e4      	bcc.n	80028ec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f003 fe4e 	bl	80065c8 <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002936:	d13c      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
 800293c:	e02b      	b.n	8002996 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3318      	adds	r3, #24
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d115      	bne.n	8002990 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002964:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002966:	2b00      	cmp	r3, #0
 8002968:	da12      	bge.n	8002990 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3317      	adds	r3, #23
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 faca 	bl	8002f24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	3301      	adds	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	791b      	ldrb	r3, [r3, #4]
 800299a:	461a      	mov	r2, r3
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	4293      	cmp	r3, r2
 80029a0:	d3cd      	bcc.n	800293e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80029b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fe06 	bl	80065c8 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029c6:	d156      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	e045      	b.n	8002a5a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d12e      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da2b      	bge.n	8002a54 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d121      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a50:	6053      	str	r3, [r2, #4]
            break;
 8002a52:	e008      	b.n	8002a66 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	3301      	adds	r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	791b      	ldrb	r3, [r3, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d3b3      	bcc.n	80029ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 fda4 	bl	80065c8 <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f006 f9e7 	bl	8008e60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 fd8e 	bl	80065c8 <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d115      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f006 f9d7 	bl	8008e7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e000      	b.n	8002ae2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ae0:	bf00      	nop
    }
  }
}
 8002ae2:	3734      	adds	r7, #52	@ 0x34
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_SetAddress+0x1a>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e012      	b.n	8002b28 <HAL_PCD_SetAddress+0x40>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fced 	bl	80064f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	70fb      	strb	r3, [r7, #3]
 8002b42:	460b      	mov	r3, r1
 8002b44:	803b      	strh	r3, [r7, #0]
 8002b46:	4613      	mov	r3, r2
 8002b48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da0f      	bge.n	8002b76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	3310      	adds	r3, #16
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	705a      	strb	r2, [r3, #1]
 8002b74:	e00f      	b.n	8002b96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	f003 020f 	and.w	r2, r3, #15
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ba2:	883b      	ldrh	r3, [r7, #0]
 8002ba4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	78ba      	ldrb	r2, [r7, #2]
 8002bb0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bc4:	78bb      	ldrb	r3, [r7, #2]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d102      	bne.n	8002bd0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_PCD_EP_Open+0xae>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e00e      	b.n	8002bfc <HAL_PCD_EP_Open+0xcc>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fe6d 	bl	80058cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	da0f      	bge.n	8002c38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	f003 020f 	and.w	r2, r3, #15
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	3310      	adds	r3, #16
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	705a      	strb	r2, [r3, #1]
 8002c36:	e00f      	b.n	8002c58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_PCD_EP_Close+0x6e>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e00e      	b.n	8002c90 <HAL_PCD_EP_Close+0x8c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 feab 	bl	80059dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cda:	7afb      	ldrb	r3, [r7, #11]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	799b      	ldrb	r3, [r3, #6]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d102      	bne.n	8002cf4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	799b      	ldrb	r3, [r3, #6]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	f002 ff48 	bl	8005b94 <USB_EPStartXfer>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002d30:	681b      	ldr	r3, [r3, #0]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3310      	adds	r3, #16
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d7e:	7afb      	ldrb	r3, [r7, #11]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	799b      	ldrb	r3, [r3, #6]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	799b      	ldrb	r3, [r3, #6]
 8002da0:	461a      	mov	r2, r3
 8002da2:	6979      	ldr	r1, [r7, #20]
 8002da4:	f002 fef6 	bl	8005b94 <USB_EPStartXfer>

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	7912      	ldrb	r2, [r2, #4]
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e04f      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	da0f      	bge.n	8002df8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	3310      	adds	r3, #16
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	705a      	strb	r2, [r3, #1]
 8002df6:	e00d      	b.n	8002e14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_EP_SetStall+0x82>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e01d      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xbe>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 fa84 	bl	8006350 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7999      	ldrb	r1, [r3, #6]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e60:	461a      	mov	r2, r3
 8002e62:	f003 fc75 	bl	8006750 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	7912      	ldrb	r2, [r2, #4]
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e042      	b.n	8002f1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	da0f      	bge.n	8002ebe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	3310      	adds	r3, #16
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	705a      	strb	r2, [r3, #1]
 8002ebc:	e00f      	b.n	8002ede <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_PCD_EP_ClrStall+0x86>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e00e      	b.n	8002f1c <HAL_PCD_EP_ClrStall+0xa4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fa8d 	bl	800642c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da0c      	bge.n	8002f52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	3310      	adds	r3, #16
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e00c      	b.n	8002f6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 f8ac 	bl	80060d0 <USB_EPStopXfer>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b08a      	sub	sp, #40	@ 0x28
 8002f8a:	af02      	add	r7, sp, #8
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3310      	adds	r3, #16
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d901      	bls.n	8002fbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06b      	b.n	8003096 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d902      	bls.n	8002fda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3303      	adds	r3, #3
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe2:	e02a      	b.n	800303a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d902      	bls.n	8003000 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3303      	adds	r3, #3
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	4603      	mov	r3, r0
 800301c:	6978      	ldr	r0, [r7, #20]
 800301e:	f003 f901 	bl	8006224 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	441a      	add	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	441a      	add	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	429a      	cmp	r2, r3
 800304e:	d809      	bhi.n	8003064 <PCD_WriteEmptyTxFifo+0xde>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003058:	429a      	cmp	r2, r3
 800305a:	d203      	bcs.n	8003064 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1bf      	bne.n	8002fe4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	d811      	bhi.n	8003094 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	2201      	movs	r2, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	43db      	mvns	r3, r3
 800308a:	6939      	ldr	r1, [r7, #16]
 800308c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003090:	4013      	ands	r3, r2
 8003092:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	333c      	adds	r3, #60	@ 0x3c
 80030b8:	3304      	adds	r3, #4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	799b      	ldrb	r3, [r3, #6]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d17b      	bne.n	80031ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d015      	beq.n	800310c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	4a61      	ldr	r2, [pc, #388]	@ (8003268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	f240 80b9 	bls.w	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80b3 	beq.w	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003108:	6093      	str	r3, [r2, #8]
 800310a:	e0a7      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003122:	461a      	mov	r2, r3
 8003124:	2320      	movs	r3, #32
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	e098      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 8093 	bne.w	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	4a4b      	ldr	r2, [pc, #300]	@ (8003268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d90f      	bls.n	800315e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003154:	461a      	mov	r2, r3
 8003156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800315a:	6093      	str	r3, [r2, #8]
 800315c:	e07e      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	3304      	adds	r3, #4
 8003172:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a1a      	ldr	r2, [r3, #32]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	0159      	lsls	r1, r3, #5
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	440b      	add	r3, r1
 8003180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d114      	bne.n	80031c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031a8:	461a      	mov	r2, r3
 80031aa:	2101      	movs	r1, #1
 80031ac:	f003 fad0 	bl	8006750 <USB_EP0_OutStart>
 80031b0:	e006      	b.n	80031c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f005 fd90 	bl	8008cec <HAL_PCD_DataOutStageCallback>
 80031cc:	e046      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4a26      	ldr	r2, [pc, #152]	@ (800326c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d124      	bne.n	8003220 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ec:	461a      	mov	r2, r3
 80031ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f2:	6093      	str	r3, [r2, #8]
 80031f4:	e032      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	2320      	movs	r3, #32
 8003210:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f005 fd67 	bl	8008cec <HAL_PCD_DataOutStageCallback>
 800321e:	e01d      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d114      	bne.n	8003250 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003248:	461a      	mov	r2, r3
 800324a:	2100      	movs	r1, #0
 800324c:	f003 fa80 	bl	8006750 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f005 fd48 	bl	8008cec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	4f54300a 	.word	0x4f54300a
 800326c:	4f54310a 	.word	0x4f54310a

08003270 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	333c      	adds	r3, #60	@ 0x3c
 8003288:	3304      	adds	r3, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a15      	ldr	r2, [pc, #84]	@ (80032f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d90e      	bls.n	80032c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d009      	beq.n	80032c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032bc:	461a      	mov	r2, r3
 80032be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f005 fcff 	bl	8008cc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d90c      	bls.n	80032ec <PCD_EP_OutSetupPacket_int+0x7c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	799b      	ldrb	r3, [r3, #6]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d108      	bne.n	80032ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032e4:	461a      	mov	r2, r3
 80032e6:	2101      	movs	r1, #1
 80032e8:	f003 fa32 	bl	8006750 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	4f54300a 	.word	0x4f54300a

080032fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	70fb      	strb	r3, [r7, #3]
 8003308:	4613      	mov	r3, r2
 800330a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800331a:	883b      	ldrh	r3, [r7, #0]
 800331c:	0419      	lsls	r1, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	430a      	orrs	r2, r1
 8003326:	629a      	str	r2, [r3, #40]	@ 0x28
 8003328:	e028      	b.n	800337c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e00d      	b.n	800335a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	3340      	adds	r3, #64	@ 0x40
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	4413      	add	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	3301      	adds	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	3b01      	subs	r3, #1
 8003360:	429a      	cmp	r2, r3
 8003362:	d3ec      	bcc.n	800333e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003364:	883b      	ldrh	r3, [r7, #0]
 8003366:	0418      	lsls	r0, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6819      	ldr	r1, [r3, #0]
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	3b01      	subs	r3, #1
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	4302      	orrs	r2, r0
 8003374:	3340      	adds	r3, #64	@ 0x40
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e267      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d075      	beq.n	80034ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033e2:	4b88      	ldr	r3, [pc, #544]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d00c      	beq.n	8003408 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b85      	ldr	r3, [pc, #532]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d112      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b82      	ldr	r3, [pc, #520]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003406:	d10b      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	4b7e      	ldr	r3, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05b      	beq.n	80034cc <HAL_RCC_OscConfig+0x108>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d157      	bne.n	80034cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e242      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x74>
 800342a:	4b76      	ldr	r3, [pc, #472]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x98>
 8003442:	4b70      	ldr	r3, [pc, #448]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6f      	ldr	r2, [pc, #444]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6d      	ldr	r3, [pc, #436]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6c      	ldr	r2, [pc, #432]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 800345c:	4b69      	ldr	r3, [pc, #420]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a68      	ldr	r2, [pc, #416]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b66      	ldr	r3, [pc, #408]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a65      	ldr	r2, [pc, #404]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fdfa 	bl	8001074 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fdf6 	bl	8001074 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	@ 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e207      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b5b      	ldr	r3, [pc, #364]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xc0>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fd fde6 	bl	8001074 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fd fde2 	bl	8001074 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1f3      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b51      	ldr	r3, [pc, #324]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0xe8>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034da:	4b4a      	ldr	r3, [pc, #296]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b47      	ldr	r3, [pc, #284]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b44      	ldr	r3, [pc, #272]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b41      	ldr	r3, [pc, #260]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1c7      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b3b      	ldr	r3, [pc, #236]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4937      	ldr	r1, [pc, #220]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b34      	ldr	r3, [pc, #208]	@ (8003608 <HAL_RCC_OscConfig+0x244>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd fd9b 	bl	8001074 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003542:	f7fd fd97 	bl	8001074 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1a8      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4925      	ldr	r1, [pc, #148]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x244>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fd fd7a 	bl	8001074 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003584:	f7fd fd76 	bl	8001074 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e187      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d036      	beq.n	800361c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b15      	ldr	r3, [pc, #84]	@ (800360c <HAL_RCC_OscConfig+0x248>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fd fd5a 	bl	8001074 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fd fd56 	bl	8001074 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e167      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80035d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x200>
 80035e2:	e01b      	b.n	800361c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_RCC_OscConfig+0x248>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fd43 	bl	8001074 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	e00e      	b.n	8003610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f2:	f7fd fd3f 	bl	8001074 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d907      	bls.n	8003610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e150      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
 8003604:	40023800 	.word	0x40023800
 8003608:	42470000 	.word	0x42470000
 800360c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b88      	ldr	r3, [pc, #544]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ea      	bne.n	80035f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8097 	beq.w	8003758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b81      	ldr	r3, [pc, #516]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b7d      	ldr	r3, [pc, #500]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	4a7c      	ldr	r2, [pc, #496]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003648:	6413      	str	r3, [r2, #64]	@ 0x40
 800364a:	4b7a      	ldr	r3, [pc, #488]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b77      	ldr	r3, [pc, #476]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d118      	bne.n	8003698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b74      	ldr	r3, [pc, #464]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a73      	ldr	r2, [pc, #460]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fd fcff 	bl	8001074 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7fd fcfb 	bl	8001074 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e10c      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b6a      	ldr	r3, [pc, #424]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x2ea>
 80036a0:	4b64      	ldr	r3, [pc, #400]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a4:	4a63      	ldr	r2, [pc, #396]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x30c>
 80036b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036d0:	4b58      	ldr	r3, [pc, #352]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a57      	ldr	r2, [pc, #348]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	4b55      	ldr	r3, [pc, #340]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a54      	ldr	r2, [pc, #336]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0304 	bic.w	r3, r3, #4
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fcc0 	bl	8001074 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fcbc 	bl	8001074 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0cb      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	4b49      	ldr	r3, [pc, #292]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ee      	beq.n	80036f8 <HAL_RCC_OscConfig+0x334>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371c:	f7fd fcaa 	bl	8001074 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fd fca6 	bl	8001074 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0b5      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373a:	4b3e      	ldr	r3, [pc, #248]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ee      	bne.n	8003724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	4a38      	ldr	r2, [pc, #224]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80a1 	beq.w	80038a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003762:	4b34      	ldr	r3, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b08      	cmp	r3, #8
 800376c:	d05c      	beq.n	8003828 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d141      	bne.n	80037fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	4b31      	ldr	r3, [pc, #196]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fd fc7a 	bl	8001074 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd fc76 	bl	8001074 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e087      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	3b01      	subs	r3, #1
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	491b      	ldr	r1, [pc, #108]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fd fc4f 	bl	8001074 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fd fc4b 	bl	8001074 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e05c      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x416>
 80037f8:	e054      	b.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fd fc38 	bl	8001074 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fd fc34 	bl	8001074 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e045      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x444>
 8003826:	e03d      	b.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e038      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
 800383c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x4ec>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d028      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d121      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d11a      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	4293      	cmp	r3, r2
 800387a:	d111      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0cc      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b68      	ldr	r3, [pc, #416]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d90c      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b65      	ldr	r3, [pc, #404]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b63      	ldr	r3, [pc, #396]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b8      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003908:	4b59      	ldr	r3, [pc, #356]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a58      	ldr	r2, [pc, #352]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003912:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003920:	4b53      	ldr	r3, [pc, #332]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a52      	ldr	r2, [pc, #328]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800392a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b50      	ldr	r3, [pc, #320]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	494d      	ldr	r1, [pc, #308]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d044      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d119      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d003      	beq.n	8003972 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	2b03      	cmp	r3, #3
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b3f      	ldr	r3, [pc, #252]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3b      	ldr	r3, [pc, #236]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e067      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4934      	ldr	r1, [pc, #208]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fd fb66 	bl	8001074 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fd fb62 	bl	8001074 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e04f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b25      	ldr	r3, [pc, #148]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d20c      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b22      	ldr	r3, [pc, #136]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b20      	ldr	r3, [pc, #128]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e032      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4916      	ldr	r1, [pc, #88]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	490e      	ldr	r1, [pc, #56]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a3a:	f000 f821 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	490a      	ldr	r1, [pc, #40]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd fac6 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023c00 	.word	0x40023c00
 8003a70:	40023800 	.word	0x40023800
 8003a74:	08009bdc 	.word	0x08009bdc
 8003a78:	2000001c 	.word	0x2000001c
 8003a7c:	20000020 	.word	0x20000020

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b090      	sub	sp, #64	@ 0x40
 8003a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a98:	4b59      	ldr	r3, [pc, #356]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	f200 80a1 	bhi.w	8003bec <HAL_RCC_GetSysClockFreq+0x16c>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x3a>
 8003ab2:	e09b      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b53      	ldr	r3, [pc, #332]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ab8:	e09b      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aba:	4b53      	ldr	r3, [pc, #332]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x188>)
 8003abc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003abe:	e098      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ac8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aca:	4b4d      	ldr	r3, [pc, #308]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	2200      	movs	r2, #0
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4b47      	ldr	r3, [pc, #284]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aec:	fb03 f201 	mul.w	r2, r3, r1
 8003af0:	2300      	movs	r3, #0
 8003af2:	fb00 f303 	mul.w	r3, r0, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	4a43      	ldr	r2, [pc, #268]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x188>)
 8003afa:	fba0 1202 	umull	r1, r2, r0, r2
 8003afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b00:	460a      	mov	r2, r1
 8003b02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b06:	4413      	add	r3, r2
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	61fa      	str	r2, [r7, #28]
 8003b12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b1a:	f7fc fbb1 	bl	8000280 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4613      	mov	r3, r2
 8003b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b26:	e053      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b28:	4b35      	ldr	r3, [pc, #212]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	2200      	movs	r2, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	617a      	str	r2, [r7, #20]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b3a:	f04f 0b00 	mov.w	fp, #0
 8003b3e:	4652      	mov	r2, sl
 8003b40:	465b      	mov	r3, fp
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	ebb2 080a 	subs.w	r8, r2, sl
 8003b5a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b72:	ebb2 0408 	subs.w	r4, r2, r8
 8003b76:	eb63 0509 	sbc.w	r5, r3, r9
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	00eb      	lsls	r3, r5, #3
 8003b84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b88:	00e2      	lsls	r2, r4, #3
 8003b8a:	4614      	mov	r4, r2
 8003b8c:	461d      	mov	r5, r3
 8003b8e:	eb14 030a 	adds.w	r3, r4, sl
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	eb45 030b 	adc.w	r3, r5, fp
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	028b      	lsls	r3, r1, #10
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	028a      	lsls	r2, r1, #10
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	60fa      	str	r2, [r7, #12]
 8003bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bc4:	f7fc fb5c 	bl	8000280 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003be0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bea:	e002      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3740      	adds	r7, #64	@ 0x40
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	00f42400 	.word	0x00f42400
 8003c08:	017d7840 	.word	0x017d7840

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	2000001c 	.word	0x2000001c

08003c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c28:	f7ff fff0 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0a9b      	lsrs	r3, r3, #10
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4903      	ldr	r1, [pc, #12]	@ (8003c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	08009bec 	.word	0x08009bec

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c50:	f7ff ffdc 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0b5b      	lsrs	r3, r3, #13
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08009bec 	.word	0x08009bec

08003c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e041      	b.n	8003d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fc ff82 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f000 fc4a 	bl	800454c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d001      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e044      	b.n	8003db6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x6c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d56:	d013      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x6c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x6c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a19      	ldr	r2, [pc, #100]	@ (8003dcc <HAL_TIM_Base_Start_IT+0xb8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x6c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a17      	ldr	r2, [pc, #92]	@ (8003dd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x6c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	@ (8003dd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d010      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	e007      	b.n	8003db4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40014000 	.word	0x40014000

08003dd8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e041      	b.n	8003e6e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f839 	bl	8003e76 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 fb98 	bl	800454c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e041      	b.n	8003f20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f839 	bl	8003f28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f000 fb3f 	bl	800454c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fac1 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fab3 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fac4 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0204 	mvn.w	r2, #4
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa9b 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa8d 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa9e 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa75 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa67 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fa78 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa4f 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa41 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa52 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa1f 	bl	80044e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fdbc 	bl	8004c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa23 	bl	8004536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0220 	mvn.w	r2, #32
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fd8e 	bl	8004c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004136:	2302      	movs	r3, #2
 8004138:	e048      	b.n	80041cc <HAL_TIM_OC_ConfigChannel+0xb0>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d839      	bhi.n	80041bc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004148:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <HAL_TIM_OC_ConfigChannel+0x34>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004185 	.word	0x08004185
 8004154:	080041bd 	.word	0x080041bd
 8004158:	080041bd 	.word	0x080041bd
 800415c:	080041bd 	.word	0x080041bd
 8004160:	08004193 	.word	0x08004193
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041bd 	.word	0x080041bd
 800416c:	080041bd 	.word	0x080041bd
 8004170:	080041a1 	.word	0x080041a1
 8004174:	080041bd 	.word	0x080041bd
 8004178:	080041bd 	.word	0x080041bd
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041af 	.word	0x080041af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fa6a 	bl	8004664 <TIM_OC1_SetConfig>
      break;
 8004190:	e017      	b.n	80041c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fac9 	bl	8004730 <TIM_OC2_SetConfig>
      break;
 800419e:	e010      	b.n	80041c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fb2e 	bl	8004808 <TIM_OC3_SetConfig>
      break;
 80041ac:	e009      	b.n	80041c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fb91 	bl	80048dc <TIM_OC4_SetConfig>
      break;
 80041ba:	e002      	b.n	80041c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
      break;
 80041c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0ae      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	f200 809f 	bhi.w	8004340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004202:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800423d 	.word	0x0800423d
 800420c:	08004341 	.word	0x08004341
 8004210:	08004341 	.word	0x08004341
 8004214:	08004341 	.word	0x08004341
 8004218:	0800427d 	.word	0x0800427d
 800421c:	08004341 	.word	0x08004341
 8004220:	08004341 	.word	0x08004341
 8004224:	08004341 	.word	0x08004341
 8004228:	080042bf 	.word	0x080042bf
 800422c:	08004341 	.word	0x08004341
 8004230:	08004341 	.word	0x08004341
 8004234:	08004341 	.word	0x08004341
 8004238:	080042ff 	.word	0x080042ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fa0e 	bl	8004664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0208 	orr.w	r2, r2, #8
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0204 	bic.w	r2, r2, #4
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	619a      	str	r2, [r3, #24]
      break;
 800427a:	e064      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fa54 	bl	8004730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6999      	ldr	r1, [r3, #24]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	619a      	str	r2, [r3, #24]
      break;
 80042bc:	e043      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fa9f 	bl	8004808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0208 	orr.w	r2, r2, #8
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0204 	bic.w	r2, r2, #4
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	61da      	str	r2, [r3, #28]
      break;
 80042fc:	e023      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fae9 	bl	80048dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	021a      	lsls	r2, r3, #8
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	61da      	str	r2, [r3, #28]
      break;
 800433e:	e002      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
      break;
 8004344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIM_ConfigClockSource+0x1c>
 8004370:	2302      	movs	r3, #2
 8004372:	e0b4      	b.n	80044de <HAL_TIM_ConfigClockSource+0x186>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800439a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ac:	d03e      	beq.n	800442c <HAL_TIM_ConfigClockSource+0xd4>
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b2:	f200 8087 	bhi.w	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ba:	f000 8086 	beq.w	80044ca <HAL_TIM_ConfigClockSource+0x172>
 80043be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c2:	d87f      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043c4:	2b70      	cmp	r3, #112	@ 0x70
 80043c6:	d01a      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0xa6>
 80043c8:	2b70      	cmp	r3, #112	@ 0x70
 80043ca:	d87b      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043cc:	2b60      	cmp	r3, #96	@ 0x60
 80043ce:	d050      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x11a>
 80043d0:	2b60      	cmp	r3, #96	@ 0x60
 80043d2:	d877      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b50      	cmp	r3, #80	@ 0x50
 80043d6:	d03c      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0xfa>
 80043d8:	2b50      	cmp	r3, #80	@ 0x50
 80043da:	d873      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d058      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x13a>
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d86f      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043e4:	2b30      	cmp	r3, #48	@ 0x30
 80043e6:	d064      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043e8:	2b30      	cmp	r3, #48	@ 0x30
 80043ea:	d86b      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d060      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d867      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05c      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d05a      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043fc:	e062      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440e:	f000 fb2f 	bl	8004a70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	609a      	str	r2, [r3, #8]
      break;
 800442a:	e04f      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	f000 fb18 	bl	8004a70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800444e:	609a      	str	r2, [r3, #8]
      break;
 8004450:	e03c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	461a      	mov	r2, r3
 8004460:	f000 fa8c 	bl	800497c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2150      	movs	r1, #80	@ 0x50
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fae5 	bl	8004a3a <TIM_ITRx_SetConfig>
      break;
 8004470:	e02c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800447e:	461a      	mov	r2, r3
 8004480:	f000 faab 	bl	80049da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2160      	movs	r1, #96	@ 0x60
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fad5 	bl	8004a3a <TIM_ITRx_SetConfig>
      break;
 8004490:	e01c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	461a      	mov	r2, r3
 80044a0:	f000 fa6c 	bl	800497c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2140      	movs	r1, #64	@ 0x40
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fac5 	bl	8004a3a <TIM_ITRx_SetConfig>
      break;
 80044b0:	e00c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f000 fabc 	bl	8004a3a <TIM_ITRx_SetConfig>
      break;
 80044c2:	e003      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      break;
 80044c8:	e000      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3a      	ldr	r2, [pc, #232]	@ (8004648 <TIM_Base_SetConfig+0xfc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a37      	ldr	r2, [pc, #220]	@ (800464c <TIM_Base_SetConfig+0x100>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a36      	ldr	r2, [pc, #216]	@ (8004650 <TIM_Base_SetConfig+0x104>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a35      	ldr	r2, [pc, #212]	@ (8004654 <TIM_Base_SetConfig+0x108>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2b      	ldr	r2, [pc, #172]	@ (8004648 <TIM_Base_SetConfig+0xfc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01b      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a4:	d017      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a28      	ldr	r2, [pc, #160]	@ (800464c <TIM_Base_SetConfig+0x100>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <TIM_Base_SetConfig+0x104>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a26      	ldr	r2, [pc, #152]	@ (8004654 <TIM_Base_SetConfig+0x108>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a25      	ldr	r2, [pc, #148]	@ (8004658 <TIM_Base_SetConfig+0x10c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a24      	ldr	r2, [pc, #144]	@ (800465c <TIM_Base_SetConfig+0x110>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a23      	ldr	r2, [pc, #140]	@ (8004660 <TIM_Base_SetConfig+0x114>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a0e      	ldr	r2, [pc, #56]	@ (8004648 <TIM_Base_SetConfig+0xfc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]
  }
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800

08004664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f023 0201 	bic.w	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 0302 	bic.w	r3, r3, #2
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <TIM_OC1_SetConfig+0xc8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10c      	bne.n	80046da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0308 	bic.w	r3, r3, #8
 80046c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f023 0304 	bic.w	r3, r3, #4
 80046d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a13      	ldr	r2, [pc, #76]	@ (800472c <TIM_OC1_SetConfig+0xc8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40010000 	.word	0x40010000

08004730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f023 0210 	bic.w	r2, r3, #16
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a1e      	ldr	r2, [pc, #120]	@ (8004804 <TIM_OC2_SetConfig+0xd4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10d      	bne.n	80047ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <TIM_OC2_SetConfig+0xd4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d113      	bne.n	80047dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000

08004808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <TIM_OC3_SetConfig+0xd0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10d      	bne.n	8004882 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800486c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a14      	ldr	r2, [pc, #80]	@ (80048d8 <TIM_OC3_SetConfig+0xd0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d113      	bne.n	80048b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40010000 	.word	0x40010000

080048dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	031b      	lsls	r3, r3, #12
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a10      	ldr	r2, [pc, #64]	@ (8004978 <TIM_OC4_SetConfig+0x9c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d109      	bne.n	8004950 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	019b      	lsls	r3, r3, #6
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000

0800497c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f023 0201 	bic.w	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 030a 	bic.w	r3, r3, #10
 80049b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049da:	b480      	push	{r7}
 80049dc:	b087      	sub	sp, #28
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f023 0210 	bic.w	r2, r3, #16
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	031b      	lsls	r3, r3, #12
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f043 0307 	orr.w	r3, r3, #7
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	021a      	lsls	r2, r3, #8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	609a      	str	r2, [r3, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e050      	b.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b14:	d013      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a16      	ldr	r2, [pc, #88]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a13      	ldr	r2, [pc, #76]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10c      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40014000 	.word	0x40014000

08004b8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e03d      	b.n	8004c24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e042      	b.n	8004cf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc f850 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	@ 0x24
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f82b 	bl	8004cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cfc:	b0c0      	sub	sp, #256	@ 0x100
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	68d9      	ldr	r1, [r3, #12]
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	ea40 0301 	orr.w	r3, r0, r1
 8004d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d50:	f021 010c 	bic.w	r1, r1, #12
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d72:	6999      	ldr	r1, [r3, #24]
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	ea40 0301 	orr.w	r3, r0, r1
 8004d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc4 <UART_SetConfig+0x2cc>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d005      	beq.n	8004d98 <UART_SetConfig+0xa0>
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b8d      	ldr	r3, [pc, #564]	@ (8004fc8 <UART_SetConfig+0x2d0>)
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d104      	bne.n	8004da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d98:	f7fe ff58 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8004d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004da0:	e003      	b.n	8004daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004da2:	f7fe ff3f 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 8004da6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db4:	f040 810c 	bne.w	8004fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dca:	4622      	mov	r2, r4
 8004dcc:	462b      	mov	r3, r5
 8004dce:	1891      	adds	r1, r2, r2
 8004dd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dda:	4621      	mov	r1, r4
 8004ddc:	eb12 0801 	adds.w	r8, r2, r1
 8004de0:	4629      	mov	r1, r5
 8004de2:	eb43 0901 	adc.w	r9, r3, r1
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dfa:	4690      	mov	r8, r2
 8004dfc:	4699      	mov	r9, r3
 8004dfe:	4623      	mov	r3, r4
 8004e00:	eb18 0303 	adds.w	r3, r8, r3
 8004e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e08:	462b      	mov	r3, r5
 8004e0a:	eb49 0303 	adc.w	r3, r9, r3
 8004e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e26:	460b      	mov	r3, r1
 8004e28:	18db      	adds	r3, r3, r3
 8004e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	eb42 0303 	adc.w	r3, r2, r3
 8004e32:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e3c:	f7fb fa20 	bl	8000280 <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4b61      	ldr	r3, [pc, #388]	@ (8004fcc <UART_SetConfig+0x2d4>)
 8004e46:	fba3 2302 	umull	r2, r3, r3, r2
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	011c      	lsls	r4, r3, #4
 8004e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	1891      	adds	r1, r2, r2
 8004e66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e68:	415b      	adcs	r3, r3
 8004e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e70:	4641      	mov	r1, r8
 8004e72:	eb12 0a01 	adds.w	sl, r2, r1
 8004e76:	4649      	mov	r1, r9
 8004e78:	eb43 0b01 	adc.w	fp, r3, r1
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e90:	4692      	mov	sl, r2
 8004e92:	469b      	mov	fp, r3
 8004e94:	4643      	mov	r3, r8
 8004e96:	eb1a 0303 	adds.w	r3, sl, r3
 8004e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	18db      	adds	r3, r3, r3
 8004ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	eb42 0303 	adc.w	r3, r2, r3
 8004ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ed2:	f7fb f9d5 	bl	8000280 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fcc <UART_SetConfig+0x2d4>)
 8004ede:	fba3 2301 	umull	r2, r3, r3, r1
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2264      	movs	r2, #100	@ 0x64
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	1acb      	subs	r3, r1, r3
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ef2:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <UART_SetConfig+0x2d4>)
 8004ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f00:	441c      	add	r4, r3
 8004f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	1891      	adds	r1, r2, r2
 8004f1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f1c:	415b      	adcs	r3, r3
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f24:	4641      	mov	r1, r8
 8004f26:	1851      	adds	r1, r2, r1
 8004f28:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	414b      	adcs	r3, r1
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f3c:	4659      	mov	r1, fp
 8004f3e:	00cb      	lsls	r3, r1, #3
 8004f40:	4651      	mov	r1, sl
 8004f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f46:	4651      	mov	r1, sl
 8004f48:	00ca      	lsls	r2, r1, #3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4642      	mov	r2, r8
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f58:	464b      	mov	r3, r9
 8004f5a:	460a      	mov	r2, r1
 8004f5c:	eb42 0303 	adc.w	r3, r2, r3
 8004f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f78:	460b      	mov	r3, r1
 8004f7a:	18db      	adds	r3, r3, r3
 8004f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f7e:	4613      	mov	r3, r2
 8004f80:	eb42 0303 	adc.w	r3, r2, r3
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f8e:	f7fb f977 	bl	8000280 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <UART_SetConfig+0x2d4>)
 8004f98:	fba3 1302 	umull	r1, r3, r3, r2
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	2164      	movs	r1, #100	@ 0x64
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	3332      	adds	r3, #50	@ 0x32
 8004faa:	4a08      	ldr	r2, [pc, #32]	@ (8004fcc <UART_SetConfig+0x2d4>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	f003 0207 	and.w	r2, r3, #7
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4422      	add	r2, r4
 8004fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fc0:	e106      	b.n	80051d0 <UART_SetConfig+0x4d8>
 8004fc2:	bf00      	nop
 8004fc4:	40011000 	.word	0x40011000
 8004fc8:	40011400 	.word	0x40011400
 8004fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	1891      	adds	r1, r2, r2
 8004fe8:	6239      	str	r1, [r7, #32]
 8004fea:	415b      	adcs	r3, r3
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ff2:	4641      	mov	r1, r8
 8004ff4:	1854      	adds	r4, r2, r1
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	eb43 0501 	adc.w	r5, r3, r1
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	00eb      	lsls	r3, r5, #3
 8005006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800500a:	00e2      	lsls	r2, r4, #3
 800500c:	4614      	mov	r4, r2
 800500e:	461d      	mov	r5, r3
 8005010:	4643      	mov	r3, r8
 8005012:	18e3      	adds	r3, r4, r3
 8005014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005018:	464b      	mov	r3, r9
 800501a:	eb45 0303 	adc.w	r3, r5, r3
 800501e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800502e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800503e:	4629      	mov	r1, r5
 8005040:	008b      	lsls	r3, r1, #2
 8005042:	4621      	mov	r1, r4
 8005044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005048:	4621      	mov	r1, r4
 800504a:	008a      	lsls	r2, r1, #2
 800504c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005050:	f7fb f916 	bl	8000280 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4b60      	ldr	r3, [pc, #384]	@ (80051dc <UART_SetConfig+0x4e4>)
 800505a:	fba3 2302 	umull	r2, r3, r3, r2
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	011c      	lsls	r4, r3, #4
 8005062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005066:	2200      	movs	r2, #0
 8005068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800506c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005074:	4642      	mov	r2, r8
 8005076:	464b      	mov	r3, r9
 8005078:	1891      	adds	r1, r2, r2
 800507a:	61b9      	str	r1, [r7, #24]
 800507c:	415b      	adcs	r3, r3
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005084:	4641      	mov	r1, r8
 8005086:	1851      	adds	r1, r2, r1
 8005088:	6139      	str	r1, [r7, #16]
 800508a:	4649      	mov	r1, r9
 800508c:	414b      	adcs	r3, r1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800509c:	4659      	mov	r1, fp
 800509e:	00cb      	lsls	r3, r1, #3
 80050a0:	4651      	mov	r1, sl
 80050a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050a6:	4651      	mov	r1, sl
 80050a8:	00ca      	lsls	r2, r1, #3
 80050aa:	4610      	mov	r0, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	4642      	mov	r2, r8
 80050b2:	189b      	adds	r3, r3, r2
 80050b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050b8:	464b      	mov	r3, r9
 80050ba:	460a      	mov	r2, r1
 80050bc:	eb42 0303 	adc.w	r3, r2, r3
 80050c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050dc:	4649      	mov	r1, r9
 80050de:	008b      	lsls	r3, r1, #2
 80050e0:	4641      	mov	r1, r8
 80050e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e6:	4641      	mov	r1, r8
 80050e8:	008a      	lsls	r2, r1, #2
 80050ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050ee:	f7fb f8c7 	bl	8000280 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	4b38      	ldr	r3, [pc, #224]	@ (80051dc <UART_SetConfig+0x4e4>)
 80050fa:	fba3 2301 	umull	r2, r3, r3, r1
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	2264      	movs	r2, #100	@ 0x64
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	1acb      	subs	r3, r1, r3
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	3332      	adds	r3, #50	@ 0x32
 800510c:	4a33      	ldr	r2, [pc, #204]	@ (80051dc <UART_SetConfig+0x4e4>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005118:	441c      	add	r4, r3
 800511a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511e:	2200      	movs	r2, #0
 8005120:	673b      	str	r3, [r7, #112]	@ 0x70
 8005122:	677a      	str	r2, [r7, #116]	@ 0x74
 8005124:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	1891      	adds	r1, r2, r2
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	415b      	adcs	r3, r3
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005138:	4641      	mov	r1, r8
 800513a:	1851      	adds	r1, r2, r1
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	4649      	mov	r1, r9
 8005140:	414b      	adcs	r3, r1
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005150:	4659      	mov	r1, fp
 8005152:	00cb      	lsls	r3, r1, #3
 8005154:	4651      	mov	r1, sl
 8005156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515a:	4651      	mov	r1, sl
 800515c:	00ca      	lsls	r2, r1, #3
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	4603      	mov	r3, r0
 8005164:	4642      	mov	r2, r8
 8005166:	189b      	adds	r3, r3, r2
 8005168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800516a:	464b      	mov	r3, r9
 800516c:	460a      	mov	r2, r1
 800516e:	eb42 0303 	adc.w	r3, r2, r3
 8005172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	663b      	str	r3, [r7, #96]	@ 0x60
 800517e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800518c:	4649      	mov	r1, r9
 800518e:	008b      	lsls	r3, r1, #2
 8005190:	4641      	mov	r1, r8
 8005192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005196:	4641      	mov	r1, r8
 8005198:	008a      	lsls	r2, r1, #2
 800519a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800519e:	f7fb f86f 	bl	8000280 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4b0d      	ldr	r3, [pc, #52]	@ (80051dc <UART_SetConfig+0x4e4>)
 80051a8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	2164      	movs	r1, #100	@ 0x64
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	3332      	adds	r3, #50	@ 0x32
 80051ba:	4a08      	ldr	r2, [pc, #32]	@ (80051dc <UART_SetConfig+0x4e4>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 020f 	and.w	r2, r3, #15
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4422      	add	r2, r4
 80051ce:	609a      	str	r2, [r3, #8]
}
 80051d0:	bf00      	nop
 80051d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051d6:	46bd      	mov	sp, r7
 80051d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051dc:	51eb851f 	.word	0x51eb851f

080051e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e0:	b084      	sub	sp, #16
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	f107 001c 	add.w	r0, r7, #28
 80051ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d123      	bne.n	8005242 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800520e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005222:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fae8 	bl	800680c <USB_CoreReset>
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]
 8005240:	e01b      	b.n	800527a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f001 fadc 	bl	800680c <USB_CoreReset>
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005258:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	@ 0x38
 800526c:	e005      	b.n	800527a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800527a:	7fbb      	ldrb	r3, [r7, #30]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10b      	bne.n	8005298 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f043 0206 	orr.w	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a4:	b004      	add	sp, #16
 80052a6:	4770      	bx	lr

080052a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d165      	bne.n	8005388 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a41      	ldr	r2, [pc, #260]	@ (80053c4 <USB_SetTurnaroundTime+0x11c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d906      	bls.n	80052d2 <USB_SetTurnaroundTime+0x2a>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a40      	ldr	r2, [pc, #256]	@ (80053c8 <USB_SetTurnaroundTime+0x120>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d202      	bcs.n	80052d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052cc:	230f      	movs	r3, #15
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e062      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a3c      	ldr	r2, [pc, #240]	@ (80053c8 <USB_SetTurnaroundTime+0x120>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d306      	bcc.n	80052e8 <USB_SetTurnaroundTime+0x40>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a3b      	ldr	r2, [pc, #236]	@ (80053cc <USB_SetTurnaroundTime+0x124>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d202      	bcs.n	80052e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052e2:	230e      	movs	r3, #14
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e057      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a38      	ldr	r2, [pc, #224]	@ (80053cc <USB_SetTurnaroundTime+0x124>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d306      	bcc.n	80052fe <USB_SetTurnaroundTime+0x56>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a37      	ldr	r2, [pc, #220]	@ (80053d0 <USB_SetTurnaroundTime+0x128>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d202      	bcs.n	80052fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052f8:	230d      	movs	r3, #13
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e04c      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a33      	ldr	r2, [pc, #204]	@ (80053d0 <USB_SetTurnaroundTime+0x128>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d306      	bcc.n	8005314 <USB_SetTurnaroundTime+0x6c>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a32      	ldr	r2, [pc, #200]	@ (80053d4 <USB_SetTurnaroundTime+0x12c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d802      	bhi.n	8005314 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800530e:	230c      	movs	r3, #12
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e041      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a2f      	ldr	r2, [pc, #188]	@ (80053d4 <USB_SetTurnaroundTime+0x12c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d906      	bls.n	800532a <USB_SetTurnaroundTime+0x82>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a2e      	ldr	r2, [pc, #184]	@ (80053d8 <USB_SetTurnaroundTime+0x130>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d802      	bhi.n	800532a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005324:	230b      	movs	r3, #11
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e036      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4a2a      	ldr	r2, [pc, #168]	@ (80053d8 <USB_SetTurnaroundTime+0x130>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d906      	bls.n	8005340 <USB_SetTurnaroundTime+0x98>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a29      	ldr	r2, [pc, #164]	@ (80053dc <USB_SetTurnaroundTime+0x134>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d802      	bhi.n	8005340 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800533a:	230a      	movs	r3, #10
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e02b      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a26      	ldr	r2, [pc, #152]	@ (80053dc <USB_SetTurnaroundTime+0x134>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d906      	bls.n	8005356 <USB_SetTurnaroundTime+0xae>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <USB_SetTurnaroundTime+0x138>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d202      	bcs.n	8005356 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005350:	2309      	movs	r3, #9
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e020      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a21      	ldr	r2, [pc, #132]	@ (80053e0 <USB_SetTurnaroundTime+0x138>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d306      	bcc.n	800536c <USB_SetTurnaroundTime+0xc4>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a20      	ldr	r2, [pc, #128]	@ (80053e4 <USB_SetTurnaroundTime+0x13c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d802      	bhi.n	800536c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005366:	2308      	movs	r3, #8
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e015      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <USB_SetTurnaroundTime+0x13c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d906      	bls.n	8005382 <USB_SetTurnaroundTime+0xda>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <USB_SetTurnaroundTime+0x140>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d202      	bcs.n	8005382 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800537c:	2307      	movs	r3, #7
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e00a      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005382:	2306      	movs	r3, #6
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e007      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800538e:	2309      	movs	r3, #9
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e001      	b.n	8005398 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005394:	2309      	movs	r3, #9
 8005396:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	00d8acbf 	.word	0x00d8acbf
 80053c8:	00e4e1c0 	.word	0x00e4e1c0
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	01067380 	.word	0x01067380
 80053d4:	011a499f 	.word	0x011a499f
 80053d8:	01312cff 	.word	0x01312cff
 80053dc:	014ca43f 	.word	0x014ca43f
 80053e0:	016e3600 	.word	0x016e3600
 80053e4:	01a6ab1f 	.word	0x01a6ab1f
 80053e8:	01e84800 	.word	0x01e84800

080053ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f043 0201 	orr.w	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d115      	bne.n	800547e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800545e:	200a      	movs	r0, #10
 8005460:	f7fb fe14 	bl	800108c <HAL_Delay>
      ms += 10U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	330a      	adds	r3, #10
 8005468:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 f93f 	bl	80066ee <USB_GetMode>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d01e      	beq.n	80054b4 <USB_SetCurrentMode+0x84>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2bc7      	cmp	r3, #199	@ 0xc7
 800547a:	d9f0      	bls.n	800545e <USB_SetCurrentMode+0x2e>
 800547c:	e01a      	b.n	80054b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d115      	bne.n	80054b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005490:	200a      	movs	r0, #10
 8005492:	f7fb fdfb 	bl	800108c <HAL_Delay>
      ms += 10U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	330a      	adds	r3, #10
 800549a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 f926 	bl	80066ee <USB_GetMode>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <USB_SetCurrentMode+0x84>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80054ac:	d9f0      	bls.n	8005490 <USB_SetCurrentMode+0x60>
 80054ae:	e001      	b.n	80054b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e005      	b.n	80054c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80054b8:	d101      	bne.n	80054be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054c8:	b084      	sub	sp, #16
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e009      	b.n	80054fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3340      	adds	r3, #64	@ 0x40
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3301      	adds	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b0e      	cmp	r3, #14
 8005500:	d9f2      	bls.n	80054e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005502:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11c      	bne.n	8005544 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005522:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	639a      	str	r2, [r3, #56]	@ 0x38
 8005542:	e00b      	b.n	800555c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005548:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005562:	461a      	mov	r2, r3
 8005564:	2300      	movs	r3, #0
 8005566:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005568:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10d      	bne.n	800558c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005578:	2100      	movs	r1, #0
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f968 	bl	8005850 <USB_SetDevSpeed>
 8005580:	e008      	b.n	8005594 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005582:	2101      	movs	r1, #1
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f963 	bl	8005850 <USB_SetDevSpeed>
 800558a:	e003      	b.n	8005594 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800558c:	2103      	movs	r1, #3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f95e 	bl	8005850 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005594:	2110      	movs	r1, #16
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8fa 	bl	8005790 <USB_FlushTxFifo>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f924 	bl	80057f4 <USB_FlushRxFifo>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	e043      	b.n	8005668 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055f6:	d118      	bne.n	800562a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560a:	461a      	mov	r2, r3
 800560c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e013      	b.n	800563c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005620:	461a      	mov	r2, r3
 8005622:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e008      	b.n	800563c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	2300      	movs	r3, #0
 800564c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565a:	461a      	mov	r2, r3
 800565c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005660:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800566c:	461a      	mov	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4293      	cmp	r3, r2
 8005672:	d3b5      	bcc.n	80055e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	e043      	b.n	8005702 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005690:	d118      	bne.n	80056c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e013      	b.n	80056d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e008      	b.n	80056d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3301      	adds	r3, #1
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005706:	461a      	mov	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4293      	cmp	r3, r2
 800570c:	d3b5      	bcc.n	800567a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800571c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005720:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800572e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005730:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f043 0210 	orr.w	r2, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	4b10      	ldr	r3, [pc, #64]	@ (800578c <USB_DevInit+0x2c4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005750:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f043 0208 	orr.w	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005788:	b004      	add	sp, #16
 800578a:	4770      	bx	lr
 800578c:	803c3800 	.word	0x803c3800

08005790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057aa:	d901      	bls.n	80057b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e01b      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	daf2      	bge.n	800579e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057d4:	d901      	bls.n	80057da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d0f0      	beq.n	80057c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800580c:	d901      	bls.n	8005812 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e018      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	daf2      	bge.n	8005800 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2210      	movs	r2, #16
 8005822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005830:	d901      	bls.n	8005836 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e006      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b10      	cmp	r3, #16
 8005840:	d0f0      	beq.n	8005824 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b087      	sub	sp, #28
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0306 	and.w	r3, r3, #6
 800589a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]
 80058a6:	e00a      	b.n	80058be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d002      	beq.n	80058b4 <USB_GetDevSpeed+0x32>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b06      	cmp	r3, #6
 80058b2:	d102      	bne.n	80058ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058b4:	2302      	movs	r3, #2
 80058b6:	75fb      	strb	r3, [r7, #23]
 80058b8:	e001      	b.n	80058be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058ba:	230f      	movs	r3, #15
 80058bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d13a      	bne.n	800595e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	68f9      	ldr	r1, [r7, #12]
 8005902:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005906:	4313      	orrs	r3, r2
 8005908:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d155      	bne.n	80059cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	791b      	ldrb	r3, [r3, #4]
 800593a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800593c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	059b      	lsls	r3, r3, #22
 8005942:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005944:	4313      	orrs	r3, r2
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e036      	b.n	80059cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	2101      	movs	r1, #1
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	041b      	lsls	r3, r3, #16
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800597c:	4313      	orrs	r3, r2
 800597e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d11a      	bne.n	80059cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	791b      	ldrb	r3, [r3, #4]
 80059b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059b2:	430b      	orrs	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d161      	bne.n	8005abc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a0e:	d11f      	bne.n	8005a50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f303 	lsl.w	r3, r1, r3
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a70:	4013      	ands	r3, r2
 8005a72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a94:	4013      	ands	r3, r2
 8005a96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	0159      	lsls	r1, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	440b      	add	r3, r1
 8005aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4b35      	ldr	r3, [pc, #212]	@ (8005b8c <USB_DeactivateEndpoint+0x1b0>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]
 8005aba:	e060      	b.n	8005b7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ad2:	d11f      	bne.n	8005b14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005af2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b34:	4013      	ands	r3, r2
 8005b36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	43db      	mvns	r3, r3
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	0159      	lsls	r1, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	440b      	add	r3, r1
 8005b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b76:	4619      	mov	r1, r3
 8005b78:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <USB_DeactivateEndpoint+0x1b4>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	ec337800 	.word	0xec337800
 8005b90:	eff37800 	.word	0xeff37800

08005b94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	@ 0x28
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f040 817f 	bne.w	8005eb4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d132      	bne.n	8005c24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bdc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c1c:	0cdb      	lsrs	r3, r3, #19
 8005c1e:	04db      	lsls	r3, r3, #19
 8005c20:	6113      	str	r3, [r2, #16]
 8005c22:	e097      	b.n	8005d54 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3e:	0cdb      	lsrs	r3, r3, #19
 8005c40:	04db      	lsls	r3, r3, #19
 8005c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c66:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11a      	bne.n	8005ca4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca0:	6113      	str	r3, [r2, #16]
 8005ca2:	e044      	b.n	8005d2e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4413      	add	r3, r2
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	8afb      	ldrh	r3, [r7, #22]
 8005cca:	04d9      	lsls	r1, r3, #19
 8005ccc:	4ba4      	ldr	r3, [pc, #656]	@ (8005f60 <USB_EPStartXfer+0x3cc>)
 8005cce:	400b      	ands	r3, r1
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	0148      	lsls	r0, r1, #5
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	791b      	ldrb	r3, [r3, #4]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d122      	bne.n	8005d2e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d02:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005d06:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	075b      	lsls	r3, r3, #29
 8005d1a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	0148      	lsls	r0, r1, #5
 8005d22:	69f9      	ldr	r1, [r7, #28]
 8005d24:	4401      	add	r1, r0
 8005d26:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	0148      	lsls	r0, r1, #5
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	4401      	add	r1, r0
 8005d4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d50:	4313      	orrs	r3, r2
 8005d52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d14b      	bne.n	8005df2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	791b      	ldrb	r3, [r3, #4]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d128      	bne.n	8005dd0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d110      	bne.n	8005db0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005da8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	e00f      	b.n	8005dd0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e166      	b.n	80060c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e10:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	791b      	ldrb	r3, [r3, #4]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d015      	beq.n	8005e46 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 814e 	beq.w	80060c0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e40:	4313      	orrs	r3, r2
 8005e42:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e44:	e13c      	b.n	80060c0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d110      	bne.n	8005e78 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00f      	b.n	8005e98 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e96:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	68d9      	ldr	r1, [r3, #12]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	b298      	uxth	r0, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f9b9 	bl	8006224 <USB_WritePacket>
 8005eb2:	e105      	b.n	80060c0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ece:	0cdb      	lsrs	r3, r3, #19
 8005ed0:	04db      	lsls	r3, r3, #19
 8005ed2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ef2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ef6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d132      	bne.n	8005f64 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	0148      	lsls	r0, r1, #5
 8005f30:	69f9      	ldr	r1, [r7, #28]
 8005f32:	4401      	add	r1, r0
 8005f34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f5a:	6113      	str	r3, [r2, #16]
 8005f5c:	e062      	b.n	8006024 <USB_EPStartXfer+0x490>
 8005f5e:	bf00      	nop
 8005f60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d123      	bne.n	8005fb4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f82:	69b9      	ldr	r1, [r7, #24]
 8005f84:	0148      	lsls	r0, r1, #5
 8005f86:	69f9      	ldr	r1, [r7, #28]
 8005f88:	4401      	add	r1, r0
 8005f8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fb0:	6113      	str	r3, [r2, #16]
 8005fb2:	e037      	b.n	8006024 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	1e5a      	subs	r2, r3, #1
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	8afa      	ldrh	r2, [r7, #22]
 8005fd0:	fb03 f202 	mul.w	r2, r3, r2
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	8afb      	ldrh	r3, [r7, #22]
 8005fe8:	04d9      	lsls	r1, r3, #19
 8005fea:	4b38      	ldr	r3, [pc, #224]	@ (80060cc <USB_EPStartXfer+0x538>)
 8005fec:	400b      	ands	r3, r1
 8005fee:	69b9      	ldr	r1, [r7, #24]
 8005ff0:	0148      	lsls	r0, r1, #5
 8005ff2:	69f9      	ldr	r1, [r7, #28]
 8005ff4:	4401      	add	r1, r0
 8005ff6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	0148      	lsls	r0, r1, #5
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	4401      	add	r1, r0
 800601c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d10d      	bne.n	8006046 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	68d9      	ldr	r1, [r3, #12]
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006042:	460a      	mov	r2, r1
 8006044:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	791b      	ldrb	r3, [r3, #4]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d128      	bne.n	80060a0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d110      	bne.n	8006080 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006078:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e00f      	b.n	80060a0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800609e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	1ff80000 	.word	0x1ff80000

080060d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d14a      	bne.n	8006184 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006106:	f040 8086 	bne.w	8006216 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006128:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800612c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800615e:	4293      	cmp	r3, r2
 8006160:	d902      	bls.n	8006168 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
          break;
 8006166:	e056      	b.n	8006216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800617c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006180:	d0e7      	beq.n	8006152 <USB_EPStopXfer+0x82>
 8006182:	e048      	b.n	8006216 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800619c:	d13b      	bne.n	8006216 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d902      	bls.n	80061fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
          break;
 80061fa:	e00c      	b.n	8006216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006214:	d0e7      	beq.n	80061e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	@ 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	460b      	mov	r3, r1
 8006234:	71fb      	strb	r3, [r7, #7]
 8006236:	4613      	mov	r3, r2
 8006238:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d123      	bne.n	8006292 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800624a:	88bb      	ldrh	r3, [r7, #4]
 800624c:	3303      	adds	r3, #3
 800624e:	089b      	lsrs	r3, r3, #2
 8006250:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e018      	b.n	800628a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	031a      	lsls	r2, r3, #12
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006264:	461a      	mov	r2, r3
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	3301      	adds	r3, #1
 8006276:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3301      	adds	r3, #1
 8006282:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	3301      	adds	r3, #1
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	429a      	cmp	r2, r3
 8006290:	d3e2      	bcc.n	8006258 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3724      	adds	r7, #36	@ 0x24
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b08b      	sub	sp, #44	@ 0x2c
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	089b      	lsrs	r3, r3, #2
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	e014      	b.n	80062f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	3301      	adds	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	3301      	adds	r3, #1
 80062e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	3301      	adds	r3, #1
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	3301      	adds	r3, #1
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	3301      	adds	r3, #1
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	6a3a      	ldr	r2, [r7, #32]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3e6      	bcc.n	80062cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062fe:	8bfb      	ldrh	r3, [r7, #30]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01e      	beq.n	8006342 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630e:	461a      	mov	r2, r3
 8006310:	f107 0310 	add.w	r3, r7, #16
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	b2da      	uxtb	r2, r3
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	701a      	strb	r2, [r3, #0]
      i++;
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	3301      	adds	r3, #1
 800632e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	3301      	adds	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006336:	8bfb      	ldrh	r3, [r7, #30]
 8006338:	3b01      	subs	r3, #1
 800633a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800633c:	8bfb      	ldrh	r3, [r7, #30]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ea      	bne.n	8006318 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006344:	4618      	mov	r0, r3
 8006346:	372c      	adds	r7, #44	@ 0x2c
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d12c      	bne.n	80063c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	db12      	blt.n	80063a4 <USB_EPSetStall+0x54>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00f      	beq.n	80063a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e02b      	b.n	800641e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db12      	blt.n	80063fe <USB_EPSetStall+0xae>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00f      	beq.n	80063fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006418:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800641c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d128      	bne.n	800649a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006462:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006466:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d003      	beq.n	8006478 <USB_EPClearStall+0x4c>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	791b      	ldrb	r3, [r3, #4]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d138      	bne.n	80064ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	e027      	b.n	80064ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	791b      	ldrb	r3, [r3, #4]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d003      	beq.n	80064ca <USB_EPClearStall+0x9e>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d10f      	bne.n	80064ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006516:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800651a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800652c:	68f9      	ldr	r1, [r7, #12]
 800652e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006532:	4313      	orrs	r3, r2
 8006534:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006572:	f023 0302 	bic.w	r3, r3, #2
 8006576:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b4:	f043 0302 	orr.w	r3, r3, #2
 80065b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065e0:	68fb      	ldr	r3, [r7, #12]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4013      	ands	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	0c1b      	lsrs	r3, r3, #16
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	4013      	ands	r3, r2
 8006644:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	b29b      	uxth	r3, r3
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4013      	ands	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006684:	68bb      	ldr	r3, [r7, #8]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006692:	b480      	push	{r7}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	fa22 f303 	lsr.w	r3, r2, r3
 80066c2:	01db      	lsls	r3, r3, #7
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4013      	ands	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066e0:	68bb      	ldr	r3, [r7, #8]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	f003 0301 	and.w	r3, r3, #1
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006724:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800673c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	460b      	mov	r3, r1
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	333c      	adds	r3, #60	@ 0x3c
 8006766:	3304      	adds	r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4a26      	ldr	r2, [pc, #152]	@ (8006808 <USB_EP0_OutStart+0xb8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d90a      	bls.n	800678a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006784:	d101      	bne.n	800678a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	e037      	b.n	80067fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b8:	f043 0318 	orr.w	r3, r3, #24
 80067bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80067d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10f      	bne.n	80067f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80067f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	4f54300a 	.word	0x4f54300a

0800680c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006824:	d901      	bls.n	800682a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e01b      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	daf2      	bge.n	8006818 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f043 0201 	orr.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800684e:	d901      	bls.n	8006854 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e006      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d0f0      	beq.n	8006842 <USB_CoreReset+0x36>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800687c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006880:	f002 fc94 	bl	80091ac <USBD_static_malloc>
 8006884:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32b0      	adds	r2, #176	@ 0xb0
 8006896:	2100      	movs	r1, #0
 8006898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800689c:	2302      	movs	r3, #2
 800689e:	e0d4      	b.n	8006a4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80068a4:	2100      	movs	r1, #0
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f002 fce4 	bl	8009274 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32b0      	adds	r2, #176	@ 0xb0
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32b0      	adds	r2, #176	@ 0xb0
 80068c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7c1b      	ldrb	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d138      	bne.n	800694a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006a54 <USBD_CDC_Init+0x1e4>)
 80068da:	7819      	ldrb	r1, [r3, #0]
 80068dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068e0:	2202      	movs	r2, #2
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f002 fb3f 	bl	8008f66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a54 <USBD_CDC_Init+0x1e4>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	3324      	adds	r3, #36	@ 0x24
 80068fe:	2201      	movs	r2, #1
 8006900:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006902:	4b55      	ldr	r3, [pc, #340]	@ (8006a58 <USBD_CDC_Init+0x1e8>)
 8006904:	7819      	ldrb	r1, [r3, #0]
 8006906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800690a:	2202      	movs	r2, #2
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f002 fb2a 	bl	8008f66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006912:	4b51      	ldr	r3, [pc, #324]	@ (8006a58 <USBD_CDC_Init+0x1e8>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 020f 	and.w	r2, r3, #15
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800692a:	2201      	movs	r2, #1
 800692c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800692e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a5c <USBD_CDC_Init+0x1ec>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	3326      	adds	r3, #38	@ 0x26
 8006944:	2210      	movs	r2, #16
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e035      	b.n	80069b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800694a:	4b42      	ldr	r3, [pc, #264]	@ (8006a54 <USBD_CDC_Init+0x1e4>)
 800694c:	7819      	ldrb	r1, [r3, #0]
 800694e:	2340      	movs	r3, #64	@ 0x40
 8006950:	2202      	movs	r2, #2
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f002 fb07 	bl	8008f66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006958:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <USBD_CDC_Init+0x1e4>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f003 020f 	and.w	r2, r3, #15
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	2201      	movs	r2, #1
 8006970:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006972:	4b39      	ldr	r3, [pc, #228]	@ (8006a58 <USBD_CDC_Init+0x1e8>)
 8006974:	7819      	ldrb	r1, [r3, #0]
 8006976:	2340      	movs	r3, #64	@ 0x40
 8006978:	2202      	movs	r2, #2
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f002 faf3 	bl	8008f66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006980:	4b35      	ldr	r3, [pc, #212]	@ (8006a58 <USBD_CDC_Init+0x1e8>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 020f 	and.w	r2, r3, #15
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006998:	2201      	movs	r2, #1
 800699a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800699c:	4b2f      	ldr	r3, [pc, #188]	@ (8006a5c <USBD_CDC_Init+0x1ec>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	3326      	adds	r3, #38	@ 0x26
 80069b2:	2210      	movs	r2, #16
 80069b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069b6:	4b29      	ldr	r3, [pc, #164]	@ (8006a5c <USBD_CDC_Init+0x1ec>)
 80069b8:	7819      	ldrb	r1, [r3, #0]
 80069ba:	2308      	movs	r3, #8
 80069bc:	2203      	movs	r2, #3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f002 fad1 	bl	8008f66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069c4:	4b25      	ldr	r3, [pc, #148]	@ (8006a5c <USBD_CDC_Init+0x1ec>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 020f 	and.w	r2, r3, #15
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	3324      	adds	r3, #36	@ 0x24
 80069da:	2201      	movs	r2, #1
 80069dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	33b0      	adds	r3, #176	@ 0xb0
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a14:	2302      	movs	r3, #2
 8006a16:	e018      	b.n	8006a4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	7c1b      	ldrb	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a20:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <USBD_CDC_Init+0x1e8>)
 8006a22:	7819      	ldrb	r1, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 fb88 	bl	8009144 <USBD_LL_PrepareReceive>
 8006a34:	e008      	b.n	8006a48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a36:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <USBD_CDC_Init+0x1e8>)
 8006a38:	7819      	ldrb	r1, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a40:	2340      	movs	r3, #64	@ 0x40
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f002 fb7e 	bl	8009144 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200000af 	.word	0x200000af
 8006a58:	200000b0 	.word	0x200000b0
 8006a5c:	200000b1 	.word	0x200000b1

08006a60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b58 <USBD_CDC_DeInit+0xf8>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f002 fa9d 	bl	8008fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a78:	4b37      	ldr	r3, [pc, #220]	@ (8006b58 <USBD_CDC_DeInit+0xf8>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3324      	adds	r3, #36	@ 0x24
 8006a8e:	2200      	movs	r2, #0
 8006a90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a92:	4b32      	ldr	r3, [pc, #200]	@ (8006b5c <USBD_CDC_DeInit+0xfc>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f002 fa8a 	bl	8008fb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b5c <USBD_CDC_DeInit+0xfc>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	f003 020f 	and.w	r2, r3, #15
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006aba:	4b29      	ldr	r3, [pc, #164]	@ (8006b60 <USBD_CDC_DeInit+0x100>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f002 fa76 	bl	8008fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ac6:	4b26      	ldr	r3, [pc, #152]	@ (8006b60 <USBD_CDC_DeInit+0x100>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	f003 020f 	and.w	r2, r3, #15
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	3324      	adds	r3, #36	@ 0x24
 8006adc:	2200      	movs	r2, #0
 8006ade:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b60 <USBD_CDC_DeInit+0x100>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f003 020f 	and.w	r2, r3, #15
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	440b      	add	r3, r1
 8006af4:	3326      	adds	r3, #38	@ 0x26
 8006af6:	2200      	movs	r2, #0
 8006af8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	32b0      	adds	r2, #176	@ 0xb0
 8006b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01f      	beq.n	8006b4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	33b0      	adds	r3, #176	@ 0xb0
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32b0      	adds	r2, #176	@ 0xb0
 8006b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f002 fb4a 	bl	80091c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	32b0      	adds	r2, #176	@ 0xb0
 8006b3e:	2100      	movs	r1, #0
 8006b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200000af 	.word	0x200000af
 8006b5c:	200000b0 	.word	0x200000b0
 8006b60:	200000b1 	.word	0x200000b1

08006b64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	32b0      	adds	r2, #176	@ 0xb0
 8006b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e0bf      	b.n	8006d14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d050      	beq.n	8006c42 <USBD_CDC_Setup+0xde>
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	f040 80af 	bne.w	8006d04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88db      	ldrh	r3, [r3, #6]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d03a      	beq.n	8006c24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b25b      	sxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da1b      	bge.n	8006bf0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	33b0      	adds	r3, #176	@ 0xb0
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006bce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	88d2      	ldrh	r2, [r2, #6]
 8006bd4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	88db      	ldrh	r3, [r3, #6]
 8006bda:	2b07      	cmp	r3, #7
 8006bdc:	bf28      	it	cs
 8006bde:	2307      	movcs	r3, #7
 8006be0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	89fa      	ldrh	r2, [r7, #14]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 fd93 	bl	8008714 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006bee:	e090      	b.n	8006d12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	785a      	ldrb	r2, [r3, #1]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	88db      	ldrh	r3, [r3, #6]
 8006bfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c00:	d803      	bhi.n	8006c0a <USBD_CDC_Setup+0xa6>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	88db      	ldrh	r3, [r3, #6]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	e000      	b.n	8006c0c <USBD_CDC_Setup+0xa8>
 8006c0a:	2240      	movs	r2, #64	@ 0x40
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c12:	6939      	ldr	r1, [r7, #16]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fda5 	bl	800876c <USBD_CtlPrepareRx>
      break;
 8006c22:	e076      	b.n	8006d12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	33b0      	adds	r3, #176	@ 0xb0
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	7850      	ldrb	r0, [r2, #1]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	4798      	blx	r3
      break;
 8006c40:	e067      	b.n	8006d12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	2b0b      	cmp	r3, #11
 8006c48:	d851      	bhi.n	8006cee <USBD_CDC_Setup+0x18a>
 8006c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c50 <USBD_CDC_Setup+0xec>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006cfd 	.word	0x08006cfd
 8006c58:	08006cef 	.word	0x08006cef
 8006c5c:	08006cef 	.word	0x08006cef
 8006c60:	08006cef 	.word	0x08006cef
 8006c64:	08006cef 	.word	0x08006cef
 8006c68:	08006cef 	.word	0x08006cef
 8006c6c:	08006cef 	.word	0x08006cef
 8006c70:	08006cef 	.word	0x08006cef
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006cab 	.word	0x08006cab
 8006c7c:	08006cd5 	.word	0x08006cd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d107      	bne.n	8006c9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c8c:	f107 030a 	add.w	r3, r7, #10
 8006c90:	2202      	movs	r2, #2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fd3d 	bl	8008714 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c9a:	e032      	b.n	8006d02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fcbb 	bl	800861a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ca8:	e02b      	b.n	8006d02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cb6:	f107 030d 	add.w	r3, r7, #13
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fd28 	bl	8008714 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cc4:	e01d      	b.n	8006d02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fca6 	bl	800861a <USBD_CtlError>
            ret = USBD_FAIL;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd2:	e016      	b.n	8006d02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d00f      	beq.n	8006d00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fc99 	bl	800861a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cec:	e008      	b.n	8006d00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 fc92 	bl	800861a <USBD_CtlError>
          ret = USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfa:	e002      	b.n	8006d02 <USBD_CDC_Setup+0x19e>
          break;
 8006cfc:	bf00      	nop
 8006cfe:	e008      	b.n	8006d12 <USBD_CDC_Setup+0x1ae>
          break;
 8006d00:	bf00      	nop
      }
      break;
 8006d02:	e006      	b.n	8006d12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fc87 	bl	800861a <USBD_CtlError>
      ret = USBD_FAIL;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d10:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32b0      	adds	r2, #176	@ 0xb0
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e065      	b.n	8006e12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	32b0      	adds	r2, #176	@ 0xb0
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	3318      	adds	r3, #24
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d02f      	beq.n	8006dd0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	f003 020f 	and.w	r2, r3, #15
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	3318      	adds	r3, #24
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	f003 010f 	and.w	r1, r3, #15
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	440b      	add	r3, r1
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4403      	add	r3, r0
 8006d98:	331c      	adds	r3, #28
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d112      	bne.n	8006dd0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	f003 020f 	and.w	r2, r3, #15
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	3318      	adds	r3, #24
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dc2:	78f9      	ldrb	r1, [r7, #3]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f002 f99a 	bl	8009102 <USBD_LL_Transmit>
 8006dce:	e01f      	b.n	8006e10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	33b0      	adds	r3, #176	@ 0xb0
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d010      	beq.n	8006e10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	33b0      	adds	r3, #176	@ 0xb0
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006e0c:	78fa      	ldrb	r2, [r7, #3]
 8006e0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	32b0      	adds	r2, #176	@ 0xb0
 8006e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	32b0      	adds	r2, #176	@ 0xb0
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e01a      	b.n	8006e82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 f998 	bl	8009186 <USBD_LL_GetRxDataSize>
 8006e56:	4602      	mov	r2, r0
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	33b0      	adds	r3, #176	@ 0xb0
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	32b0      	adds	r2, #176	@ 0xb0
 8006e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e024      	b.n	8006ef6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	33b0      	adds	r3, #176	@ 0xb0
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d019      	beq.n	8006ef4 <USBD_CDC_EP0_RxReady+0x6a>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ec6:	2bff      	cmp	r3, #255	@ 0xff
 8006ec8:	d014      	beq.n	8006ef4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	33b0      	adds	r3, #176	@ 0xb0
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ee2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006eea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	22ff      	movs	r2, #255	@ 0xff
 8006ef0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f08:	2182      	movs	r1, #130	@ 0x82
 8006f0a:	4818      	ldr	r0, [pc, #96]	@ (8006f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f0c:	f000 fd4f 	bl	80079ae <USBD_GetEpDesc>
 8006f10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f12:	2101      	movs	r1, #1
 8006f14:	4815      	ldr	r0, [pc, #84]	@ (8006f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f16:	f000 fd4a 	bl	80079ae <USBD_GetEpDesc>
 8006f1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f1c:	2181      	movs	r1, #129	@ 0x81
 8006f1e:	4813      	ldr	r0, [pc, #76]	@ (8006f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f20:	f000 fd45 	bl	80079ae <USBD_GetEpDesc>
 8006f24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2210      	movs	r2, #16
 8006f30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d006      	beq.n	8006f46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f40:	711a      	strb	r2, [r3, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d006      	beq.n	8006f5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f54:	711a      	strb	r2, [r3, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2243      	movs	r2, #67	@ 0x43
 8006f5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f60:	4b02      	ldr	r3, [pc, #8]	@ (8006f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2000006c 	.word	0x2000006c

08006f70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f78:	2182      	movs	r1, #130	@ 0x82
 8006f7a:	4818      	ldr	r0, [pc, #96]	@ (8006fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f7c:	f000 fd17 	bl	80079ae <USBD_GetEpDesc>
 8006f80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f82:	2101      	movs	r1, #1
 8006f84:	4815      	ldr	r0, [pc, #84]	@ (8006fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f86:	f000 fd12 	bl	80079ae <USBD_GetEpDesc>
 8006f8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f8c:	2181      	movs	r1, #129	@ 0x81
 8006f8e:	4813      	ldr	r0, [pc, #76]	@ (8006fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f90:	f000 fd0d 	bl	80079ae <USBD_GetEpDesc>
 8006f94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d006      	beq.n	8006fb6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2200      	movs	r2, #0
 8006fac:	711a      	strb	r2, [r3, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f042 0202 	orr.w	r2, r2, #2
 8006fb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	711a      	strb	r2, [r3, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f042 0202 	orr.w	r2, r2, #2
 8006fc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2243      	movs	r2, #67	@ 0x43
 8006fce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fd0:	4b02      	ldr	r3, [pc, #8]	@ (8006fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2000006c 	.word	0x2000006c

08006fe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fe8:	2182      	movs	r1, #130	@ 0x82
 8006fea:	4818      	ldr	r0, [pc, #96]	@ (800704c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fec:	f000 fcdf 	bl	80079ae <USBD_GetEpDesc>
 8006ff0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4815      	ldr	r0, [pc, #84]	@ (800704c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ff6:	f000 fcda 	bl	80079ae <USBD_GetEpDesc>
 8006ffa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ffc:	2181      	movs	r1, #129	@ 0x81
 8006ffe:	4813      	ldr	r0, [pc, #76]	@ (800704c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007000:	f000 fcd5 	bl	80079ae <USBD_GetEpDesc>
 8007004:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2210      	movs	r2, #16
 8007010:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d006      	beq.n	8007026 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2200      	movs	r2, #0
 800701c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007020:	711a      	strb	r2, [r3, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d006      	beq.n	800703a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007034:	711a      	strb	r2, [r3, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2243      	movs	r2, #67	@ 0x43
 800703e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007040:	4b02      	ldr	r3, [pc, #8]	@ (800704c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	2000006c 	.word	0x2000006c

08007050 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	220a      	movs	r2, #10
 800705c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800705e:	4b03      	ldr	r3, [pc, #12]	@ (800706c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	20000028 	.word	0x20000028

08007070 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e009      	b.n	8007098 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	33b0      	adds	r3, #176	@ 0xb0
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	32b0      	adds	r2, #176	@ 0xb0
 80070ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e008      	b.n	80070dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	32b0      	adds	r2, #176	@ 0xb0
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007108:	2303      	movs	r3, #3
 800710a:	e004      	b.n	8007116 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	32b0      	adds	r2, #176	@ 0xb0
 8007136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007146:	2303      	movs	r3, #3
 8007148:	e025      	b.n	8007196 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007150:	2b00      	cmp	r3, #0
 8007152:	d11f      	bne.n	8007194 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2201      	movs	r2, #1
 8007158:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800715c:	4b10      	ldr	r3, [pc, #64]	@ (80071a0 <USBD_CDC_TransmitPacket+0x7c>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4403      	add	r3, r0
 8007176:	3318      	adds	r3, #24
 8007178:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800717a:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <USBD_CDC_TransmitPacket+0x7c>)
 800717c:	7819      	ldrb	r1, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 ffb9 	bl	8009102 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	200000af 	.word	0x200000af

080071a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	32b0      	adds	r2, #176	@ 0xb0
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	32b0      	adds	r2, #176	@ 0xb0
 80071c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e018      	b.n	8007204 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7c1b      	ldrb	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071da:	4b0c      	ldr	r3, [pc, #48]	@ (800720c <USBD_CDC_ReceivePacket+0x68>)
 80071dc:	7819      	ldrb	r1, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 ffab 	bl	8009144 <USBD_LL_PrepareReceive>
 80071ee:	e008      	b.n	8007202 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071f0:	4b06      	ldr	r3, [pc, #24]	@ (800720c <USBD_CDC_ReceivePacket+0x68>)
 80071f2:	7819      	ldrb	r1, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071fa:	2340      	movs	r3, #64	@ 0x40
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 ffa1 	bl	8009144 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200000b0 	.word	0x200000b0

08007210 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007224:	2303      	movs	r3, #3
 8007226:	e01f      	b.n	8007268 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	79fa      	ldrb	r2, [r7, #7]
 800725a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f001 fe1b 	bl	8008e98 <USBD_LL_Init>
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007284:	2303      	movs	r3, #3
 8007286:	e025      	b.n	80072d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	32ae      	adds	r2, #174	@ 0xae
 800729a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00f      	beq.n	80072c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32ae      	adds	r2, #174	@ 0xae
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b4:	f107 020e 	add.w	r2, r7, #14
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	4602      	mov	r2, r0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fe23 	bl	8008f30 <USBD_LL_Start>
 80072ea:	4603      	mov	r3, r0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	4611      	mov	r1, r2
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	4611      	mov	r1, r2
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f001 f90c 	bl	80085a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800739c:	461a      	mov	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073aa:	f003 031f 	and.w	r3, r3, #31
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d01a      	beq.n	80073e8 <USBD_LL_SetupStage+0x72>
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d822      	bhi.n	80073fc <USBD_LL_SetupStage+0x86>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <USBD_LL_SetupStage+0x4a>
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d00a      	beq.n	80073d4 <USBD_LL_SetupStage+0x5e>
 80073be:	e01d      	b.n	80073fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fb63 	bl	8007a94 <USBD_StdDevReq>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
      break;
 80073d2:	e020      	b.n	8007416 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fbcb 	bl	8007b78 <USBD_StdItfReq>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
      break;
 80073e6:	e016      	b.n	8007416 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fc2d 	bl	8007c50 <USBD_StdEPReq>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
      break;
 80073fa:	e00c      	b.n	8007416 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007402:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007406:	b2db      	uxtb	r3, r3
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fdf0 	bl	8008ff0 <USBD_LL_StallEP>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
      break;
 8007414:	bf00      	nop
  }

  return ret;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	460b      	mov	r3, r1
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d16e      	bne.n	8007516 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800743e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007446:	2b03      	cmp	r3, #3
 8007448:	f040 8098 	bne.w	800757c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	429a      	cmp	r2, r3
 8007456:	d913      	bls.n	8007480 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	1ad2      	subs	r2, r2, r3
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	4293      	cmp	r3, r2
 8007470:	bf28      	it	cs
 8007472:	4613      	movcs	r3, r2
 8007474:	461a      	mov	r2, r3
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f001 f994 	bl	80087a6 <USBD_CtlContinueRx>
 800747e:	e07d      	b.n	800757c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2b02      	cmp	r3, #2
 800748c:	d014      	beq.n	80074b8 <USBD_LL_DataOutStage+0x98>
 800748e:	2b02      	cmp	r3, #2
 8007490:	d81d      	bhi.n	80074ce <USBD_LL_DataOutStage+0xae>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <USBD_LL_DataOutStage+0x7c>
 8007496:	2b01      	cmp	r3, #1
 8007498:	d003      	beq.n	80074a2 <USBD_LL_DataOutStage+0x82>
 800749a:	e018      	b.n	80074ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	75bb      	strb	r3, [r7, #22]
            break;
 80074a0:	e018      	b.n	80074d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fa64 	bl	800797a <USBD_CoreFindIF>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75bb      	strb	r3, [r7, #22]
            break;
 80074b6:	e00d      	b.n	80074d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4619      	mov	r1, r3
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fa66 	bl	8007994 <USBD_CoreFindEP>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75bb      	strb	r3, [r7, #22]
            break;
 80074cc:	e002      	b.n	80074d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75bb      	strb	r3, [r7, #22]
            break;
 80074d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80074d4:	7dbb      	ldrb	r3, [r7, #22]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d119      	bne.n	800750e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d113      	bne.n	800750e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80074e6:	7dba      	ldrb	r2, [r7, #22]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	32ae      	adds	r2, #174	@ 0xae
 80074ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80074f6:	7dba      	ldrb	r2, [r7, #22]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074fe:	7dba      	ldrb	r2, [r7, #22]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	32ae      	adds	r2, #174	@ 0xae
 8007504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f001 f95a 	bl	80087c8 <USBD_CtlSendStatus>
 8007514:	e032      	b.n	800757c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007516:	7afb      	ldrb	r3, [r7, #11]
 8007518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800751c:	b2db      	uxtb	r3, r3
 800751e:	4619      	mov	r1, r3
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fa37 	bl	8007994 <USBD_CoreFindEP>
 8007526:	4603      	mov	r3, r0
 8007528:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800752a:	7dbb      	ldrb	r3, [r7, #22]
 800752c:	2bff      	cmp	r3, #255	@ 0xff
 800752e:	d025      	beq.n	800757c <USBD_LL_DataOutStage+0x15c>
 8007530:	7dbb      	ldrb	r3, [r7, #22]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d122      	bne.n	800757c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b03      	cmp	r3, #3
 8007540:	d117      	bne.n	8007572 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007542:	7dba      	ldrb	r2, [r7, #22]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	32ae      	adds	r2, #174	@ 0xae
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00f      	beq.n	8007572 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007552:	7dba      	ldrb	r2, [r7, #22]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800755a:	7dba      	ldrb	r2, [r7, #22]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	32ae      	adds	r2, #174	@ 0xae
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	7afa      	ldrb	r2, [r7, #11]
 8007568:	4611      	mov	r1, r2
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	e000      	b.n	800757e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	460b      	mov	r3, r1
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d16f      	bne.n	800767a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3314      	adds	r3, #20
 800759e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d15a      	bne.n	8007660 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d914      	bls.n	80075e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f001 f8bc 	bl	800874a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d2:	2300      	movs	r3, #0
 80075d4:	2200      	movs	r2, #0
 80075d6:	2100      	movs	r1, #0
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f001 fdb3 	bl	8009144 <USBD_LL_PrepareReceive>
 80075de:	e03f      	b.n	8007660 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d11c      	bne.n	8007626 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d316      	bcc.n	8007626 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007602:	429a      	cmp	r2, r3
 8007604:	d20f      	bcs.n	8007626 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f001 f89d 	bl	800874a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007618:	2300      	movs	r3, #0
 800761a:	2200      	movs	r2, #0
 800761c:	2100      	movs	r1, #0
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f001 fd90 	bl	8009144 <USBD_LL_PrepareReceive>
 8007624:	e01c      	b.n	8007660 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b03      	cmp	r3, #3
 8007630:	d10f      	bne.n	8007652 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007652:	2180      	movs	r1, #128	@ 0x80
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f001 fccb 	bl	8008ff0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f001 f8c7 	bl	80087ee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d03a      	beq.n	80076e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff fe42 	bl	80072f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007678:	e032      	b.n	80076e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800767a:	7afb      	ldrb	r3, [r7, #11]
 800767c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007680:	b2db      	uxtb	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f985 	bl	8007994 <USBD_CoreFindEP>
 800768a:	4603      	mov	r3, r0
 800768c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	2bff      	cmp	r3, #255	@ 0xff
 8007692:	d025      	beq.n	80076e0 <USBD_LL_DataInStage+0x15a>
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d122      	bne.n	80076e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d11c      	bne.n	80076e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076a6:	7dfa      	ldrb	r2, [r7, #23]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	32ae      	adds	r2, #174	@ 0xae
 80076ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d014      	beq.n	80076e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80076b6:	7dfa      	ldrb	r2, [r7, #23]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80076be:	7dfa      	ldrb	r2, [r7, #23]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	32ae      	adds	r2, #174	@ 0xae
 80076c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	7afa      	ldrb	r2, [r7, #11]
 80076cc:	4611      	mov	r1, r2
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	4798      	blx	r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80076d6:	7dbb      	ldrb	r3, [r7, #22]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
 80076de:	e000      	b.n	80076e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d014      	beq.n	8007750 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00e      	beq.n	8007750 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6852      	ldr	r2, [r2, #4]
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	4611      	mov	r1, r2
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800774c:	2303      	movs	r3, #3
 800774e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007750:	2340      	movs	r3, #64	@ 0x40
 8007752:	2200      	movs	r2, #0
 8007754:	2100      	movs	r1, #0
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fc05 	bl	8008f66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2240      	movs	r2, #64	@ 0x40
 8007768:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800776c:	2340      	movs	r3, #64	@ 0x40
 800776e:	2200      	movs	r2, #0
 8007770:	2180      	movs	r1, #128	@ 0x80
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fbf7 	bl	8008f66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2240      	movs	r2, #64	@ 0x40
 8007782:	621a      	str	r2, [r3, #32]

  return ret;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	78fa      	ldrb	r2, [r7, #3]
 800779e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d006      	beq.n	80077d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2204      	movs	r2, #4
 80077d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d106      	bne.n	8007808 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007800:	b2da      	uxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b03      	cmp	r3, #3
 8007828:	d110      	bne.n	800784c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	32ae      	adds	r2, #174	@ 0xae
 800786c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007874:	2303      	movs	r3, #3
 8007876:	e01c      	b.n	80078b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b03      	cmp	r3, #3
 8007882:	d115      	bne.n	80078b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	32ae      	adds	r2, #174	@ 0xae
 800788e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	32ae      	adds	r2, #174	@ 0xae
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	4611      	mov	r1, r2
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	32ae      	adds	r2, #174	@ 0xae
 80078d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	e01c      	b.n	8007916 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d115      	bne.n	8007914 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	@ 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32ae      	adds	r2, #174	@ 0xae
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	4611      	mov	r1, r2
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00e      	beq.n	8007970 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6852      	ldr	r2, [r2, #4]
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	4611      	mov	r1, r2
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007986:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d91f      	bls.n	8007a14 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80079da:	e013      	b.n	8007a04 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80079dc:	f107 030a 	add.w	r3, r7, #10
 80079e0:	4619      	mov	r1, r3
 80079e2:	6978      	ldr	r0, [r7, #20]
 80079e4:	f000 f81b 	bl	8007a1e <USBD_GetNextDesc>
 80079e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d108      	bne.n	8007a04 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	789b      	ldrb	r3, [r3, #2]
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d008      	beq.n	8007a12 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	885b      	ldrh	r3, [r3, #2]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	897b      	ldrh	r3, [r7, #10]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d8e5      	bhi.n	80079dc <USBD_GetEpDesc+0x2e>
 8007a10:	e000      	b.n	8007a14 <USBD_GetEpDesc+0x66>
          break;
 8007a12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a14:	693b      	ldr	r3, [r7, #16]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4413      	add	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a48:	68fb      	ldr	r3, [r7, #12]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b087      	sub	sp, #28
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a74:	8a3b      	ldrh	r3, [r7, #16]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	b21a      	sxth	r2, r3
 8007a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	b21b      	sxth	r3, r3
 8007a82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a84:	89fb      	ldrh	r3, [r7, #14]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aaa:	2b40      	cmp	r3, #64	@ 0x40
 8007aac:	d005      	beq.n	8007aba <USBD_StdDevReq+0x26>
 8007aae:	2b40      	cmp	r3, #64	@ 0x40
 8007ab0:	d857      	bhi.n	8007b62 <USBD_StdDevReq+0xce>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00f      	beq.n	8007ad6 <USBD_StdDevReq+0x42>
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d153      	bne.n	8007b62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	32ae      	adds	r2, #174	@ 0xae
 8007ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	e04a      	b.n	8007b6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b09      	cmp	r3, #9
 8007adc:	d83b      	bhi.n	8007b56 <USBD_StdDevReq+0xc2>
 8007ade:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <USBD_StdDevReq+0x50>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007b4d 	.word	0x08007b4d
 8007aec:	08007b57 	.word	0x08007b57
 8007af0:	08007b43 	.word	0x08007b43
 8007af4:	08007b57 	.word	0x08007b57
 8007af8:	08007b17 	.word	0x08007b17
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b57 	.word	0x08007b57
 8007b04:	08007b2f 	.word	0x08007b2f
 8007b08:	08007b21 	.word	0x08007b21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fa3c 	bl	8007f8c <USBD_GetDescriptor>
          break;
 8007b14:	e024      	b.n	8007b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fba1 	bl	8008260 <USBD_SetAddress>
          break;
 8007b1e:	e01f      	b.n	8007b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fbe0 	bl	80082e8 <USBD_SetConfig>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b2c:	e018      	b.n	8007b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fc83 	bl	800843c <USBD_GetConfig>
          break;
 8007b36:	e013      	b.n	8007b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fcb4 	bl	80084a8 <USBD_GetStatus>
          break;
 8007b40:	e00e      	b.n	8007b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fce3 	bl	8008510 <USBD_SetFeature>
          break;
 8007b4a:	e009      	b.n	8007b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fd07 	bl	8008562 <USBD_ClrFeature>
          break;
 8007b54:	e004      	b.n	8007b60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fd5e 	bl	800861a <USBD_CtlError>
          break;
 8007b5e:	bf00      	nop
      }
      break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fd58 	bl	800861a <USBD_CtlError>
      break;
 8007b6a:	bf00      	nop
  }

  return ret;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop

08007b78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b8e:	2b40      	cmp	r3, #64	@ 0x40
 8007b90:	d005      	beq.n	8007b9e <USBD_StdItfReq+0x26>
 8007b92:	2b40      	cmp	r3, #64	@ 0x40
 8007b94:	d852      	bhi.n	8007c3c <USBD_StdItfReq+0xc4>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <USBD_StdItfReq+0x26>
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d14e      	bne.n	8007c3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d840      	bhi.n	8007c2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	889b      	ldrh	r3, [r3, #4]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d836      	bhi.n	8007c24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	889b      	ldrh	r3, [r3, #4]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fedb 	bl	800797a <USBD_CoreFindIF>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2bff      	cmp	r3, #255	@ 0xff
 8007bcc:	d01d      	beq.n	8007c0a <USBD_StdItfReq+0x92>
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11a      	bne.n	8007c0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007bd4:	7bba      	ldrb	r2, [r7, #14]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	32ae      	adds	r2, #174	@ 0xae
 8007bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00f      	beq.n	8007c04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007be4:	7bba      	ldrb	r2, [r7, #14]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bec:	7bba      	ldrb	r2, [r7, #14]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	32ae      	adds	r2, #174	@ 0xae
 8007bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c02:	e004      	b.n	8007c0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c08:	e001      	b.n	8007c0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	88db      	ldrh	r3, [r3, #6]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d110      	bne.n	8007c38 <USBD_StdItfReq+0xc0>
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10d      	bne.n	8007c38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fdd3 	bl	80087c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c22:	e009      	b.n	8007c38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fcf7 	bl	800861a <USBD_CtlError>
          break;
 8007c2c:	e004      	b.n	8007c38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fcf2 	bl	800861a <USBD_CtlError>
          break;
 8007c36:	e000      	b.n	8007c3a <USBD_StdItfReq+0xc2>
          break;
 8007c38:	bf00      	nop
      }
      break;
 8007c3a:	e004      	b.n	8007c46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fceb 	bl	800861a <USBD_CtlError>
      break;
 8007c44:	bf00      	nop
  }

  return ret;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	889b      	ldrh	r3, [r3, #4]
 8007c62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c6c:	2b40      	cmp	r3, #64	@ 0x40
 8007c6e:	d007      	beq.n	8007c80 <USBD_StdEPReq+0x30>
 8007c70:	2b40      	cmp	r3, #64	@ 0x40
 8007c72:	f200 817f 	bhi.w	8007f74 <USBD_StdEPReq+0x324>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d02a      	beq.n	8007cd0 <USBD_StdEPReq+0x80>
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	f040 817a 	bne.w	8007f74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fe85 	bl	8007994 <USBD_CoreFindEP>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c8e:	7b7b      	ldrb	r3, [r7, #13]
 8007c90:	2bff      	cmp	r3, #255	@ 0xff
 8007c92:	f000 8174 	beq.w	8007f7e <USBD_StdEPReq+0x32e>
 8007c96:	7b7b      	ldrb	r3, [r7, #13]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f040 8170 	bne.w	8007f7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c9e:	7b7a      	ldrb	r2, [r7, #13]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ca6:	7b7a      	ldrb	r2, [r7, #13]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	32ae      	adds	r2, #174	@ 0xae
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 8163 	beq.w	8007f7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007cb8:	7b7a      	ldrb	r2, [r7, #13]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	32ae      	adds	r2, #174	@ 0xae
 8007cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cce:	e156      	b.n	8007f7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d008      	beq.n	8007cea <USBD_StdEPReq+0x9a>
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	f300 8145 	bgt.w	8007f68 <USBD_StdEPReq+0x318>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 809b 	beq.w	8007e1a <USBD_StdEPReq+0x1ca>
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d03c      	beq.n	8007d62 <USBD_StdEPReq+0x112>
 8007ce8:	e13e      	b.n	8007f68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d002      	beq.n	8007cfc <USBD_StdEPReq+0xac>
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d016      	beq.n	8007d28 <USBD_StdEPReq+0xd8>
 8007cfa:	e02c      	b.n	8007d56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00d      	beq.n	8007d1e <USBD_StdEPReq+0xce>
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b80      	cmp	r3, #128	@ 0x80
 8007d06:	d00a      	beq.n	8007d1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 f96f 	bl	8008ff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d12:	2180      	movs	r1, #128	@ 0x80
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 f96b 	bl	8008ff0 <USBD_LL_StallEP>
 8007d1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d1c:	e020      	b.n	8007d60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fc7a 	bl	800861a <USBD_CtlError>
              break;
 8007d26:	e01b      	b.n	8007d60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	885b      	ldrh	r3, [r3, #2]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10e      	bne.n	8007d4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <USBD_StdEPReq+0xfe>
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b80      	cmp	r3, #128	@ 0x80
 8007d3a:	d008      	beq.n	8007d4e <USBD_StdEPReq+0xfe>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	88db      	ldrh	r3, [r3, #6]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d104      	bne.n	8007d4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 f951 	bl	8008ff0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fd3a 	bl	80087c8 <USBD_CtlSendStatus>

              break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fc5e 	bl	800861a <USBD_CtlError>
              break;
 8007d5e:	bf00      	nop
          }
          break;
 8007d60:	e107      	b.n	8007f72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d002      	beq.n	8007d74 <USBD_StdEPReq+0x124>
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d016      	beq.n	8007da0 <USBD_StdEPReq+0x150>
 8007d72:	e04b      	b.n	8007e0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00d      	beq.n	8007d96 <USBD_StdEPReq+0x146>
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b80      	cmp	r3, #128	@ 0x80
 8007d7e:	d00a      	beq.n	8007d96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f933 	bl	8008ff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d8a:	2180      	movs	r1, #128	@ 0x80
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f92f 	bl	8008ff0 <USBD_LL_StallEP>
 8007d92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d94:	e040      	b.n	8007e18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fc3e 	bl	800861a <USBD_CtlError>
              break;
 8007d9e:	e03b      	b.n	8007e18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d136      	bne.n	8007e16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d004      	beq.n	8007dbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 f939 	bl	800902e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fd03 	bl	80087c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff fde4 	bl	8007994 <USBD_CoreFindEP>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dd0:	7b7b      	ldrb	r3, [r7, #13]
 8007dd2:	2bff      	cmp	r3, #255	@ 0xff
 8007dd4:	d01f      	beq.n	8007e16 <USBD_StdEPReq+0x1c6>
 8007dd6:	7b7b      	ldrb	r3, [r7, #13]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d11c      	bne.n	8007e16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ddc:	7b7a      	ldrb	r2, [r7, #13]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007de4:	7b7a      	ldrb	r2, [r7, #13]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	32ae      	adds	r2, #174	@ 0xae
 8007dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d010      	beq.n	8007e16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007df4:	7b7a      	ldrb	r2, [r7, #13]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	32ae      	adds	r2, #174	@ 0xae
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
 8007e06:	4603      	mov	r3, r0
 8007e08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e0a:	e004      	b.n	8007e16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fc03 	bl	800861a <USBD_CtlError>
              break;
 8007e14:	e000      	b.n	8007e18 <USBD_StdEPReq+0x1c8>
              break;
 8007e16:	bf00      	nop
          }
          break;
 8007e18:	e0ab      	b.n	8007f72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d002      	beq.n	8007e2c <USBD_StdEPReq+0x1dc>
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d032      	beq.n	8007e90 <USBD_StdEPReq+0x240>
 8007e2a:	e097      	b.n	8007f5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d007      	beq.n	8007e42 <USBD_StdEPReq+0x1f2>
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b80      	cmp	r3, #128	@ 0x80
 8007e36:	d004      	beq.n	8007e42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fbed 	bl	800861a <USBD_CtlError>
                break;
 8007e40:	e091      	b.n	8007f66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	da0b      	bge.n	8007e62 <USBD_StdEPReq+0x212>
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	3310      	adds	r3, #16
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3304      	adds	r3, #4
 8007e60:	e00b      	b.n	8007e7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	4413      	add	r3, r2
 8007e78:	3304      	adds	r3, #4
 8007e7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2202      	movs	r2, #2
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fc43 	bl	8008714 <USBD_CtlSendData>
              break;
 8007e8e:	e06a      	b.n	8007f66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	da11      	bge.n	8007ebc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	f003 020f 	and.w	r2, r3, #15
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	3324      	adds	r3, #36	@ 0x24
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d117      	bne.n	8007ee2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fbb0 	bl	800861a <USBD_CtlError>
                  break;
 8007eba:	e054      	b.n	8007f66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	f003 020f 	and.w	r2, r3, #15
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	440b      	add	r3, r1
 8007ece:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fb9d 	bl	800861a <USBD_CtlError>
                  break;
 8007ee0:	e041      	b.n	8007f66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	da0b      	bge.n	8007f02 <USBD_StdEPReq+0x2b2>
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	3310      	adds	r3, #16
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4413      	add	r3, r2
 8007efe:	3304      	adds	r3, #4
 8007f00:	e00b      	b.n	8007f1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <USBD_StdEPReq+0x2d8>
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b80      	cmp	r3, #128	@ 0x80
 8007f26:	d103      	bne.n	8007f30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e00e      	b.n	8007f4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 f899 	bl	800906c <USBD_LL_IsStallEP>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2201      	movs	r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e002      	b.n	8007f4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2202      	movs	r2, #2
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fbdd 	bl	8008714 <USBD_CtlSendData>
              break;
 8007f5a:	e004      	b.n	8007f66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fb5b 	bl	800861a <USBD_CtlError>
              break;
 8007f64:	bf00      	nop
          }
          break;
 8007f66:	e004      	b.n	8007f72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fb55 	bl	800861a <USBD_CtlError>
          break;
 8007f70:	bf00      	nop
      }
      break;
 8007f72:	e005      	b.n	8007f80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fb4f 	bl	800861a <USBD_CtlError>
      break;
 8007f7c:	e000      	b.n	8007f80 <USBD_StdEPReq+0x330>
      break;
 8007f7e:	bf00      	nop
  }

  return ret;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	885b      	ldrh	r3, [r3, #2]
 8007fa6:	0a1b      	lsrs	r3, r3, #8
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	2b06      	cmp	r3, #6
 8007fae:	f200 8128 	bhi.w	8008202 <USBD_GetDescriptor+0x276>
 8007fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb8 <USBD_GetDescriptor+0x2c>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08007fd5 	.word	0x08007fd5
 8007fbc:	08007fed 	.word	0x08007fed
 8007fc0:	0800802d 	.word	0x0800802d
 8007fc4:	08008203 	.word	0x08008203
 8007fc8:	08008203 	.word	0x08008203
 8007fcc:	080081a3 	.word	0x080081a3
 8007fd0:	080081cf 	.word	0x080081cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	7c12      	ldrb	r2, [r2, #16]
 8007fe0:	f107 0108 	add.w	r1, r7, #8
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4798      	blx	r3
 8007fe8:	60f8      	str	r0, [r7, #12]
      break;
 8007fea:	e112      	b.n	8008212 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7c1b      	ldrb	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10d      	bne.n	8008010 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffc:	f107 0208 	add.w	r2, r7, #8
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	2202      	movs	r2, #2
 800800c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800800e:	e100      	b.n	8008212 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	f107 0208 	add.w	r2, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3301      	adds	r3, #1
 8008026:	2202      	movs	r2, #2
 8008028:	701a      	strb	r2, [r3, #0]
      break;
 800802a:	e0f2      	b.n	8008212 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	885b      	ldrh	r3, [r3, #2]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b05      	cmp	r3, #5
 8008034:	f200 80ac 	bhi.w	8008190 <USBD_GetDescriptor+0x204>
 8008038:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <USBD_GetDescriptor+0xb4>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008059 	.word	0x08008059
 8008044:	0800808d 	.word	0x0800808d
 8008048:	080080c1 	.word	0x080080c1
 800804c:	080080f5 	.word	0x080080f5
 8008050:	08008129 	.word	0x08008129
 8008054:	0800815d 	.word	0x0800815d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	7c12      	ldrb	r2, [r2, #16]
 8008070:	f107 0108 	add.w	r1, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807a:	e091      	b.n	80081a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 facb 	bl	800861a <USBD_CtlError>
            err++;
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	3301      	adds	r3, #1
 8008088:	72fb      	strb	r3, [r7, #11]
          break;
 800808a:	e089      	b.n	80081a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ae:	e077      	b.n	80081a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fab1 	bl	800861a <USBD_CtlError>
            err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
          break;
 80080be:	e06f      	b.n	80081a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080e2:	e05d      	b.n	80081a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa97 	bl	800861a <USBD_CtlError>
            err++;
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	3301      	adds	r3, #1
 80080f0:	72fb      	strb	r3, [r7, #11]
          break;
 80080f2:	e055      	b.n	80081a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7c12      	ldrb	r2, [r2, #16]
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008116:	e043      	b.n	80081a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa7d 	bl	800861a <USBD_CtlError>
            err++;
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	3301      	adds	r3, #1
 8008124:	72fb      	strb	r3, [r7, #11]
          break;
 8008126:	e03b      	b.n	80081a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800814a:	e029      	b.n	80081a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa63 	bl	800861a <USBD_CtlError>
            err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
          break;
 800815a:	e021      	b.n	80081a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	7c12      	ldrb	r2, [r2, #16]
 8008174:	f107 0108 	add.w	r1, r7, #8
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817e:	e00f      	b.n	80081a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa49 	bl	800861a <USBD_CtlError>
            err++;
 8008188:	7afb      	ldrb	r3, [r7, #11]
 800818a:	3301      	adds	r3, #1
 800818c:	72fb      	strb	r3, [r7, #11]
          break;
 800818e:	e007      	b.n	80081a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa41 	bl	800861a <USBD_CtlError>
          err++;
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	3301      	adds	r3, #1
 800819c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800819e:	bf00      	nop
      }
      break;
 80081a0:	e037      	b.n	8008212 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	7c1b      	ldrb	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b2:	f107 0208 	add.w	r2, r7, #8
 80081b6:	4610      	mov	r0, r2
 80081b8:	4798      	blx	r3
 80081ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081bc:	e029      	b.n	8008212 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fa2a 	bl	800861a <USBD_CtlError>
        err++;
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	3301      	adds	r3, #1
 80081ca:	72fb      	strb	r3, [r7, #11]
      break;
 80081cc:	e021      	b.n	8008212 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7c1b      	ldrb	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10d      	bne.n	80081f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081de:	f107 0208 	add.w	r2, r7, #8
 80081e2:	4610      	mov	r0, r2
 80081e4:	4798      	blx	r3
 80081e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	2207      	movs	r2, #7
 80081ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081f0:	e00f      	b.n	8008212 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fa10 	bl	800861a <USBD_CtlError>
        err++;
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	3301      	adds	r3, #1
 80081fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008200:	e007      	b.n	8008212 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fa08 	bl	800861a <USBD_CtlError>
      err++;
 800820a:	7afb      	ldrb	r3, [r7, #11]
 800820c:	3301      	adds	r3, #1
 800820e:	72fb      	strb	r3, [r7, #11]
      break;
 8008210:	bf00      	nop
  }

  if (err != 0U)
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d11e      	bne.n	8008256 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	88db      	ldrh	r3, [r3, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d016      	beq.n	800824e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008220:	893b      	ldrh	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00e      	beq.n	8008244 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	88da      	ldrh	r2, [r3, #6]
 800822a:	893b      	ldrh	r3, [r7, #8]
 800822c:	4293      	cmp	r3, r2
 800822e:	bf28      	it	cs
 8008230:	4613      	movcs	r3, r2
 8008232:	b29b      	uxth	r3, r3
 8008234:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008236:	893b      	ldrh	r3, [r7, #8]
 8008238:	461a      	mov	r2, r3
 800823a:	68f9      	ldr	r1, [r7, #12]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa69 	bl	8008714 <USBD_CtlSendData>
 8008242:	e009      	b.n	8008258 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f9e7 	bl	800861a <USBD_CtlError>
 800824c:	e004      	b.n	8008258 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 faba 	bl	80087c8 <USBD_CtlSendStatus>
 8008254:	e000      	b.n	8008258 <USBD_GetDescriptor+0x2cc>
    return;
 8008256:	bf00      	nop
  }
}
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop

08008260 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	889b      	ldrh	r3, [r3, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d131      	bne.n	80082d6 <USBD_SetAddress+0x76>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	88db      	ldrh	r3, [r3, #6]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d12d      	bne.n	80082d6 <USBD_SetAddress+0x76>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008280:	d829      	bhi.n	80082d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	885b      	ldrh	r3, [r3, #2]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800828c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b03      	cmp	r3, #3
 8008298:	d104      	bne.n	80082a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f9bc 	bl	800861a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a2:	e01d      	b.n	80082e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7bfa      	ldrb	r2, [r7, #15]
 80082a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 ff07 	bl	80090c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa86 	bl	80087c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ca:	e009      	b.n	80082e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d4:	e004      	b.n	80082e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f99e 	bl	800861a <USBD_CtlError>
  }
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	885b      	ldrh	r3, [r3, #2]
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	4b4e      	ldr	r3, [pc, #312]	@ (8008438 <USBD_SetConfig+0x150>)
 80082fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008300:	4b4d      	ldr	r3, [pc, #308]	@ (8008438 <USBD_SetConfig+0x150>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d905      	bls.n	8008314 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f985 	bl	800861a <USBD_CtlError>
    return USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	e08c      	b.n	800842e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d002      	beq.n	8008326 <USBD_SetConfig+0x3e>
 8008320:	2b03      	cmp	r3, #3
 8008322:	d029      	beq.n	8008378 <USBD_SetConfig+0x90>
 8008324:	e075      	b.n	8008412 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008326:	4b44      	ldr	r3, [pc, #272]	@ (8008438 <USBD_SetConfig+0x150>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d020      	beq.n	8008370 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800832e:	4b42      	ldr	r3, [pc, #264]	@ (8008438 <USBD_SetConfig+0x150>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008338:	4b3f      	ldr	r3, [pc, #252]	@ (8008438 <USBD_SetConfig+0x150>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7fe ffe3 	bl	800730a <USBD_SetClassConfig>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d008      	beq.n	8008360 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f962 	bl	800861a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2202      	movs	r2, #2
 800835a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800835e:	e065      	b.n	800842c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fa31 	bl	80087c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2203      	movs	r2, #3
 800836a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800836e:	e05d      	b.n	800842c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fa29 	bl	80087c8 <USBD_CtlSendStatus>
      break;
 8008376:	e059      	b.n	800842c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008378:	4b2f      	ldr	r3, [pc, #188]	@ (8008438 <USBD_SetConfig+0x150>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d112      	bne.n	80083a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008388:	4b2b      	ldr	r3, [pc, #172]	@ (8008438 <USBD_SetConfig+0x150>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008392:	4b29      	ldr	r3, [pc, #164]	@ (8008438 <USBD_SetConfig+0x150>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7fe ffd2 	bl	8007342 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa12 	bl	80087c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083a4:	e042      	b.n	800842c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083a6:	4b24      	ldr	r3, [pc, #144]	@ (8008438 <USBD_SetConfig+0x150>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d02a      	beq.n	800840a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7fe ffc0 	bl	8007342 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <USBD_SetConfig+0x150>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <USBD_SetConfig+0x150>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fe ff99 	bl	800730a <USBD_SetClassConfig>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00f      	beq.n	8008402 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f918 	bl	800861a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7fe ffa5 	bl	8007342 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008400:	e014      	b.n	800842c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f9e0 	bl	80087c8 <USBD_CtlSendStatus>
      break;
 8008408:	e010      	b.n	800842c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f9dc 	bl	80087c8 <USBD_CtlSendStatus>
      break;
 8008410:	e00c      	b.n	800842c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f900 	bl	800861a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800841a:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <USBD_SetConfig+0x150>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fe ff8e 	bl	8007342 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008426:	2303      	movs	r3, #3
 8008428:	73fb      	strb	r3, [r7, #15]
      break;
 800842a:	bf00      	nop
  }

  return ret;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200002ac 	.word	0x200002ac

0800843c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d004      	beq.n	8008458 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f8e2 	bl	800861a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008456:	e023      	b.n	80084a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	dc02      	bgt.n	800846a <USBD_GetConfig+0x2e>
 8008464:	2b00      	cmp	r3, #0
 8008466:	dc03      	bgt.n	8008470 <USBD_GetConfig+0x34>
 8008468:	e015      	b.n	8008496 <USBD_GetConfig+0x5a>
 800846a:	2b03      	cmp	r3, #3
 800846c:	d00b      	beq.n	8008486 <USBD_GetConfig+0x4a>
 800846e:	e012      	b.n	8008496 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3308      	adds	r3, #8
 800847a:	2201      	movs	r2, #1
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f948 	bl	8008714 <USBD_CtlSendData>
        break;
 8008484:	e00c      	b.n	80084a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3304      	adds	r3, #4
 800848a:	2201      	movs	r2, #1
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f940 	bl	8008714 <USBD_CtlSendData>
        break;
 8008494:	e004      	b.n	80084a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f8be 	bl	800861a <USBD_CtlError>
        break;
 800849e:	bf00      	nop
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d81e      	bhi.n	80084fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	88db      	ldrh	r3, [r3, #6]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d004      	beq.n	80084d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f8a5 	bl	800861a <USBD_CtlError>
        break;
 80084d0:	e01a      	b.n	8008508 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	f043 0202 	orr.w	r2, r3, #2
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	330c      	adds	r3, #12
 80084f2:	2202      	movs	r2, #2
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f90c 	bl	8008714 <USBD_CtlSendData>
      break;
 80084fc:	e004      	b.n	8008508 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f88a 	bl	800861a <USBD_CtlError>
      break;
 8008506:	bf00      	nop
  }
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d107      	bne.n	8008532 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f94c 	bl	80087c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008530:	e013      	b.n	800855a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	2b02      	cmp	r3, #2
 8008538:	d10b      	bne.n	8008552 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	889b      	ldrh	r3, [r3, #4]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	b2da      	uxtb	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f93c 	bl	80087c8 <USBD_CtlSendStatus>
}
 8008550:	e003      	b.n	800855a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f860 	bl	800861a <USBD_CtlError>
}
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008572:	b2db      	uxtb	r3, r3
 8008574:	3b01      	subs	r3, #1
 8008576:	2b02      	cmp	r3, #2
 8008578:	d80b      	bhi.n	8008592 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	885b      	ldrh	r3, [r3, #2]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d10c      	bne.n	800859c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f91c 	bl	80087c8 <USBD_CtlSendStatus>
      }
      break;
 8008590:	e004      	b.n	800859c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f840 	bl	800861a <USBD_CtlError>
      break;
 800859a:	e000      	b.n	800859e <USBD_ClrFeature+0x3c>
      break;
 800859c:	bf00      	nop
  }
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	781a      	ldrb	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fa40 	bl	8007a56 <SWAPBYTE>
 80085d6:	4603      	mov	r3, r0
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3301      	adds	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fa33 	bl	8007a56 <SWAPBYTE>
 80085f0:	4603      	mov	r3, r0
 80085f2:	461a      	mov	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3301      	adds	r3, #1
 80085fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff fa26 	bl	8007a56 <SWAPBYTE>
 800860a:	4603      	mov	r3, r0
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	80da      	strh	r2, [r3, #6]
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008624:	2180      	movs	r1, #128	@ 0x80
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fce2 	bl	8008ff0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800862c:	2100      	movs	r1, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fcde 	bl	8008ff0 <USBD_LL_StallEP>
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d042      	beq.n	80086d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008656:	6938      	ldr	r0, [r7, #16]
 8008658:	f000 f842 	bl	80086e0 <USBD_GetLen>
 800865c:	4603      	mov	r3, r0
 800865e:	3301      	adds	r3, #1
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008666:	d808      	bhi.n	800867a <USBD_GetString+0x3e>
 8008668:	6938      	ldr	r0, [r7, #16]
 800866a:	f000 f839 	bl	80086e0 <USBD_GetLen>
 800866e:	4603      	mov	r3, r0
 8008670:	3301      	adds	r3, #1
 8008672:	b29b      	uxth	r3, r3
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	e001      	b.n	800867e <USBD_GetString+0x42>
 800867a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	4413      	add	r3, r2
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7812      	ldrb	r2, [r2, #0]
 800868c:	701a      	strb	r2, [r3, #0]
  idx++;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	3301      	adds	r3, #1
 8008692:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	4413      	add	r3, r2
 800869a:	2203      	movs	r2, #3
 800869c:	701a      	strb	r2, [r3, #0]
  idx++;
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	3301      	adds	r3, #1
 80086a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086a4:	e013      	b.n	80086ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	4413      	add	r3, r2
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	7812      	ldrb	r2, [r2, #0]
 80086b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	3301      	adds	r3, #1
 80086b6:	613b      	str	r3, [r7, #16]
    idx++;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	3301      	adds	r3, #1
 80086bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	4413      	add	r3, r2
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	3301      	adds	r3, #1
 80086cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e7      	bne.n	80086a6 <USBD_GetString+0x6a>
 80086d6:	e000      	b.n	80086da <USBD_GetString+0x9e>
    return;
 80086d8:	bf00      	nop
  }
}
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086f0:	e005      	b.n	80086fe <USBD_GetLen+0x1e>
  {
    len++;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	3301      	adds	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1f5      	bne.n	80086f2 <USBD_GetLen+0x12>
  }

  return len;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2202      	movs	r2, #2
 8008724:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	2100      	movs	r1, #0
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 fce1 	bl	8009102 <USBD_LL_Transmit>

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	2100      	movs	r1, #0
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fcd0 	bl	8009102 <USBD_LL_Transmit>

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2203      	movs	r2, #3
 800877c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	2100      	movs	r1, #0
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fcd4 	bl	8009144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	2100      	movs	r1, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fcc3 	bl	8009144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2204      	movs	r2, #4
 80087d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087d8:	2300      	movs	r3, #0
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fc8f 	bl	8009102 <USBD_LL_Transmit>

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2205      	movs	r2, #5
 80087fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087fe:	2300      	movs	r3, #0
 8008800:	2200      	movs	r2, #0
 8008802:	2100      	movs	r1, #0
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fc9d 	bl	8009144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008818:	2200      	movs	r2, #0
 800881a:	4912      	ldr	r1, [pc, #72]	@ (8008864 <MX_USB_DEVICE_Init+0x50>)
 800881c:	4812      	ldr	r0, [pc, #72]	@ (8008868 <MX_USB_DEVICE_Init+0x54>)
 800881e:	f7fe fcf7 	bl	8007210 <USBD_Init>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008828:	f7f8 f942 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800882c:	490f      	ldr	r1, [pc, #60]	@ (800886c <MX_USB_DEVICE_Init+0x58>)
 800882e:	480e      	ldr	r0, [pc, #56]	@ (8008868 <MX_USB_DEVICE_Init+0x54>)
 8008830:	f7fe fd1e 	bl	8007270 <USBD_RegisterClass>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800883a:	f7f8 f939 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800883e:	490c      	ldr	r1, [pc, #48]	@ (8008870 <MX_USB_DEVICE_Init+0x5c>)
 8008840:	4809      	ldr	r0, [pc, #36]	@ (8008868 <MX_USB_DEVICE_Init+0x54>)
 8008842:	f7fe fc15 	bl	8007070 <USBD_CDC_RegisterInterface>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800884c:	f7f8 f930 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008850:	4805      	ldr	r0, [pc, #20]	@ (8008868 <MX_USB_DEVICE_Init+0x54>)
 8008852:	f7fe fd43 	bl	80072dc <USBD_Start>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800885c:	f7f8 f928 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008860:	bf00      	nop
 8008862:	bd80      	pop	{r7, pc}
 8008864:	200000c8 	.word	0x200000c8
 8008868:	200002b0 	.word	0x200002b0
 800886c:	20000034 	.word	0x20000034
 8008870:	200000b4 	.word	0x200000b4

08008874 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008878:	2200      	movs	r2, #0
 800887a:	4905      	ldr	r1, [pc, #20]	@ (8008890 <CDC_Init_FS+0x1c>)
 800887c:	4805      	ldr	r0, [pc, #20]	@ (8008894 <CDC_Init_FS+0x20>)
 800887e:	f7fe fc11 	bl	80070a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008882:	4905      	ldr	r1, [pc, #20]	@ (8008898 <CDC_Init_FS+0x24>)
 8008884:	4803      	ldr	r0, [pc, #12]	@ (8008894 <CDC_Init_FS+0x20>)
 8008886:	f7fe fc2f 	bl	80070e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800888a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800888c:	4618      	mov	r0, r3
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20000d8c 	.word	0x20000d8c
 8008894:	200002b0 	.word	0x200002b0
 8008898:	2000058c 	.word	0x2000058c

0800889c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	71fb      	strb	r3, [r7, #7]
 80088b8:	4613      	mov	r3, r2
 80088ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b23      	cmp	r3, #35	@ 0x23
 80088c0:	d84a      	bhi.n	8008958 <CDC_Control_FS+0xac>
 80088c2:	a201      	add	r2, pc, #4	@ (adr r2, 80088c8 <CDC_Control_FS+0x1c>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	08008959 	.word	0x08008959
 80088cc:	08008959 	.word	0x08008959
 80088d0:	08008959 	.word	0x08008959
 80088d4:	08008959 	.word	0x08008959
 80088d8:	08008959 	.word	0x08008959
 80088dc:	08008959 	.word	0x08008959
 80088e0:	08008959 	.word	0x08008959
 80088e4:	08008959 	.word	0x08008959
 80088e8:	08008959 	.word	0x08008959
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008959 	.word	0x08008959
 80088f4:	08008959 	.word	0x08008959
 80088f8:	08008959 	.word	0x08008959
 80088fc:	08008959 	.word	0x08008959
 8008900:	08008959 	.word	0x08008959
 8008904:	08008959 	.word	0x08008959
 8008908:	08008959 	.word	0x08008959
 800890c:	08008959 	.word	0x08008959
 8008910:	08008959 	.word	0x08008959
 8008914:	08008959 	.word	0x08008959
 8008918:	08008959 	.word	0x08008959
 800891c:	08008959 	.word	0x08008959
 8008920:	08008959 	.word	0x08008959
 8008924:	08008959 	.word	0x08008959
 8008928:	08008959 	.word	0x08008959
 800892c:	08008959 	.word	0x08008959
 8008930:	08008959 	.word	0x08008959
 8008934:	08008959 	.word	0x08008959
 8008938:	08008959 	.word	0x08008959
 800893c:	08008959 	.word	0x08008959
 8008940:	08008959 	.word	0x08008959
 8008944:	08008959 	.word	0x08008959
 8008948:	08008959 	.word	0x08008959
 800894c:	08008959 	.word	0x08008959
 8008950:	08008959 	.word	0x08008959
 8008954:	08008959 	.word	0x08008959
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008958:	bf00      	nop
  }

  return (USBD_OK);
 800895a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4805      	ldr	r0, [pc, #20]	@ (800898c <CDC_Receive_FS+0x24>)
 8008976:	f7fe fbb7 	bl	80070e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800897a:	4804      	ldr	r0, [pc, #16]	@ (800898c <CDC_Receive_FS+0x24>)
 800897c:	f7fe fc12 	bl	80071a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008980:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	200002b0 	.word	0x200002b0

08008990 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089a0:	4b0d      	ldr	r3, [pc, #52]	@ (80089d8 <CDC_Transmit_FS+0x48>)
 80089a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e00b      	b.n	80089ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089b6:	887b      	ldrh	r3, [r7, #2]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	4806      	ldr	r0, [pc, #24]	@ (80089d8 <CDC_Transmit_FS+0x48>)
 80089be:	f7fe fb71 	bl	80070a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089c2:	4805      	ldr	r0, [pc, #20]	@ (80089d8 <CDC_Transmit_FS+0x48>)
 80089c4:	f7fe fbae 	bl	8007124 <USBD_CDC_TransmitPacket>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200002b0 	.word	0x200002b0

080089dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80089ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
	...

08008a00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	6039      	str	r1, [r7, #0]
 8008a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2212      	movs	r2, #18
 8008a10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a12:	4b03      	ldr	r3, [pc, #12]	@ (8008a20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	200000e4 	.word	0x200000e4

08008a24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2204      	movs	r2, #4
 8008a34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a36:	4b03      	ldr	r3, [pc, #12]	@ (8008a44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	200000f8 	.word	0x200000f8

08008a48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d105      	bne.n	8008a66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	4907      	ldr	r1, [pc, #28]	@ (8008a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a5e:	4808      	ldr	r0, [pc, #32]	@ (8008a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a60:	f7ff fdec 	bl	800863c <USBD_GetString>
 8008a64:	e004      	b.n	8008a70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	4904      	ldr	r1, [pc, #16]	@ (8008a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a6a:	4805      	ldr	r0, [pc, #20]	@ (8008a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a6c:	f7ff fde6 	bl	800863c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a70:	4b02      	ldr	r3, [pc, #8]	@ (8008a7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	2000158c 	.word	0x2000158c
 8008a80:	08009b94 	.word	0x08009b94

08008a84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	4904      	ldr	r1, [pc, #16]	@ (8008aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a94:	4804      	ldr	r0, [pc, #16]	@ (8008aa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a96:	f7ff fdd1 	bl	800863c <USBD_GetString>
  return USBD_StrDesc;
 8008a9a:	4b02      	ldr	r3, [pc, #8]	@ (8008aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	2000158c 	.word	0x2000158c
 8008aa8:	08009bac 	.word	0x08009bac

08008aac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	221a      	movs	r2, #26
 8008abc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008abe:	f000 f843 	bl	8008b48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ac2:	4b02      	ldr	r3, [pc, #8]	@ (8008acc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	200000fc 	.word	0x200000fc

08008ad0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4907      	ldr	r1, [pc, #28]	@ (8008b04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ae6:	4808      	ldr	r0, [pc, #32]	@ (8008b08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ae8:	f7ff fda8 	bl	800863c <USBD_GetString>
 8008aec:	e004      	b.n	8008af8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4904      	ldr	r1, [pc, #16]	@ (8008b04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008af2:	4805      	ldr	r0, [pc, #20]	@ (8008b08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008af4:	f7ff fda2 	bl	800863c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008af8:	4b02      	ldr	r3, [pc, #8]	@ (8008b04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	2000158c 	.word	0x2000158c
 8008b08:	08009bc0 	.word	0x08009bc0

08008b0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d105      	bne.n	8008b2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	4907      	ldr	r1, [pc, #28]	@ (8008b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b22:	4808      	ldr	r0, [pc, #32]	@ (8008b44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b24:	f7ff fd8a 	bl	800863c <USBD_GetString>
 8008b28:	e004      	b.n	8008b34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	4904      	ldr	r1, [pc, #16]	@ (8008b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b2e:	4805      	ldr	r0, [pc, #20]	@ (8008b44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b30:	f7ff fd84 	bl	800863c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b34:	4b02      	ldr	r3, [pc, #8]	@ (8008b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	2000158c 	.word	0x2000158c
 8008b44:	08009bcc 	.word	0x08009bcc

08008b48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b8c <Get_SerialNum+0x44>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b54:	4b0e      	ldr	r3, [pc, #56]	@ (8008b90 <Get_SerialNum+0x48>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b94 <Get_SerialNum+0x4c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b6e:	2208      	movs	r2, #8
 8008b70:	4909      	ldr	r1, [pc, #36]	@ (8008b98 <Get_SerialNum+0x50>)
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 f814 	bl	8008ba0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b78:	2204      	movs	r2, #4
 8008b7a:	4908      	ldr	r1, [pc, #32]	@ (8008b9c <Get_SerialNum+0x54>)
 8008b7c:	68b8      	ldr	r0, [r7, #8]
 8008b7e:	f000 f80f 	bl	8008ba0 <IntToUnicode>
  }
}
 8008b82:	bf00      	nop
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	1fff7a10 	.word	0x1fff7a10
 8008b90:	1fff7a14 	.word	0x1fff7a14
 8008b94:	1fff7a18 	.word	0x1fff7a18
 8008b98:	200000fe 	.word	0x200000fe
 8008b9c:	2000010e 	.word	0x2000010e

08008ba0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	4613      	mov	r3, r2
 8008bac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]
 8008bb6:	e027      	b.n	8008c08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	0f1b      	lsrs	r3, r3, #28
 8008bbc:	2b09      	cmp	r3, #9
 8008bbe:	d80b      	bhi.n	8008bd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	0f1b      	lsrs	r3, r3, #28
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	440b      	add	r3, r1
 8008bd0:	3230      	adds	r2, #48	@ 0x30
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	e00a      	b.n	8008bee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	0f1b      	lsrs	r3, r3, #28
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	4619      	mov	r1, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	440b      	add	r3, r1
 8008be8:	3237      	adds	r2, #55	@ 0x37
 8008bea:	b2d2      	uxtb	r2, r2
 8008bec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	011b      	lsls	r3, r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	3301      	adds	r3, #1
 8008c06:	75fb      	strb	r3, [r7, #23]
 8008c08:	7dfa      	ldrb	r2, [r7, #23]
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d3d3      	bcc.n	8008bb8 <IntToUnicode+0x18>
  }
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08a      	sub	sp, #40	@ 0x28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c28:	f107 0314 	add.w	r3, r7, #20
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	609a      	str	r2, [r3, #8]
 8008c34:	60da      	str	r2, [r3, #12]
 8008c36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c40:	d13a      	bne.n	8008cb8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c42:	2300      	movs	r3, #0
 8008c44:	613b      	str	r3, [r7, #16]
 8008c46:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c52:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c64:	2302      	movs	r3, #2
 8008c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c70:	230a      	movs	r3, #10
 8008c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c74:	f107 0314 	add.w	r3, r7, #20
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4812      	ldr	r0, [pc, #72]	@ (8008cc4 <HAL_PCD_MspInit+0xa4>)
 8008c7c:	f7f8 ffb2 	bl	8001be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c80:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c84:	4a0e      	ldr	r2, [pc, #56]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c94:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c9c:	4b08      	ldr	r3, [pc, #32]	@ (8008cc0 <HAL_PCD_MspInit+0xa0>)
 8008c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2100      	movs	r1, #0
 8008cac:	2043      	movs	r0, #67	@ 0x43
 8008cae:	f7f8 ff62 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cb2:	2043      	movs	r0, #67	@ 0x43
 8008cb4:	f7f8 ff7b 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cb8:	bf00      	nop
 8008cba:	3728      	adds	r7, #40	@ 0x28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	40023800 	.word	0x40023800
 8008cc4:	40020000 	.word	0x40020000

08008cc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	f7fe fb49 	bl	8007376 <USBD_LL_SetupStage>
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	4613      	mov	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	4619      	mov	r1, r3
 8008d16:	f7fe fb83 	bl	8007420 <USBD_LL_DataOutStage>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	440b      	add	r3, r1
 8008d42:	3320      	adds	r3, #32
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	78fb      	ldrb	r3, [r7, #3]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f7fe fc1c 	bl	8007586 <USBD_LL_DataInStage>
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fd56 	bl	8007816 <USBD_LL_SOF>
}
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	79db      	ldrb	r3, [r3, #7]
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d001      	beq.n	8008d8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d86:	f7f7 fe93 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d90:	7bfa      	ldrb	r2, [r7, #15]
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe fcfa 	bl	800778e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fca2 	bl	80076ea <USBD_LL_Reset>
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fcf5 	bl	80077ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008dd6:	f043 0301 	orr.w	r3, r3, #1
 8008dda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	7adb      	ldrb	r3, [r3, #11]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008de4:	4b04      	ldr	r3, [pc, #16]	@ (8008df8 <HAL_PCD_SuspendCallback+0x48>)
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	4a03      	ldr	r2, [pc, #12]	@ (8008df8 <HAL_PCD_SuspendCallback+0x48>)
 8008dea:	f043 0306 	orr.w	r3, r3, #6
 8008dee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	e000ed00 	.word	0xe000ed00

08008dfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fceb 	bl	80077e6 <USBD_LL_Resume>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e2a:	78fa      	ldrb	r2, [r7, #3]
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fd43 	bl	80078ba <USBD_LL_IsoOUTIncomplete>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fcff 	bl	8007856 <USBD_LL_IsoINIncomplete>
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fd55 	bl	800791e <USBD_LL_DevConnected>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fd52 	bl	8007934 <USBD_LL_DevDisconnected>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d13c      	bne.n	8008f22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ea8:	4a20      	ldr	r2, [pc, #128]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008eb4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008eba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ec6:	4b19      	ldr	r3, [pc, #100]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ec8:	2202      	movs	r2, #2
 8008eca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ecc:	4b17      	ldr	r3, [pc, #92]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ed2:	4b16      	ldr	r3, [pc, #88]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ed8:	4b14      	ldr	r3, [pc, #80]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ede:	4b13      	ldr	r3, [pc, #76]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ee4:	4b11      	ldr	r3, [pc, #68]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008eea:	4b10      	ldr	r3, [pc, #64]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ef6:	480d      	ldr	r0, [pc, #52]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008ef8:	f7f9 f811 	bl	8001f1e <HAL_PCD_Init>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f02:	f7f7 fdd5 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f06:	2180      	movs	r1, #128	@ 0x80
 8008f08:	4808      	ldr	r0, [pc, #32]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008f0a:	f7fa fa3e 	bl	800338a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f0e:	2240      	movs	r2, #64	@ 0x40
 8008f10:	2100      	movs	r1, #0
 8008f12:	4806      	ldr	r0, [pc, #24]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008f14:	f7fa f9f2 	bl	80032fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f18:	2280      	movs	r2, #128	@ 0x80
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	4803      	ldr	r0, [pc, #12]	@ (8008f2c <USBD_LL_Init+0x94>)
 8008f1e:	f7fa f9ed 	bl	80032fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	2000178c 	.word	0x2000178c

08008f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f9 f8f8 	bl	800213c <HAL_PCD_Start>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f942 	bl	80091dc <USBD_Get_USB_Status>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	4608      	mov	r0, r1
 8008f70:	4611      	mov	r1, r2
 8008f72:	461a      	mov	r2, r3
 8008f74:	4603      	mov	r3, r0
 8008f76:	70fb      	strb	r3, [r7, #3]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70bb      	strb	r3, [r7, #2]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f8e:	78bb      	ldrb	r3, [r7, #2]
 8008f90:	883a      	ldrh	r2, [r7, #0]
 8008f92:	78f9      	ldrb	r1, [r7, #3]
 8008f94:	f7f9 fdcc 	bl	8002b30 <HAL_PCD_EP_Open>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f91c 	bl	80091dc <USBD_Get_USB_Status>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fcc:	78fa      	ldrb	r2, [r7, #3]
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f9 fe17 	bl	8002c04 <HAL_PCD_EP_Close>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 f8fd 	bl	80091dc <USBD_Get_USB_Status>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 fecf 	bl	8002db2 <HAL_PCD_EP_SetStall>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f8de 	bl	80091dc <USBD_Get_USB_Status>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7f9 ff13 	bl	8002e78 <HAL_PCD_EP_ClrStall>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f8bf 	bl	80091dc <USBD_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009062:	7bbb      	ldrb	r3, [r7, #14]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800907e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009084:	2b00      	cmp	r3, #0
 8009086:	da0b      	bge.n	80090a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	3316      	adds	r3, #22
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	e00b      	b.n	80090b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	4613      	mov	r3, r2
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	440b      	add	r3, r1
 80090b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80090b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f9 fd00 	bl	8002ae8 <HAL_PCD_SetAddress>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f874 	bl	80091dc <USBD_Get_USB_Status>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
 800910e:	460b      	mov	r3, r1
 8009110:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009120:	7af9      	ldrb	r1, [r7, #11]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	f7f9 fe0a 	bl	8002d3e <HAL_PCD_EP_Transmit>
 800912a:	4603      	mov	r3, r0
 800912c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	4618      	mov	r0, r3
 8009132:	f000 f853 	bl	80091dc <USBD_Get_USB_Status>
 8009136:	4603      	mov	r3, r0
 8009138:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800913a:	7dbb      	ldrb	r3, [r7, #22]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	607a      	str	r2, [r7, #4]
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	460b      	mov	r3, r1
 8009152:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009162:	7af9      	ldrb	r1, [r7, #11]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f7f9 fd96 	bl	8002c98 <HAL_PCD_EP_Receive>
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 f832 	bl	80091dc <USBD_Get_USB_Status>
 8009178:	4603      	mov	r3, r0
 800917a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800917c:	7dbb      	ldrb	r3, [r7, #22]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009198:	78fa      	ldrb	r2, [r7, #3]
 800919a:	4611      	mov	r1, r2
 800919c:	4618      	mov	r0, r3
 800919e:	f7f9 fdb6 	bl	8002d0e <HAL_PCD_EP_GetRxCount>
 80091a2:	4603      	mov	r3, r0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091b4:	4b03      	ldr	r3, [pc, #12]	@ (80091c4 <USBD_static_malloc+0x18>)
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20001c70 	.word	0x20001c70

080091c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]

}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d817      	bhi.n	8009220 <USBD_Get_USB_Status+0x44>
 80091f0:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <USBD_Get_USB_Status+0x1c>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	08009209 	.word	0x08009209
 80091fc:	0800920f 	.word	0x0800920f
 8009200:	08009215 	.word	0x08009215
 8009204:	0800921b 	.word	0x0800921b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
    break;
 800920c:	e00b      	b.n	8009226 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800920e:	2303      	movs	r3, #3
 8009210:	73fb      	strb	r3, [r7, #15]
    break;
 8009212:	e008      	b.n	8009226 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009214:	2301      	movs	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]
    break;
 8009218:	e005      	b.n	8009226 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800921a:	2303      	movs	r3, #3
 800921c:	73fb      	strb	r3, [r7, #15]
    break;
 800921e:	e002      	b.n	8009226 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009220:	2303      	movs	r3, #3
 8009222:	73fb      	strb	r3, [r7, #15]
    break;
 8009224:	bf00      	nop
  }
  return usb_status;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <siprintf>:
 8009234:	b40e      	push	{r1, r2, r3}
 8009236:	b500      	push	{lr}
 8009238:	b09c      	sub	sp, #112	@ 0x70
 800923a:	ab1d      	add	r3, sp, #116	@ 0x74
 800923c:	9002      	str	r0, [sp, #8]
 800923e:	9006      	str	r0, [sp, #24]
 8009240:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009244:	4809      	ldr	r0, [pc, #36]	@ (800926c <siprintf+0x38>)
 8009246:	9107      	str	r1, [sp, #28]
 8009248:	9104      	str	r1, [sp, #16]
 800924a:	4909      	ldr	r1, [pc, #36]	@ (8009270 <siprintf+0x3c>)
 800924c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009250:	9105      	str	r1, [sp, #20]
 8009252:	6800      	ldr	r0, [r0, #0]
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	a902      	add	r1, sp, #8
 8009258:	f000 f994 	bl	8009584 <_svfiprintf_r>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	2200      	movs	r2, #0
 8009260:	701a      	strb	r2, [r3, #0]
 8009262:	b01c      	add	sp, #112	@ 0x70
 8009264:	f85d eb04 	ldr.w	lr, [sp], #4
 8009268:	b003      	add	sp, #12
 800926a:	4770      	bx	lr
 800926c:	20000118 	.word	0x20000118
 8009270:	ffff0208 	.word	0xffff0208

08009274 <memset>:
 8009274:	4402      	add	r2, r0
 8009276:	4603      	mov	r3, r0
 8009278:	4293      	cmp	r3, r2
 800927a:	d100      	bne.n	800927e <memset+0xa>
 800927c:	4770      	bx	lr
 800927e:	f803 1b01 	strb.w	r1, [r3], #1
 8009282:	e7f9      	b.n	8009278 <memset+0x4>

08009284 <__errno>:
 8009284:	4b01      	ldr	r3, [pc, #4]	@ (800928c <__errno+0x8>)
 8009286:	6818      	ldr	r0, [r3, #0]
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000118 	.word	0x20000118

08009290 <__libc_init_array>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	4d0d      	ldr	r5, [pc, #52]	@ (80092c8 <__libc_init_array+0x38>)
 8009294:	4c0d      	ldr	r4, [pc, #52]	@ (80092cc <__libc_init_array+0x3c>)
 8009296:	1b64      	subs	r4, r4, r5
 8009298:	10a4      	asrs	r4, r4, #2
 800929a:	2600      	movs	r6, #0
 800929c:	42a6      	cmp	r6, r4
 800929e:	d109      	bne.n	80092b4 <__libc_init_array+0x24>
 80092a0:	4d0b      	ldr	r5, [pc, #44]	@ (80092d0 <__libc_init_array+0x40>)
 80092a2:	4c0c      	ldr	r4, [pc, #48]	@ (80092d4 <__libc_init_array+0x44>)
 80092a4:	f000 fc66 	bl	8009b74 <_init>
 80092a8:	1b64      	subs	r4, r4, r5
 80092aa:	10a4      	asrs	r4, r4, #2
 80092ac:	2600      	movs	r6, #0
 80092ae:	42a6      	cmp	r6, r4
 80092b0:	d105      	bne.n	80092be <__libc_init_array+0x2e>
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b8:	4798      	blx	r3
 80092ba:	3601      	adds	r6, #1
 80092bc:	e7ee      	b.n	800929c <__libc_init_array+0xc>
 80092be:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c2:	4798      	blx	r3
 80092c4:	3601      	adds	r6, #1
 80092c6:	e7f2      	b.n	80092ae <__libc_init_array+0x1e>
 80092c8:	08009c30 	.word	0x08009c30
 80092cc:	08009c30 	.word	0x08009c30
 80092d0:	08009c30 	.word	0x08009c30
 80092d4:	08009c34 	.word	0x08009c34

080092d8 <__retarget_lock_acquire_recursive>:
 80092d8:	4770      	bx	lr

080092da <__retarget_lock_release_recursive>:
 80092da:	4770      	bx	lr

080092dc <_free_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4605      	mov	r5, r0
 80092e0:	2900      	cmp	r1, #0
 80092e2:	d041      	beq.n	8009368 <_free_r+0x8c>
 80092e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e8:	1f0c      	subs	r4, r1, #4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bfb8      	it	lt
 80092ee:	18e4      	addlt	r4, r4, r3
 80092f0:	f000 f8e0 	bl	80094b4 <__malloc_lock>
 80092f4:	4a1d      	ldr	r2, [pc, #116]	@ (800936c <_free_r+0x90>)
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	b933      	cbnz	r3, 8009308 <_free_r+0x2c>
 80092fa:	6063      	str	r3, [r4, #4]
 80092fc:	6014      	str	r4, [r2, #0]
 80092fe:	4628      	mov	r0, r5
 8009300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009304:	f000 b8dc 	b.w	80094c0 <__malloc_unlock>
 8009308:	42a3      	cmp	r3, r4
 800930a:	d908      	bls.n	800931e <_free_r+0x42>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	1821      	adds	r1, r4, r0
 8009310:	428b      	cmp	r3, r1
 8009312:	bf01      	itttt	eq
 8009314:	6819      	ldreq	r1, [r3, #0]
 8009316:	685b      	ldreq	r3, [r3, #4]
 8009318:	1809      	addeq	r1, r1, r0
 800931a:	6021      	streq	r1, [r4, #0]
 800931c:	e7ed      	b.n	80092fa <_free_r+0x1e>
 800931e:	461a      	mov	r2, r3
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	b10b      	cbz	r3, 8009328 <_free_r+0x4c>
 8009324:	42a3      	cmp	r3, r4
 8009326:	d9fa      	bls.n	800931e <_free_r+0x42>
 8009328:	6811      	ldr	r1, [r2, #0]
 800932a:	1850      	adds	r0, r2, r1
 800932c:	42a0      	cmp	r0, r4
 800932e:	d10b      	bne.n	8009348 <_free_r+0x6c>
 8009330:	6820      	ldr	r0, [r4, #0]
 8009332:	4401      	add	r1, r0
 8009334:	1850      	adds	r0, r2, r1
 8009336:	4283      	cmp	r3, r0
 8009338:	6011      	str	r1, [r2, #0]
 800933a:	d1e0      	bne.n	80092fe <_free_r+0x22>
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	6053      	str	r3, [r2, #4]
 8009342:	4408      	add	r0, r1
 8009344:	6010      	str	r0, [r2, #0]
 8009346:	e7da      	b.n	80092fe <_free_r+0x22>
 8009348:	d902      	bls.n	8009350 <_free_r+0x74>
 800934a:	230c      	movs	r3, #12
 800934c:	602b      	str	r3, [r5, #0]
 800934e:	e7d6      	b.n	80092fe <_free_r+0x22>
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	1821      	adds	r1, r4, r0
 8009354:	428b      	cmp	r3, r1
 8009356:	bf04      	itt	eq
 8009358:	6819      	ldreq	r1, [r3, #0]
 800935a:	685b      	ldreq	r3, [r3, #4]
 800935c:	6063      	str	r3, [r4, #4]
 800935e:	bf04      	itt	eq
 8009360:	1809      	addeq	r1, r1, r0
 8009362:	6021      	streq	r1, [r4, #0]
 8009364:	6054      	str	r4, [r2, #4]
 8009366:	e7ca      	b.n	80092fe <_free_r+0x22>
 8009368:	bd38      	pop	{r3, r4, r5, pc}
 800936a:	bf00      	nop
 800936c:	20001fd4 	.word	0x20001fd4

08009370 <sbrk_aligned>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	4e0f      	ldr	r6, [pc, #60]	@ (80093b0 <sbrk_aligned+0x40>)
 8009374:	460c      	mov	r4, r1
 8009376:	6831      	ldr	r1, [r6, #0]
 8009378:	4605      	mov	r5, r0
 800937a:	b911      	cbnz	r1, 8009382 <sbrk_aligned+0x12>
 800937c:	f000 fba6 	bl	8009acc <_sbrk_r>
 8009380:	6030      	str	r0, [r6, #0]
 8009382:	4621      	mov	r1, r4
 8009384:	4628      	mov	r0, r5
 8009386:	f000 fba1 	bl	8009acc <_sbrk_r>
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	d103      	bne.n	8009396 <sbrk_aligned+0x26>
 800938e:	f04f 34ff 	mov.w	r4, #4294967295
 8009392:	4620      	mov	r0, r4
 8009394:	bd70      	pop	{r4, r5, r6, pc}
 8009396:	1cc4      	adds	r4, r0, #3
 8009398:	f024 0403 	bic.w	r4, r4, #3
 800939c:	42a0      	cmp	r0, r4
 800939e:	d0f8      	beq.n	8009392 <sbrk_aligned+0x22>
 80093a0:	1a21      	subs	r1, r4, r0
 80093a2:	4628      	mov	r0, r5
 80093a4:	f000 fb92 	bl	8009acc <_sbrk_r>
 80093a8:	3001      	adds	r0, #1
 80093aa:	d1f2      	bne.n	8009392 <sbrk_aligned+0x22>
 80093ac:	e7ef      	b.n	800938e <sbrk_aligned+0x1e>
 80093ae:	bf00      	nop
 80093b0:	20001fd0 	.word	0x20001fd0

080093b4 <_malloc_r>:
 80093b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b8:	1ccd      	adds	r5, r1, #3
 80093ba:	f025 0503 	bic.w	r5, r5, #3
 80093be:	3508      	adds	r5, #8
 80093c0:	2d0c      	cmp	r5, #12
 80093c2:	bf38      	it	cc
 80093c4:	250c      	movcc	r5, #12
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	4606      	mov	r6, r0
 80093ca:	db01      	blt.n	80093d0 <_malloc_r+0x1c>
 80093cc:	42a9      	cmp	r1, r5
 80093ce:	d904      	bls.n	80093da <_malloc_r+0x26>
 80093d0:	230c      	movs	r3, #12
 80093d2:	6033      	str	r3, [r6, #0]
 80093d4:	2000      	movs	r0, #0
 80093d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094b0 <_malloc_r+0xfc>
 80093de:	f000 f869 	bl	80094b4 <__malloc_lock>
 80093e2:	f8d8 3000 	ldr.w	r3, [r8]
 80093e6:	461c      	mov	r4, r3
 80093e8:	bb44      	cbnz	r4, 800943c <_malloc_r+0x88>
 80093ea:	4629      	mov	r1, r5
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff ffbf 	bl	8009370 <sbrk_aligned>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	4604      	mov	r4, r0
 80093f6:	d158      	bne.n	80094aa <_malloc_r+0xf6>
 80093f8:	f8d8 4000 	ldr.w	r4, [r8]
 80093fc:	4627      	mov	r7, r4
 80093fe:	2f00      	cmp	r7, #0
 8009400:	d143      	bne.n	800948a <_malloc_r+0xd6>
 8009402:	2c00      	cmp	r4, #0
 8009404:	d04b      	beq.n	800949e <_malloc_r+0xea>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	4639      	mov	r1, r7
 800940a:	4630      	mov	r0, r6
 800940c:	eb04 0903 	add.w	r9, r4, r3
 8009410:	f000 fb5c 	bl	8009acc <_sbrk_r>
 8009414:	4581      	cmp	r9, r0
 8009416:	d142      	bne.n	800949e <_malloc_r+0xea>
 8009418:	6821      	ldr	r1, [r4, #0]
 800941a:	1a6d      	subs	r5, r5, r1
 800941c:	4629      	mov	r1, r5
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ffa6 	bl	8009370 <sbrk_aligned>
 8009424:	3001      	adds	r0, #1
 8009426:	d03a      	beq.n	800949e <_malloc_r+0xea>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	442b      	add	r3, r5
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	f8d8 3000 	ldr.w	r3, [r8]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	bb62      	cbnz	r2, 8009490 <_malloc_r+0xdc>
 8009436:	f8c8 7000 	str.w	r7, [r8]
 800943a:	e00f      	b.n	800945c <_malloc_r+0xa8>
 800943c:	6822      	ldr	r2, [r4, #0]
 800943e:	1b52      	subs	r2, r2, r5
 8009440:	d420      	bmi.n	8009484 <_malloc_r+0xd0>
 8009442:	2a0b      	cmp	r2, #11
 8009444:	d917      	bls.n	8009476 <_malloc_r+0xc2>
 8009446:	1961      	adds	r1, r4, r5
 8009448:	42a3      	cmp	r3, r4
 800944a:	6025      	str	r5, [r4, #0]
 800944c:	bf18      	it	ne
 800944e:	6059      	strne	r1, [r3, #4]
 8009450:	6863      	ldr	r3, [r4, #4]
 8009452:	bf08      	it	eq
 8009454:	f8c8 1000 	streq.w	r1, [r8]
 8009458:	5162      	str	r2, [r4, r5]
 800945a:	604b      	str	r3, [r1, #4]
 800945c:	4630      	mov	r0, r6
 800945e:	f000 f82f 	bl	80094c0 <__malloc_unlock>
 8009462:	f104 000b 	add.w	r0, r4, #11
 8009466:	1d23      	adds	r3, r4, #4
 8009468:	f020 0007 	bic.w	r0, r0, #7
 800946c:	1ac2      	subs	r2, r0, r3
 800946e:	bf1c      	itt	ne
 8009470:	1a1b      	subne	r3, r3, r0
 8009472:	50a3      	strne	r3, [r4, r2]
 8009474:	e7af      	b.n	80093d6 <_malloc_r+0x22>
 8009476:	6862      	ldr	r2, [r4, #4]
 8009478:	42a3      	cmp	r3, r4
 800947a:	bf0c      	ite	eq
 800947c:	f8c8 2000 	streq.w	r2, [r8]
 8009480:	605a      	strne	r2, [r3, #4]
 8009482:	e7eb      	b.n	800945c <_malloc_r+0xa8>
 8009484:	4623      	mov	r3, r4
 8009486:	6864      	ldr	r4, [r4, #4]
 8009488:	e7ae      	b.n	80093e8 <_malloc_r+0x34>
 800948a:	463c      	mov	r4, r7
 800948c:	687f      	ldr	r7, [r7, #4]
 800948e:	e7b6      	b.n	80093fe <_malloc_r+0x4a>
 8009490:	461a      	mov	r2, r3
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	42a3      	cmp	r3, r4
 8009496:	d1fb      	bne.n	8009490 <_malloc_r+0xdc>
 8009498:	2300      	movs	r3, #0
 800949a:	6053      	str	r3, [r2, #4]
 800949c:	e7de      	b.n	800945c <_malloc_r+0xa8>
 800949e:	230c      	movs	r3, #12
 80094a0:	6033      	str	r3, [r6, #0]
 80094a2:	4630      	mov	r0, r6
 80094a4:	f000 f80c 	bl	80094c0 <__malloc_unlock>
 80094a8:	e794      	b.n	80093d4 <_malloc_r+0x20>
 80094aa:	6005      	str	r5, [r0, #0]
 80094ac:	e7d6      	b.n	800945c <_malloc_r+0xa8>
 80094ae:	bf00      	nop
 80094b0:	20001fd4 	.word	0x20001fd4

080094b4 <__malloc_lock>:
 80094b4:	4801      	ldr	r0, [pc, #4]	@ (80094bc <__malloc_lock+0x8>)
 80094b6:	f7ff bf0f 	b.w	80092d8 <__retarget_lock_acquire_recursive>
 80094ba:	bf00      	nop
 80094bc:	20001fcc 	.word	0x20001fcc

080094c0 <__malloc_unlock>:
 80094c0:	4801      	ldr	r0, [pc, #4]	@ (80094c8 <__malloc_unlock+0x8>)
 80094c2:	f7ff bf0a 	b.w	80092da <__retarget_lock_release_recursive>
 80094c6:	bf00      	nop
 80094c8:	20001fcc 	.word	0x20001fcc

080094cc <__ssputs_r>:
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	688e      	ldr	r6, [r1, #8]
 80094d2:	461f      	mov	r7, r3
 80094d4:	42be      	cmp	r6, r7
 80094d6:	680b      	ldr	r3, [r1, #0]
 80094d8:	4682      	mov	sl, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	4690      	mov	r8, r2
 80094de:	d82d      	bhi.n	800953c <__ssputs_r+0x70>
 80094e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094e8:	d026      	beq.n	8009538 <__ssputs_r+0x6c>
 80094ea:	6965      	ldr	r5, [r4, #20]
 80094ec:	6909      	ldr	r1, [r1, #16]
 80094ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094f2:	eba3 0901 	sub.w	r9, r3, r1
 80094f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094fa:	1c7b      	adds	r3, r7, #1
 80094fc:	444b      	add	r3, r9
 80094fe:	106d      	asrs	r5, r5, #1
 8009500:	429d      	cmp	r5, r3
 8009502:	bf38      	it	cc
 8009504:	461d      	movcc	r5, r3
 8009506:	0553      	lsls	r3, r2, #21
 8009508:	d527      	bpl.n	800955a <__ssputs_r+0x8e>
 800950a:	4629      	mov	r1, r5
 800950c:	f7ff ff52 	bl	80093b4 <_malloc_r>
 8009510:	4606      	mov	r6, r0
 8009512:	b360      	cbz	r0, 800956e <__ssputs_r+0xa2>
 8009514:	6921      	ldr	r1, [r4, #16]
 8009516:	464a      	mov	r2, r9
 8009518:	f000 fae8 	bl	8009aec <memcpy>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	6126      	str	r6, [r4, #16]
 800952a:	6165      	str	r5, [r4, #20]
 800952c:	444e      	add	r6, r9
 800952e:	eba5 0509 	sub.w	r5, r5, r9
 8009532:	6026      	str	r6, [r4, #0]
 8009534:	60a5      	str	r5, [r4, #8]
 8009536:	463e      	mov	r6, r7
 8009538:	42be      	cmp	r6, r7
 800953a:	d900      	bls.n	800953e <__ssputs_r+0x72>
 800953c:	463e      	mov	r6, r7
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	4632      	mov	r2, r6
 8009542:	4641      	mov	r1, r8
 8009544:	f000 faa8 	bl	8009a98 <memmove>
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	1b9b      	subs	r3, r3, r6
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	4433      	add	r3, r6
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	2000      	movs	r0, #0
 8009556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955a:	462a      	mov	r2, r5
 800955c:	f000 fad4 	bl	8009b08 <_realloc_r>
 8009560:	4606      	mov	r6, r0
 8009562:	2800      	cmp	r0, #0
 8009564:	d1e0      	bne.n	8009528 <__ssputs_r+0x5c>
 8009566:	6921      	ldr	r1, [r4, #16]
 8009568:	4650      	mov	r0, sl
 800956a:	f7ff feb7 	bl	80092dc <_free_r>
 800956e:	230c      	movs	r3, #12
 8009570:	f8ca 3000 	str.w	r3, [sl]
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	e7e9      	b.n	8009556 <__ssputs_r+0x8a>
	...

08009584 <_svfiprintf_r>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4698      	mov	r8, r3
 800958a:	898b      	ldrh	r3, [r1, #12]
 800958c:	061b      	lsls	r3, r3, #24
 800958e:	b09d      	sub	sp, #116	@ 0x74
 8009590:	4607      	mov	r7, r0
 8009592:	460d      	mov	r5, r1
 8009594:	4614      	mov	r4, r2
 8009596:	d510      	bpl.n	80095ba <_svfiprintf_r+0x36>
 8009598:	690b      	ldr	r3, [r1, #16]
 800959a:	b973      	cbnz	r3, 80095ba <_svfiprintf_r+0x36>
 800959c:	2140      	movs	r1, #64	@ 0x40
 800959e:	f7ff ff09 	bl	80093b4 <_malloc_r>
 80095a2:	6028      	str	r0, [r5, #0]
 80095a4:	6128      	str	r0, [r5, #16]
 80095a6:	b930      	cbnz	r0, 80095b6 <_svfiprintf_r+0x32>
 80095a8:	230c      	movs	r3, #12
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
 80095b0:	b01d      	add	sp, #116	@ 0x74
 80095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b6:	2340      	movs	r3, #64	@ 0x40
 80095b8:	616b      	str	r3, [r5, #20]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095be:	2320      	movs	r3, #32
 80095c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c8:	2330      	movs	r3, #48	@ 0x30
 80095ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009768 <_svfiprintf_r+0x1e4>
 80095ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095d2:	f04f 0901 	mov.w	r9, #1
 80095d6:	4623      	mov	r3, r4
 80095d8:	469a      	mov	sl, r3
 80095da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095de:	b10a      	cbz	r2, 80095e4 <_svfiprintf_r+0x60>
 80095e0:	2a25      	cmp	r2, #37	@ 0x25
 80095e2:	d1f9      	bne.n	80095d8 <_svfiprintf_r+0x54>
 80095e4:	ebba 0b04 	subs.w	fp, sl, r4
 80095e8:	d00b      	beq.n	8009602 <_svfiprintf_r+0x7e>
 80095ea:	465b      	mov	r3, fp
 80095ec:	4622      	mov	r2, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ff6b 	bl	80094cc <__ssputs_r>
 80095f6:	3001      	adds	r0, #1
 80095f8:	f000 80a7 	beq.w	800974a <_svfiprintf_r+0x1c6>
 80095fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095fe:	445a      	add	r2, fp
 8009600:	9209      	str	r2, [sp, #36]	@ 0x24
 8009602:	f89a 3000 	ldrb.w	r3, [sl]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 809f 	beq.w	800974a <_svfiprintf_r+0x1c6>
 800960c:	2300      	movs	r3, #0
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009616:	f10a 0a01 	add.w	sl, sl, #1
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009622:	931a      	str	r3, [sp, #104]	@ 0x68
 8009624:	4654      	mov	r4, sl
 8009626:	2205      	movs	r2, #5
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	484e      	ldr	r0, [pc, #312]	@ (8009768 <_svfiprintf_r+0x1e4>)
 800962e:	f7f6 fdd7 	bl	80001e0 <memchr>
 8009632:	9a04      	ldr	r2, [sp, #16]
 8009634:	b9d8      	cbnz	r0, 800966e <_svfiprintf_r+0xea>
 8009636:	06d0      	lsls	r0, r2, #27
 8009638:	bf44      	itt	mi
 800963a:	2320      	movmi	r3, #32
 800963c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009640:	0711      	lsls	r1, r2, #28
 8009642:	bf44      	itt	mi
 8009644:	232b      	movmi	r3, #43	@ 0x2b
 8009646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800964a:	f89a 3000 	ldrb.w	r3, [sl]
 800964e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009650:	d015      	beq.n	800967e <_svfiprintf_r+0xfa>
 8009652:	9a07      	ldr	r2, [sp, #28]
 8009654:	4654      	mov	r4, sl
 8009656:	2000      	movs	r0, #0
 8009658:	f04f 0c0a 	mov.w	ip, #10
 800965c:	4621      	mov	r1, r4
 800965e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009662:	3b30      	subs	r3, #48	@ 0x30
 8009664:	2b09      	cmp	r3, #9
 8009666:	d94b      	bls.n	8009700 <_svfiprintf_r+0x17c>
 8009668:	b1b0      	cbz	r0, 8009698 <_svfiprintf_r+0x114>
 800966a:	9207      	str	r2, [sp, #28]
 800966c:	e014      	b.n	8009698 <_svfiprintf_r+0x114>
 800966e:	eba0 0308 	sub.w	r3, r0, r8
 8009672:	fa09 f303 	lsl.w	r3, r9, r3
 8009676:	4313      	orrs	r3, r2
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	46a2      	mov	sl, r4
 800967c:	e7d2      	b.n	8009624 <_svfiprintf_r+0xa0>
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	1d19      	adds	r1, r3, #4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	9103      	str	r1, [sp, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bfbb      	ittet	lt
 800968a:	425b      	neglt	r3, r3
 800968c:	f042 0202 	orrlt.w	r2, r2, #2
 8009690:	9307      	strge	r3, [sp, #28]
 8009692:	9307      	strlt	r3, [sp, #28]
 8009694:	bfb8      	it	lt
 8009696:	9204      	strlt	r2, [sp, #16]
 8009698:	7823      	ldrb	r3, [r4, #0]
 800969a:	2b2e      	cmp	r3, #46	@ 0x2e
 800969c:	d10a      	bne.n	80096b4 <_svfiprintf_r+0x130>
 800969e:	7863      	ldrb	r3, [r4, #1]
 80096a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80096a2:	d132      	bne.n	800970a <_svfiprintf_r+0x186>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	1d1a      	adds	r2, r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	9203      	str	r2, [sp, #12]
 80096ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096b0:	3402      	adds	r4, #2
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009778 <_svfiprintf_r+0x1f4>
 80096b8:	7821      	ldrb	r1, [r4, #0]
 80096ba:	2203      	movs	r2, #3
 80096bc:	4650      	mov	r0, sl
 80096be:	f7f6 fd8f 	bl	80001e0 <memchr>
 80096c2:	b138      	cbz	r0, 80096d4 <_svfiprintf_r+0x150>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	eba0 000a 	sub.w	r0, r0, sl
 80096ca:	2240      	movs	r2, #64	@ 0x40
 80096cc:	4082      	lsls	r2, r0
 80096ce:	4313      	orrs	r3, r2
 80096d0:	3401      	adds	r4, #1
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d8:	4824      	ldr	r0, [pc, #144]	@ (800976c <_svfiprintf_r+0x1e8>)
 80096da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096de:	2206      	movs	r2, #6
 80096e0:	f7f6 fd7e 	bl	80001e0 <memchr>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d036      	beq.n	8009756 <_svfiprintf_r+0x1d2>
 80096e8:	4b21      	ldr	r3, [pc, #132]	@ (8009770 <_svfiprintf_r+0x1ec>)
 80096ea:	bb1b      	cbnz	r3, 8009734 <_svfiprintf_r+0x1b0>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	3307      	adds	r3, #7
 80096f0:	f023 0307 	bic.w	r3, r3, #7
 80096f4:	3308      	adds	r3, #8
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fa:	4433      	add	r3, r6
 80096fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fe:	e76a      	b.n	80095d6 <_svfiprintf_r+0x52>
 8009700:	fb0c 3202 	mla	r2, ip, r2, r3
 8009704:	460c      	mov	r4, r1
 8009706:	2001      	movs	r0, #1
 8009708:	e7a8      	b.n	800965c <_svfiprintf_r+0xd8>
 800970a:	2300      	movs	r3, #0
 800970c:	3401      	adds	r4, #1
 800970e:	9305      	str	r3, [sp, #20]
 8009710:	4619      	mov	r1, r3
 8009712:	f04f 0c0a 	mov.w	ip, #10
 8009716:	4620      	mov	r0, r4
 8009718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971c:	3a30      	subs	r2, #48	@ 0x30
 800971e:	2a09      	cmp	r2, #9
 8009720:	d903      	bls.n	800972a <_svfiprintf_r+0x1a6>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0c6      	beq.n	80096b4 <_svfiprintf_r+0x130>
 8009726:	9105      	str	r1, [sp, #20]
 8009728:	e7c4      	b.n	80096b4 <_svfiprintf_r+0x130>
 800972a:	fb0c 2101 	mla	r1, ip, r1, r2
 800972e:	4604      	mov	r4, r0
 8009730:	2301      	movs	r3, #1
 8009732:	e7f0      	b.n	8009716 <_svfiprintf_r+0x192>
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	462a      	mov	r2, r5
 800973a:	4b0e      	ldr	r3, [pc, #56]	@ (8009774 <_svfiprintf_r+0x1f0>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4638      	mov	r0, r7
 8009740:	f3af 8000 	nop.w
 8009744:	1c42      	adds	r2, r0, #1
 8009746:	4606      	mov	r6, r0
 8009748:	d1d6      	bne.n	80096f8 <_svfiprintf_r+0x174>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	065b      	lsls	r3, r3, #25
 800974e:	f53f af2d 	bmi.w	80095ac <_svfiprintf_r+0x28>
 8009752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009754:	e72c      	b.n	80095b0 <_svfiprintf_r+0x2c>
 8009756:	ab03      	add	r3, sp, #12
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	462a      	mov	r2, r5
 800975c:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <_svfiprintf_r+0x1f0>)
 800975e:	a904      	add	r1, sp, #16
 8009760:	4638      	mov	r0, r7
 8009762:	f000 f879 	bl	8009858 <_printf_i>
 8009766:	e7ed      	b.n	8009744 <_svfiprintf_r+0x1c0>
 8009768:	08009bf4 	.word	0x08009bf4
 800976c:	08009bfe 	.word	0x08009bfe
 8009770:	00000000 	.word	0x00000000
 8009774:	080094cd 	.word	0x080094cd
 8009778:	08009bfa 	.word	0x08009bfa

0800977c <_printf_common>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	4616      	mov	r6, r2
 8009782:	4698      	mov	r8, r3
 8009784:	688a      	ldr	r2, [r1, #8]
 8009786:	690b      	ldr	r3, [r1, #16]
 8009788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800978c:	4293      	cmp	r3, r2
 800978e:	bfb8      	it	lt
 8009790:	4613      	movlt	r3, r2
 8009792:	6033      	str	r3, [r6, #0]
 8009794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009798:	4607      	mov	r7, r0
 800979a:	460c      	mov	r4, r1
 800979c:	b10a      	cbz	r2, 80097a2 <_printf_common+0x26>
 800979e:	3301      	adds	r3, #1
 80097a0:	6033      	str	r3, [r6, #0]
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	0699      	lsls	r1, r3, #26
 80097a6:	bf42      	ittt	mi
 80097a8:	6833      	ldrmi	r3, [r6, #0]
 80097aa:	3302      	addmi	r3, #2
 80097ac:	6033      	strmi	r3, [r6, #0]
 80097ae:	6825      	ldr	r5, [r4, #0]
 80097b0:	f015 0506 	ands.w	r5, r5, #6
 80097b4:	d106      	bne.n	80097c4 <_printf_common+0x48>
 80097b6:	f104 0a19 	add.w	sl, r4, #25
 80097ba:	68e3      	ldr	r3, [r4, #12]
 80097bc:	6832      	ldr	r2, [r6, #0]
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	42ab      	cmp	r3, r5
 80097c2:	dc26      	bgt.n	8009812 <_printf_common+0x96>
 80097c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	3b00      	subs	r3, #0
 80097cc:	bf18      	it	ne
 80097ce:	2301      	movne	r3, #1
 80097d0:	0692      	lsls	r2, r2, #26
 80097d2:	d42b      	bmi.n	800982c <_printf_common+0xb0>
 80097d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097d8:	4641      	mov	r1, r8
 80097da:	4638      	mov	r0, r7
 80097dc:	47c8      	blx	r9
 80097de:	3001      	adds	r0, #1
 80097e0:	d01e      	beq.n	8009820 <_printf_common+0xa4>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	f003 0306 	and.w	r3, r3, #6
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	bf02      	ittt	eq
 80097ee:	68e5      	ldreq	r5, [r4, #12]
 80097f0:	6833      	ldreq	r3, [r6, #0]
 80097f2:	1aed      	subeq	r5, r5, r3
 80097f4:	68a3      	ldr	r3, [r4, #8]
 80097f6:	bf0c      	ite	eq
 80097f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097fc:	2500      	movne	r5, #0
 80097fe:	4293      	cmp	r3, r2
 8009800:	bfc4      	itt	gt
 8009802:	1a9b      	subgt	r3, r3, r2
 8009804:	18ed      	addgt	r5, r5, r3
 8009806:	2600      	movs	r6, #0
 8009808:	341a      	adds	r4, #26
 800980a:	42b5      	cmp	r5, r6
 800980c:	d11a      	bne.n	8009844 <_printf_common+0xc8>
 800980e:	2000      	movs	r0, #0
 8009810:	e008      	b.n	8009824 <_printf_common+0xa8>
 8009812:	2301      	movs	r3, #1
 8009814:	4652      	mov	r2, sl
 8009816:	4641      	mov	r1, r8
 8009818:	4638      	mov	r0, r7
 800981a:	47c8      	blx	r9
 800981c:	3001      	adds	r0, #1
 800981e:	d103      	bne.n	8009828 <_printf_common+0xac>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009828:	3501      	adds	r5, #1
 800982a:	e7c6      	b.n	80097ba <_printf_common+0x3e>
 800982c:	18e1      	adds	r1, r4, r3
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	2030      	movs	r0, #48	@ 0x30
 8009832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009836:	4422      	add	r2, r4
 8009838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800983c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009840:	3302      	adds	r3, #2
 8009842:	e7c7      	b.n	80097d4 <_printf_common+0x58>
 8009844:	2301      	movs	r3, #1
 8009846:	4622      	mov	r2, r4
 8009848:	4641      	mov	r1, r8
 800984a:	4638      	mov	r0, r7
 800984c:	47c8      	blx	r9
 800984e:	3001      	adds	r0, #1
 8009850:	d0e6      	beq.n	8009820 <_printf_common+0xa4>
 8009852:	3601      	adds	r6, #1
 8009854:	e7d9      	b.n	800980a <_printf_common+0x8e>
	...

08009858 <_printf_i>:
 8009858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	7e0f      	ldrb	r7, [r1, #24]
 800985e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009860:	2f78      	cmp	r7, #120	@ 0x78
 8009862:	4691      	mov	r9, r2
 8009864:	4680      	mov	r8, r0
 8009866:	460c      	mov	r4, r1
 8009868:	469a      	mov	sl, r3
 800986a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800986e:	d807      	bhi.n	8009880 <_printf_i+0x28>
 8009870:	2f62      	cmp	r7, #98	@ 0x62
 8009872:	d80a      	bhi.n	800988a <_printf_i+0x32>
 8009874:	2f00      	cmp	r7, #0
 8009876:	f000 80d2 	beq.w	8009a1e <_printf_i+0x1c6>
 800987a:	2f58      	cmp	r7, #88	@ 0x58
 800987c:	f000 80b9 	beq.w	80099f2 <_printf_i+0x19a>
 8009880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009888:	e03a      	b.n	8009900 <_printf_i+0xa8>
 800988a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800988e:	2b15      	cmp	r3, #21
 8009890:	d8f6      	bhi.n	8009880 <_printf_i+0x28>
 8009892:	a101      	add	r1, pc, #4	@ (adr r1, 8009898 <_printf_i+0x40>)
 8009894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009898:	080098f1 	.word	0x080098f1
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009881 	.word	0x08009881
 80098a4:	08009881 	.word	0x08009881
 80098a8:	08009881 	.word	0x08009881
 80098ac:	08009881 	.word	0x08009881
 80098b0:	08009905 	.word	0x08009905
 80098b4:	08009881 	.word	0x08009881
 80098b8:	08009881 	.word	0x08009881
 80098bc:	08009881 	.word	0x08009881
 80098c0:	08009881 	.word	0x08009881
 80098c4:	08009a05 	.word	0x08009a05
 80098c8:	0800992f 	.word	0x0800992f
 80098cc:	080099bf 	.word	0x080099bf
 80098d0:	08009881 	.word	0x08009881
 80098d4:	08009881 	.word	0x08009881
 80098d8:	08009a27 	.word	0x08009a27
 80098dc:	08009881 	.word	0x08009881
 80098e0:	0800992f 	.word	0x0800992f
 80098e4:	08009881 	.word	0x08009881
 80098e8:	08009881 	.word	0x08009881
 80098ec:	080099c7 	.word	0x080099c7
 80098f0:	6833      	ldr	r3, [r6, #0]
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6032      	str	r2, [r6, #0]
 80098f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009900:	2301      	movs	r3, #1
 8009902:	e09d      	b.n	8009a40 <_printf_i+0x1e8>
 8009904:	6833      	ldr	r3, [r6, #0]
 8009906:	6820      	ldr	r0, [r4, #0]
 8009908:	1d19      	adds	r1, r3, #4
 800990a:	6031      	str	r1, [r6, #0]
 800990c:	0606      	lsls	r6, r0, #24
 800990e:	d501      	bpl.n	8009914 <_printf_i+0xbc>
 8009910:	681d      	ldr	r5, [r3, #0]
 8009912:	e003      	b.n	800991c <_printf_i+0xc4>
 8009914:	0645      	lsls	r5, r0, #25
 8009916:	d5fb      	bpl.n	8009910 <_printf_i+0xb8>
 8009918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800991c:	2d00      	cmp	r5, #0
 800991e:	da03      	bge.n	8009928 <_printf_i+0xd0>
 8009920:	232d      	movs	r3, #45	@ 0x2d
 8009922:	426d      	negs	r5, r5
 8009924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009928:	4859      	ldr	r0, [pc, #356]	@ (8009a90 <_printf_i+0x238>)
 800992a:	230a      	movs	r3, #10
 800992c:	e011      	b.n	8009952 <_printf_i+0xfa>
 800992e:	6821      	ldr	r1, [r4, #0]
 8009930:	6833      	ldr	r3, [r6, #0]
 8009932:	0608      	lsls	r0, r1, #24
 8009934:	f853 5b04 	ldr.w	r5, [r3], #4
 8009938:	d402      	bmi.n	8009940 <_printf_i+0xe8>
 800993a:	0649      	lsls	r1, r1, #25
 800993c:	bf48      	it	mi
 800993e:	b2ad      	uxthmi	r5, r5
 8009940:	2f6f      	cmp	r7, #111	@ 0x6f
 8009942:	4853      	ldr	r0, [pc, #332]	@ (8009a90 <_printf_i+0x238>)
 8009944:	6033      	str	r3, [r6, #0]
 8009946:	bf14      	ite	ne
 8009948:	230a      	movne	r3, #10
 800994a:	2308      	moveq	r3, #8
 800994c:	2100      	movs	r1, #0
 800994e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009952:	6866      	ldr	r6, [r4, #4]
 8009954:	60a6      	str	r6, [r4, #8]
 8009956:	2e00      	cmp	r6, #0
 8009958:	bfa2      	ittt	ge
 800995a:	6821      	ldrge	r1, [r4, #0]
 800995c:	f021 0104 	bicge.w	r1, r1, #4
 8009960:	6021      	strge	r1, [r4, #0]
 8009962:	b90d      	cbnz	r5, 8009968 <_printf_i+0x110>
 8009964:	2e00      	cmp	r6, #0
 8009966:	d04b      	beq.n	8009a00 <_printf_i+0x1a8>
 8009968:	4616      	mov	r6, r2
 800996a:	fbb5 f1f3 	udiv	r1, r5, r3
 800996e:	fb03 5711 	mls	r7, r3, r1, r5
 8009972:	5dc7      	ldrb	r7, [r0, r7]
 8009974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009978:	462f      	mov	r7, r5
 800997a:	42bb      	cmp	r3, r7
 800997c:	460d      	mov	r5, r1
 800997e:	d9f4      	bls.n	800996a <_printf_i+0x112>
 8009980:	2b08      	cmp	r3, #8
 8009982:	d10b      	bne.n	800999c <_printf_i+0x144>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	07df      	lsls	r7, r3, #31
 8009988:	d508      	bpl.n	800999c <_printf_i+0x144>
 800998a:	6923      	ldr	r3, [r4, #16]
 800998c:	6861      	ldr	r1, [r4, #4]
 800998e:	4299      	cmp	r1, r3
 8009990:	bfde      	ittt	le
 8009992:	2330      	movle	r3, #48	@ 0x30
 8009994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800999c:	1b92      	subs	r2, r2, r6
 800999e:	6122      	str	r2, [r4, #16]
 80099a0:	f8cd a000 	str.w	sl, [sp]
 80099a4:	464b      	mov	r3, r9
 80099a6:	aa03      	add	r2, sp, #12
 80099a8:	4621      	mov	r1, r4
 80099aa:	4640      	mov	r0, r8
 80099ac:	f7ff fee6 	bl	800977c <_printf_common>
 80099b0:	3001      	adds	r0, #1
 80099b2:	d14a      	bne.n	8009a4a <_printf_i+0x1f2>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	b004      	add	sp, #16
 80099ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	f043 0320 	orr.w	r3, r3, #32
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	4833      	ldr	r0, [pc, #204]	@ (8009a94 <_printf_i+0x23c>)
 80099c8:	2778      	movs	r7, #120	@ 0x78
 80099ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	6831      	ldr	r1, [r6, #0]
 80099d2:	061f      	lsls	r7, r3, #24
 80099d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80099d8:	d402      	bmi.n	80099e0 <_printf_i+0x188>
 80099da:	065f      	lsls	r7, r3, #25
 80099dc:	bf48      	it	mi
 80099de:	b2ad      	uxthmi	r5, r5
 80099e0:	6031      	str	r1, [r6, #0]
 80099e2:	07d9      	lsls	r1, r3, #31
 80099e4:	bf44      	itt	mi
 80099e6:	f043 0320 	orrmi.w	r3, r3, #32
 80099ea:	6023      	strmi	r3, [r4, #0]
 80099ec:	b11d      	cbz	r5, 80099f6 <_printf_i+0x19e>
 80099ee:	2310      	movs	r3, #16
 80099f0:	e7ac      	b.n	800994c <_printf_i+0xf4>
 80099f2:	4827      	ldr	r0, [pc, #156]	@ (8009a90 <_printf_i+0x238>)
 80099f4:	e7e9      	b.n	80099ca <_printf_i+0x172>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	f023 0320 	bic.w	r3, r3, #32
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	e7f6      	b.n	80099ee <_printf_i+0x196>
 8009a00:	4616      	mov	r6, r2
 8009a02:	e7bd      	b.n	8009980 <_printf_i+0x128>
 8009a04:	6833      	ldr	r3, [r6, #0]
 8009a06:	6825      	ldr	r5, [r4, #0]
 8009a08:	6961      	ldr	r1, [r4, #20]
 8009a0a:	1d18      	adds	r0, r3, #4
 8009a0c:	6030      	str	r0, [r6, #0]
 8009a0e:	062e      	lsls	r6, r5, #24
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	d501      	bpl.n	8009a18 <_printf_i+0x1c0>
 8009a14:	6019      	str	r1, [r3, #0]
 8009a16:	e002      	b.n	8009a1e <_printf_i+0x1c6>
 8009a18:	0668      	lsls	r0, r5, #25
 8009a1a:	d5fb      	bpl.n	8009a14 <_printf_i+0x1bc>
 8009a1c:	8019      	strh	r1, [r3, #0]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6123      	str	r3, [r4, #16]
 8009a22:	4616      	mov	r6, r2
 8009a24:	e7bc      	b.n	80099a0 <_printf_i+0x148>
 8009a26:	6833      	ldr	r3, [r6, #0]
 8009a28:	1d1a      	adds	r2, r3, #4
 8009a2a:	6032      	str	r2, [r6, #0]
 8009a2c:	681e      	ldr	r6, [r3, #0]
 8009a2e:	6862      	ldr	r2, [r4, #4]
 8009a30:	2100      	movs	r1, #0
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7f6 fbd4 	bl	80001e0 <memchr>
 8009a38:	b108      	cbz	r0, 8009a3e <_printf_i+0x1e6>
 8009a3a:	1b80      	subs	r0, r0, r6
 8009a3c:	6060      	str	r0, [r4, #4]
 8009a3e:	6863      	ldr	r3, [r4, #4]
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	2300      	movs	r3, #0
 8009a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a48:	e7aa      	b.n	80099a0 <_printf_i+0x148>
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4640      	mov	r0, r8
 8009a52:	47d0      	blx	sl
 8009a54:	3001      	adds	r0, #1
 8009a56:	d0ad      	beq.n	80099b4 <_printf_i+0x15c>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	079b      	lsls	r3, r3, #30
 8009a5c:	d413      	bmi.n	8009a86 <_printf_i+0x22e>
 8009a5e:	68e0      	ldr	r0, [r4, #12]
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	4298      	cmp	r0, r3
 8009a64:	bfb8      	it	lt
 8009a66:	4618      	movlt	r0, r3
 8009a68:	e7a6      	b.n	80099b8 <_printf_i+0x160>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4640      	mov	r0, r8
 8009a72:	47d0      	blx	sl
 8009a74:	3001      	adds	r0, #1
 8009a76:	d09d      	beq.n	80099b4 <_printf_i+0x15c>
 8009a78:	3501      	adds	r5, #1
 8009a7a:	68e3      	ldr	r3, [r4, #12]
 8009a7c:	9903      	ldr	r1, [sp, #12]
 8009a7e:	1a5b      	subs	r3, r3, r1
 8009a80:	42ab      	cmp	r3, r5
 8009a82:	dcf2      	bgt.n	8009a6a <_printf_i+0x212>
 8009a84:	e7eb      	b.n	8009a5e <_printf_i+0x206>
 8009a86:	2500      	movs	r5, #0
 8009a88:	f104 0619 	add.w	r6, r4, #25
 8009a8c:	e7f5      	b.n	8009a7a <_printf_i+0x222>
 8009a8e:	bf00      	nop
 8009a90:	08009c05 	.word	0x08009c05
 8009a94:	08009c16 	.word	0x08009c16

08009a98 <memmove>:
 8009a98:	4288      	cmp	r0, r1
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	eb01 0402 	add.w	r4, r1, r2
 8009aa0:	d902      	bls.n	8009aa8 <memmove+0x10>
 8009aa2:	4284      	cmp	r4, r0
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	d807      	bhi.n	8009ab8 <memmove+0x20>
 8009aa8:	1e43      	subs	r3, r0, #1
 8009aaa:	42a1      	cmp	r1, r4
 8009aac:	d008      	beq.n	8009ac0 <memmove+0x28>
 8009aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ab6:	e7f8      	b.n	8009aaa <memmove+0x12>
 8009ab8:	4402      	add	r2, r0
 8009aba:	4601      	mov	r1, r0
 8009abc:	428a      	cmp	r2, r1
 8009abe:	d100      	bne.n	8009ac2 <memmove+0x2a>
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aca:	e7f7      	b.n	8009abc <memmove+0x24>

08009acc <_sbrk_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d06      	ldr	r5, [pc, #24]	@ (8009ae8 <_sbrk_r+0x1c>)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	4608      	mov	r0, r1
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	f7f7 f9f4 	bl	8000ec4 <_sbrk>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d102      	bne.n	8009ae6 <_sbrk_r+0x1a>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	b103      	cbz	r3, 8009ae6 <_sbrk_r+0x1a>
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	20001fc8 	.word	0x20001fc8

08009aec <memcpy>:
 8009aec:	440a      	add	r2, r1
 8009aee:	4291      	cmp	r1, r2
 8009af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009af4:	d100      	bne.n	8009af8 <memcpy+0xc>
 8009af6:	4770      	bx	lr
 8009af8:	b510      	push	{r4, lr}
 8009afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b02:	4291      	cmp	r1, r2
 8009b04:	d1f9      	bne.n	8009afa <memcpy+0xe>
 8009b06:	bd10      	pop	{r4, pc}

08009b08 <_realloc_r>:
 8009b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	4615      	mov	r5, r2
 8009b10:	460c      	mov	r4, r1
 8009b12:	b921      	cbnz	r1, 8009b1e <_realloc_r+0x16>
 8009b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	4611      	mov	r1, r2
 8009b1a:	f7ff bc4b 	b.w	80093b4 <_malloc_r>
 8009b1e:	b92a      	cbnz	r2, 8009b2c <_realloc_r+0x24>
 8009b20:	f7ff fbdc 	bl	80092dc <_free_r>
 8009b24:	2400      	movs	r4, #0
 8009b26:	4620      	mov	r0, r4
 8009b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b2c:	f000 f81a 	bl	8009b64 <_malloc_usable_size_r>
 8009b30:	4285      	cmp	r5, r0
 8009b32:	4606      	mov	r6, r0
 8009b34:	d802      	bhi.n	8009b3c <_realloc_r+0x34>
 8009b36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b3a:	d8f4      	bhi.n	8009b26 <_realloc_r+0x1e>
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	4640      	mov	r0, r8
 8009b40:	f7ff fc38 	bl	80093b4 <_malloc_r>
 8009b44:	4607      	mov	r7, r0
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0ec      	beq.n	8009b24 <_realloc_r+0x1c>
 8009b4a:	42b5      	cmp	r5, r6
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4621      	mov	r1, r4
 8009b50:	bf28      	it	cs
 8009b52:	4632      	movcs	r2, r6
 8009b54:	f7ff ffca 	bl	8009aec <memcpy>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	f7ff fbbe 	bl	80092dc <_free_r>
 8009b60:	463c      	mov	r4, r7
 8009b62:	e7e0      	b.n	8009b26 <_realloc_r+0x1e>

08009b64 <_malloc_usable_size_r>:
 8009b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b68:	1f18      	subs	r0, r3, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bfbc      	itt	lt
 8009b6e:	580b      	ldrlt	r3, [r1, r0]
 8009b70:	18c0      	addlt	r0, r0, r3
 8009b72:	4770      	bx	lr

08009b74 <_init>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr

08009b80 <_fini>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr
