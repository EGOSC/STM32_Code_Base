
LED_Blinking_M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080089d8  080089d8  000099d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a38  08008a38  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a38  08008a38  00009a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a40  08008a40  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a40  08008a40  00009a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a44  08008a44  00009a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008a48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d24  200000fc  08008b44  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e20  08008b44  0000ae20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017292  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003608  00000000  00000000  000213be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  000249c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5f  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5a3  00000000  00000000  00026d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ef2  00000000  00000000  000412b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dc01  00000000  00000000  0005a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  000f7de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000fd1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080089c0 	.word	0x080089c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080089c0 	.word	0x080089c0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc92 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f832 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9fc 	bl	80008d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d8:	f000 f896 	bl	8000608 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004dc:	f000 f8e6 	bl	80006ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e0:	f000 f980 	bl	80007e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f9ca 	bl	800087c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f007 fd54 	bl	8007f94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    /*Method 1 Code */
		*(GPIOC_ODR) &= ~(0x1 << (LED_PIN));
 80004ec:	4b10      	ldr	r3, [pc, #64]	@ (8000530 <main+0x68>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000530 <main+0x68>)
 80004f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80004f6:	6013      	str	r3, [r2, #0]
		*(GPIOC_ODR) |= 0x1 << (LED_PIN);
 80004f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <main+0x68>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000530 <main+0x68>)
 80004fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000502:	6013      	str	r3, [r2, #0]

		/*Method 2 Code*/
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	480a      	ldr	r0, [pc, #40]	@ (8000534 <main+0x6c>)
 800050c:	f001 fa10 	bl	8001930 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000510:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000514:	f000 fce0 	bl	8000ed8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <main+0x6c>)
 8000520:	f001 fa06 	bl	8001930 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000524:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000528:	f000 fcd6 	bl	8000ed8 <HAL_Delay>
		*(GPIOC_ODR) &= ~(0x1 << (LED_PIN));
 800052c:	bf00      	nop
 800052e:	e7dd      	b.n	80004ec <main+0x24>
 8000530:	40020814 	.word	0x40020814
 8000534:	40020800 	.word	0x40020800

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	@ 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 fa0e 	bl	8008968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a26      	ldr	r2, [pc, #152]	@ (8000600 <SystemClock_Config+0xc8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
 800056c:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a20      	ldr	r2, [pc, #128]	@ (8000604 <SystemClock_Config+0xcc>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a8:	2319      	movs	r3, #25
 80005aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ac:	23c0      	movs	r3, #192	@ 0xc0
 80005ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fc23 	bl	8002e08 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f9f0 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2103      	movs	r1, #3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fe85 	bl	80032f8 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 f9da 	bl	80009ac <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	@ 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <MX_ADC1_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <MX_ADC1_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_ADC1_Init+0x98>)
 8000622:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_ADC1_Init+0x98>)
 800064a:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <MX_ADC1_Init+0xa0>)
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_ADC1_Init+0x98>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_ADC1_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <MX_ADC1_Init+0x98>)
 800066a:	f000 fc59 	bl	8000f20 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 f99a 	bl	80009ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000678:	2301      	movs	r3, #1
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_ADC1_Init+0x98>)
 800068a:	f000 fc8d 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000694:	f000 f98a 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000118 	.word	0x20000118
 80006a4:	40012000 	.word	0x40012000
 80006a8:	0f000001 	.word	0x0f000001

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b092      	sub	sp, #72	@ 0x48
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2220      	movs	r2, #32
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 f946 	bl	8008968 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006dc:	4b3f      	ldr	r3, [pc, #252]	@ (80007dc <MX_TIM1_Init+0x130>)
 80006de:	4a40      	ldr	r2, [pc, #256]	@ (80007e0 <MX_TIM1_Init+0x134>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006e2:	4b3e      	ldr	r3, [pc, #248]	@ (80007dc <MX_TIM1_Init+0x130>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b3c      	ldr	r3, [pc, #240]	@ (80007dc <MX_TIM1_Init+0x130>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006ee:	4b3b      	ldr	r3, [pc, #236]	@ (80007dc <MX_TIM1_Init+0x130>)
 80006f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b39      	ldr	r3, [pc, #228]	@ (80007dc <MX_TIM1_Init+0x130>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006fc:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_TIM1_Init+0x130>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <MX_TIM1_Init+0x130>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000708:	4834      	ldr	r0, [pc, #208]	@ (80007dc <MX_TIM1_Init+0x130>)
 800070a:	f003 f824 	bl	8003756 <HAL_TIM_PWM_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000714:	f000 f94a 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000720:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000724:	4619      	mov	r1, r3
 8000726:	482d      	ldr	r0, [pc, #180]	@ (80007dc <MX_TIM1_Init+0x130>)
 8000728:	f003 fdc2 	bl	80042b0 <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000732:	f000 f93b 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000736:	2360      	movs	r3, #96	@ 0x60
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073e:	2300      	movs	r3, #0
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000742:	2300      	movs	r3, #0
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000756:	2200      	movs	r2, #0
 8000758:	4619      	mov	r1, r3
 800075a:	4820      	ldr	r0, [pc, #128]	@ (80007dc <MX_TIM1_Init+0x130>)
 800075c:	f003 f93a 	bl	80039d4 <HAL_TIM_PWM_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000766:	f000 f921 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	2204      	movs	r2, #4
 8000770:	4619      	mov	r1, r3
 8000772:	481a      	ldr	r0, [pc, #104]	@ (80007dc <MX_TIM1_Init+0x130>)
 8000774:	f003 f92e 	bl	80039d4 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800077e:	f000 f915 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	2208      	movs	r2, #8
 8000788:	4619      	mov	r1, r3
 800078a:	4814      	ldr	r0, [pc, #80]	@ (80007dc <MX_TIM1_Init+0x130>)
 800078c:	f003 f922 	bl	80039d4 <HAL_TIM_PWM_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000796:	f000 f909 	bl	80009ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	@ (80007dc <MX_TIM1_Init+0x130>)
 80007c0:	f003 fde4 	bl	800438c <HAL_TIMEx_ConfigBreakDeadTime>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80007ca:	f000 f8ef 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_TIM1_Init+0x130>)
 80007d0:	f000 f9cc 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 80007d4:	bf00      	nop
 80007d6:	3748      	adds	r7, #72	@ 0x48
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000160 	.word	0x20000160
 80007e0:	40010000 	.word	0x40010000

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_TIM2_Init+0x94>)
 8000802:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_TIM2_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_TIM2_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_TIM2_Init+0x94>)
 8000816:	f04f 32ff 	mov.w	r2, #4294967295
 800081a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_TIM2_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_TIM2_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <MX_TIM2_Init+0x94>)
 800082a:	f002 ff45 	bl	80036b8 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000834:	f000 f8ba 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <MX_TIM2_Init+0x94>)
 8000846:	f003 f987 	bl	8003b58 <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 f8ac 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_TIM2_Init+0x94>)
 8000862:	f003 fd25 	bl	80042b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f89e 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200001a8 	.word	0x200001a8

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f003 fdd0 	bl	8004458 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f875 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001f0 	.word	0x200001f0
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a2c      	ldr	r2, [pc, #176]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a25      	ldr	r2, [pc, #148]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a1e      	ldr	r2, [pc, #120]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	4811      	ldr	r0, [pc, #68]	@ (80009a4 <MX_GPIO_Init+0xd4>)
 800095e:	f000 ffe7 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <MX_GPIO_Init+0xd4>)
 800097c:	f000 fe54 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_SW_Pin */
  GPIO_InitStruct.Pin = USR_SW_Pin;
 8000980:	2301      	movs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_SW_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_GPIO_Init+0xd8>)
 8000994:	f000 fe48 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	@ 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <HAL_ADC_MspInit+0x7c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d127      	bne.n	8000a7a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <HAL_ADC_MspInit+0x84>)
 8000a76:	f000 fdd7 	bl	8001628 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40012000 	.word	0x40012000
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	@ (8000b14 <HAL_TIM_PWM_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x88>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x88>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x88>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x88>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <HAL_TIM_PWM_MspInit+0x8c>)
 8000b08:	f000 fd8e 	bl	8001628 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	@ 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b30:	d115      	bne.n	8000b5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_TIM_Base_MspInit+0x48>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b68 <HAL_TIM_Base_MspInit+0x48>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_TIM_Base_MspInit+0x48>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	201c      	movs	r0, #28
 8000b54:	f000 fd31 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b58:	201c      	movs	r0, #28
 8000b5a:	f000 fd4a 	bl	80015f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a22      	ldr	r2, [pc, #136]	@ (8000c14 <HAL_TIM_MspPostInit+0xa8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d13d      	bne.n	8000c0a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <HAL_TIM_MspPostInit+0xac>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a20      	ldr	r2, [pc, #128]	@ (8000c18 <HAL_TIM_MspPostInit+0xac>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <HAL_TIM_MspPostInit+0xac>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_TIM_MspPostInit+0xac>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <HAL_TIM_MspPostInit+0xac>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <HAL_TIM_MspPostInit+0xac>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bc6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <HAL_TIM_MspPostInit+0xb0>)
 8000be4:	f000 fd20 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000be8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <HAL_TIM_MspPostInit+0xb4>)
 8000c06:	f000 fd0f 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a28      	ldr	r2, [pc, #160]	@ (8000ce4 <HAL_UART_MspInit+0xc0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d14a      	bne.n	8000cdc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a26      	ldr	r2, [pc, #152]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cac:	2307      	movs	r3, #7
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	@ (8000cec <HAL_UART_MspInit+0xc8>)
 8000cb8:	f000 fcb6 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	@ (8000cf0 <HAL_UART_MspInit+0xcc>)
 8000cd8:	f000 fca6 	bl	8001628 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	@ 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40011000 	.word	0x40011000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f8a5 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <TIM2_IRQHandler+0x10>)
 8000d5a:	f002 fd4b 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200001a8 	.word	0x200001a8

08000d68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <OTG_FS_IRQHandler+0x10>)
 8000d6e:	f000 ff3c 	bl	8001bea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000171c 	.word	0x2000171c

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f007 fdd3 	bl	8008978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fb79 	bl	80004c8 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000de4:	08008a48 	.word	0x08008a48
  ldr r2, =_sbss
 8000de8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000dec:	20001e20 	.word	0x20001e20

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 fbc1 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fdc6 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fbd9 	bl	800160e <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 fba1 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000238 	.word	0x20000238

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000238 	.word	0x20000238

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e033      	b.n	8000f9e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d109      	bne.n	8000f52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fd62 	bl	8000a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f66:	f023 0302 	bic.w	r3, r3, #2
 8000f6a:	f043 0202 	orr.w	r2, r3, #2
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f94a 	bl	800120c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f8e:	e001      	b.n	8000f94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1c>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e113      	b.n	80011ec <HAL_ADC_ConfigChannel+0x244>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b09      	cmp	r3, #9
 8000fd2:	d925      	bls.n	8001020 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68d9      	ldr	r1, [r3, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b1e      	subs	r3, #30
 8000fea:	2207      	movs	r2, #7
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68d9      	ldr	r1, [r3, #12]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	4603      	mov	r3, r0
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4403      	add	r3, r0
 8001012:	3b1e      	subs	r3, #30
 8001014:	409a      	lsls	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	e022      	b.n	8001066 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6919      	ldr	r1, [r3, #16]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	2207      	movs	r2, #7
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	400a      	ands	r2, r1
 8001042:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6919      	ldr	r1, [r3, #16]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	4603      	mov	r3, r0
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4403      	add	r3, r0
 800105c:	409a      	lsls	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b06      	cmp	r3, #6
 800106c:	d824      	bhi.n	80010b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b05      	subs	r3, #5
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b05      	subs	r3, #5
 80010aa:	fa00 f203 	lsl.w	r2, r0, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010b6:	e04c      	b.n	8001152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d824      	bhi.n	800110a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	3b23      	subs	r3, #35	@ 0x23
 80010d2:	221f      	movs	r2, #31
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43da      	mvns	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	400a      	ands	r2, r1
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	3b23      	subs	r3, #35	@ 0x23
 80010fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
 8001108:	e023      	b.n	8001152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b41      	subs	r3, #65	@ 0x41
 800111c:	221f      	movs	r2, #31
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	400a      	ands	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b41      	subs	r3, #65	@ 0x41
 8001146:	fa00 f203 	lsl.w	r2, r0, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001152:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <HAL_ADC_ConfigChannel+0x250>)
 8001154:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <HAL_ADC_ConfigChannel+0x254>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d10f      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1d8>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b12      	cmp	r3, #18
 8001166:	d10b      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_ADC_ConfigChannel+0x254>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12b      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x23a>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_ADC_ConfigChannel+0x258>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_ADC_ConfigChannel+0x1f4>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b11      	cmp	r3, #17
 800119a:	d122      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_ADC_ConfigChannel+0x258>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d111      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_ADC_ConfigChannel+0x25c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <HAL_ADC_ConfigChannel+0x260>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	0c9a      	lsrs	r2, r3, #18
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40012300 	.word	0x40012300
 80011fc:	40012000 	.word	0x40012000
 8001200:	10000012 	.word	0x10000012
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83

0800120c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001214:	4b79      	ldr	r3, [pc, #484]	@ (80013fc <ADC_Init+0x1f0>)
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6859      	ldr	r1, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6899      	ldr	r1, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129e:	4a58      	ldr	r2, [pc, #352]	@ (8001400 <ADC_Init+0x1f4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d022      	beq.n	80012ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6899      	ldr	r1, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	e00f      	b.n	800130a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001308:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0202 	bic.w	r2, r2, #2
 8001318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6899      	ldr	r1, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e1b      	ldrb	r3, [r3, #24]
 8001324:	005a      	lsls	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01b      	beq.n	8001370 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001346:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001356:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6859      	ldr	r1, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	3b01      	subs	r3, #1
 8001364:	035a      	lsls	r2, r3, #13
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	e007      	b.n	8001380 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800137e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800138e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	3b01      	subs	r3, #1
 800139c:	051a      	lsls	r2, r3, #20
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6899      	ldr	r1, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013c2:	025a      	lsls	r2, r3, #9
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6899      	ldr	r1, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	029a      	lsls	r2, r3, #10
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	609a      	str	r2, [r3, #8]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40012300 	.word	0x40012300
 8001400:	0f000001 	.word	0x0f000001

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	@ (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e159      	b.n	80018f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8148 	bne.w	80018f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d005      	beq.n	800167a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	2b02      	cmp	r3, #2
 8001678:	d130      	bne.n	80016dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 0201 	and.w	r2, r3, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d017      	beq.n	8001718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80a2 	beq.w	80018f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b57      	ldr	r3, [pc, #348]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a56      	ldr	r2, [pc, #344]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b54      	ldr	r3, [pc, #336]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ca:	4a52      	ldr	r2, [pc, #328]	@ (8001914 <HAL_GPIO_Init+0x2ec>)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a49      	ldr	r2, [pc, #292]	@ (8001918 <HAL_GPIO_Init+0x2f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x202>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a48      	ldr	r2, [pc, #288]	@ (800191c <HAL_GPIO_Init+0x2f4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x1fe>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a47      	ldr	r2, [pc, #284]	@ (8001920 <HAL_GPIO_Init+0x2f8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x1fa>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a46      	ldr	r2, [pc, #280]	@ (8001924 <HAL_GPIO_Init+0x2fc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x1f6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a45      	ldr	r2, [pc, #276]	@ (8001928 <HAL_GPIO_Init+0x300>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x1f2>
 8001816:	2304      	movs	r3, #4
 8001818:	e008      	b.n	800182c <HAL_GPIO_Init+0x204>
 800181a:	2307      	movs	r3, #7
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x204>
 800181e:	2303      	movs	r3, #3
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x204>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x204>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x204>
 800182a:	2300      	movs	r3, #0
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183c:	4935      	ldr	r1, [pc, #212]	@ (8001914 <HAL_GPIO_Init+0x2ec>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_GPIO_Init+0x304>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186e:	4a2f      	ldr	r2, [pc, #188]	@ (800192c <HAL_GPIO_Init+0x304>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001874:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <HAL_GPIO_Init+0x304>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <HAL_GPIO_Init+0x304>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c2:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ec:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	f67f aea2 	bls.w	8001644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40013800 	.word	0x40013800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020800 	.word	0x40020800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40021000 	.word	0x40021000
 800192c:	40013c00 	.word	0x40013c00

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800194c:	e003      	b.n	8001956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	041a      	lsls	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	619a      	str	r2, [r3, #24]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af02      	add	r7, sp, #8
 8001968:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e101      	b.n	8001b78 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f006 fce0 	bl	8008354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019a2:	d102      	bne.n	80019aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 f92d 	bl	8004c0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7c1a      	ldrb	r2, [r3, #16]
 80019bc:	f88d 2000 	strb.w	r2, [sp]
 80019c0:	3304      	adds	r3, #4
 80019c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c4:	f003 f80c 	bl	80049e0 <USB_CoreInit>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ce      	b.n	8001b78 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 f925 	bl	8004c30 <USB_SetCurrentMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0bf      	b.n	8001b78 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e04a      	b.n	8001a94 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3315      	adds	r3, #21
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	3314      	adds	r3, #20
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	b298      	uxth	r0, r3
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	332e      	adds	r3, #46	@ 0x2e
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3318      	adds	r3, #24
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	331c      	adds	r3, #28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	3320      	adds	r3, #32
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3324      	adds	r3, #36	@ 0x24
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	3301      	adds	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3af      	bcc.n	80019fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e044      	b.n	8001b2e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	791b      	ldrb	r3, [r3, #4]
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3b5      	bcc.n	8001aa4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7c1a      	ldrb	r2, [r3, #16]
 8001b40:	f88d 2000 	strb.w	r2, [sp]
 8001b44:	3304      	adds	r3, #4
 8001b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b48:	f003 f8be 	bl	8004cc8 <USB_DevInit>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00c      	b.n	8001b78 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 f908 	bl	8005d86 <USB_DevDisconnect>

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_PCD_Start+0x1c>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e022      	b.n	8001be2 <HAL_PCD_Start+0x62>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 f80f 	bl	8004bec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 f8b6 	bl	8005d44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bea:	b590      	push	{r4, r7, lr}
 8001bec:	b08d      	sub	sp, #52	@ 0x34
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 f974 	bl	8005eee <USB_GetMode>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 848c 	bne.w	8002526 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f8d8 	bl	8005dc8 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8482 	beq.w	8002524 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 f8c5 	bl	8005dc8 <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d107      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f002 0202 	and.w	r2, r2, #2
 8001c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 f8b3 	bl	8005dc8 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d161      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0210 	bic.w	r2, r2, #16
 8001c7a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	3304      	adds	r3, #4
 8001c9a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	0c5b      	lsrs	r3, r3, #17
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d124      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d035      	beq.n	8001d20 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6a38      	ldr	r0, [r7, #32]
 8001cc8:	f003 feea 	bl	8005aa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd8:	441a      	add	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cea:	441a      	add	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	e016      	b.n	8001d20 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	0c5b      	lsrs	r3, r3, #17
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d110      	bne.n	8001d20 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d04:	2208      	movs	r2, #8
 8001d06:	4619      	mov	r1, r3
 8001d08:	6a38      	ldr	r0, [r7, #32]
 8001d0a:	f003 fec9 	bl	8005aa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d1a:	441a      	add	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0210 	orr.w	r2, r2, #16
 8001d2e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 f847 	bl	8005dc8 <USB_ReadInterrupts>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001d44:	f040 80a7 	bne.w	8001e96 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 f84c 	bl	8005dee <USB_ReadDevAllOutEpInterrupt>
 8001d56:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001d58:	e099      	b.n	8001e8e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 808e 	beq.w	8001e82 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 f870 	bl	8005e56 <USB_ReadDevOutEPInterrupt>
 8001d76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00c      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2301      	movs	r3, #1
 8001d92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fea4 	bl	8002ae4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001db2:	461a      	mov	r2, r3
 8001db4:	2308      	movs	r3, #8
 8001db6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001db8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 ff7a 	bl	8002cb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2310      	movs	r3, #16
 8001dda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d030      	beq.n	8001e48 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	2b80      	cmp	r3, #128	@ 0x80
 8001df0:	d109      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e04:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	78db      	ldrb	r3, [r3, #3]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d108      	bne.n	8001e36 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2200      	movs	r2, #0
 8001e28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f006 fb8b 	bl	800854c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e42:	461a      	mov	r2, r3
 8001e44:	2302      	movs	r3, #2
 8001e46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2320      	movs	r3, #32
 8001e62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f47f af62 	bne.w	8001d5a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 ff94 	bl	8005dc8 <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ea6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001eaa:	f040 80db 	bne.w	8002064 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 ffb5 	bl	8005e22 <USB_ReadDevAllInEpInterrupt>
 8001eb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001ebe:	e0cd      	b.n	800205c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80c2 	beq.w	8002050 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 ffdb 	bl	8005e92 <USB_ReadDevInEPInterrupt>
 8001edc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d057      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	2201      	movs	r2, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69f9      	ldr	r1, [r7, #28]
 8001f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f08:	4013      	ands	r3, r2
 8001f0a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	799b      	ldrb	r3, [r3, #6]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d132      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	3320      	adds	r3, #32
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4403      	add	r3, r0
 8001f46:	331c      	adds	r3, #28
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4419      	add	r1, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4403      	add	r3, r0
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d113      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x3a2>
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3324      	adds	r3, #36	@ 0x24
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f84:	461a      	mov	r2, r3
 8001f86:	2101      	movs	r1, #1
 8001f88:	f003 ffe2 	bl	8005f50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f006 fa5f 	bl	8008456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2310      	movs	r3, #16
 8001fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2340      	movs	r3, #64	@ 0x40
 8001fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d023      	beq.n	800203e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ff8:	6a38      	ldr	r0, [r7, #32]
 8001ffa:	f002 ffc9 	bl	8004f90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	3310      	adds	r3, #16
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	78db      	ldrb	r3, [r3, #3]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d108      	bne.n	800202c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2200      	movs	r2, #0
 800201e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f006 faa2 	bl	8008570 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002038:	461a      	mov	r2, r3
 800203a:	2302      	movs	r3, #2
 800203c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fcbd 	bl	80029ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	3301      	adds	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002058:	085b      	lsrs	r3, r3, #1
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	f47f af2e 	bne.w	8001ec0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fead 	bl	8005dc8 <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002078:	d122      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020a0:	2100      	movs	r1, #0
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fea4 	bl	8002df0 <HAL_PCDEx_LPM_Callback>
 80020a8:	e002      	b.n	80020b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f006 fa40 	bl	8008530 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80020be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fe7f 	bl	8005dc8 <USB_ReadInterrupts>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020d4:	d112      	bne.n	80020fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f006 f9fc 	bl	80084e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80020fa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fe61 	bl	8005dc8 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800210c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002110:	f040 80b7 	bne.w	8002282 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2110      	movs	r1, #16
 800212e:	4618      	mov	r0, r3
 8002130:	f002 ff2e 	bl	8004f90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002138:	e046      	b.n	80021c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800213a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002146:	461a      	mov	r2, r3
 8002148:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800214c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800214e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800215e:	0151      	lsls	r1, r2, #5
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	440a      	add	r2, r1
 8002164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002168:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800216c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800216e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002180:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002192:	0151      	lsls	r1, r2, #5
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	440a      	add	r2, r1
 8002198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800219c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b2:	0151      	lsls	r1, r2, #5
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	440a      	add	r2, r1
 80021b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c4:	3301      	adds	r3, #1
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	791b      	ldrb	r3, [r3, #4]
 80021cc:	461a      	mov	r2, r3
 80021ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d3b2      	bcc.n	800213a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021e2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80021e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7bdb      	ldrb	r3, [r3, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002200:	f043 030b 	orr.w	r3, r3, #11
 8002204:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002216:	f043 030b 	orr.w	r3, r3, #11
 800221a:	6453      	str	r3, [r2, #68]	@ 0x44
 800221c:	e015      	b.n	800224a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800222c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002230:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002234:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002244:	f043 030b 	orr.w	r3, r3, #11
 8002248:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002258:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800225c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800226c:	461a      	mov	r2, r3
 800226e:	f003 fe6f 	bl	8005f50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fd9e 	bl	8005dc8 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002296:	d123      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 fe34 	bl	8005f0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 feeb 	bl	8005082 <USB_GetDevSpeed>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681c      	ldr	r4, [r3, #0]
 80022b8:	f001 f9ca 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 80022bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022c2:	461a      	mov	r2, r3
 80022c4:	4620      	mov	r0, r4
 80022c6:	f002 fbef 	bl	8004aa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f006 f8eb 	bl	80084a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80022de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fd6f 	bl	8005dc8 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d10a      	bne.n	800230a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f006 f8c8 	bl	800848a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 0208 	and.w	r2, r2, #8
 8002308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fd5a 	bl	8005dc8 <USB_ReadInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231a:	2b80      	cmp	r3, #128	@ 0x80
 800231c:	d123      	bne.n	8002366 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800232a:	2301      	movs	r3, #1
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
 800232e:	e014      	b.n	800235a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fb0a 	bl	8002968 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	3301      	adds	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	791b      	ldrb	r3, [r3, #4]
 800235e:	461a      	mov	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	4293      	cmp	r3, r2
 8002364:	d3e4      	bcc.n	8002330 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 fd2c 	bl	8005dc8 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800237a:	d13c      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800237c:	2301      	movs	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002380:	e02b      	b.n	80023da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	3318      	adds	r3, #24
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d115      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da12      	bge.n	80023d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3317      	adds	r3, #23
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 faca 	bl	8002968 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	3301      	adds	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	791b      	ldrb	r3, [r3, #4]
 80023de:	461a      	mov	r2, r3
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d3cd      	bcc.n	8002382 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fce4 	bl	8005dc8 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800240a:	d156      	bne.n	80024ba <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800240c:	2301      	movs	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002410:	e045      	b.n	800249e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d12e      	bne.n	8002498 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800243a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800243c:	2b00      	cmp	r3, #0
 800243e:	da2b      	bge.n	8002498 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800244c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002450:	429a      	cmp	r2, r3
 8002452:	d121      	bne.n	8002498 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002490:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002494:	6053      	str	r3, [r2, #4]
            break;
 8002496:	e008      	b.n	80024aa <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	3301      	adds	r3, #1
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	791b      	ldrb	r3, [r3, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d3b3      	bcc.n	8002412 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80024b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fc82 	bl	8005dc8 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ce:	d10a      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f006 f85f 	bl	8008594 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80024e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fc6c 	bl	8005dc8 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d115      	bne.n	8002526 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f006 f84f 	bl	80085b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	e000      	b.n	8002526 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002524:	bf00      	nop
    }
  }
}
 8002526:	3734      	adds	r7, #52	@ 0x34
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}

0800252c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_PCD_SetAddress+0x1a>
 8002542:	2302      	movs	r3, #2
 8002544:	e012      	b.n	800256c <HAL_PCD_SetAddress+0x40>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fbcb 	bl	8005cf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	70fb      	strb	r3, [r7, #3]
 8002586:	460b      	mov	r3, r1
 8002588:	803b      	strh	r3, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da0f      	bge.n	80025ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 020f 	and.w	r2, r3, #15
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	3310      	adds	r3, #16
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	705a      	strb	r2, [r3, #1]
 80025b8:	e00f      	b.n	80025da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80025e6:	883b      	ldrh	r3, [r7, #0]
 80025e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	78ba      	ldrb	r2, [r7, #2]
 80025f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002608:	78bb      	ldrb	r3, [r7, #2]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d102      	bne.n	8002614 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_PCD_EP_Open+0xae>
 800261e:	2302      	movs	r3, #2
 8002620:	e00e      	b.n	8002640 <HAL_PCD_EP_Open+0xcc>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68f9      	ldr	r1, [r7, #12]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fd4b 	bl	80050cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800263e:	7afb      	ldrb	r3, [r7, #11]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002658:	2b00      	cmp	r3, #0
 800265a:	da0f      	bge.n	800267c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	3310      	adds	r3, #16
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	705a      	strb	r2, [r3, #1]
 800267a:	e00f      	b.n	800269c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_PCD_EP_Close+0x6e>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e00e      	b.n	80026d4 <HAL_PCD_EP_Close+0x8c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 fd89 	bl	80051dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	f003 020f 	and.w	r2, r3, #15
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	3304      	adds	r3, #4
 8002704:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2200      	movs	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2200      	movs	r2, #0
 800271c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	b2da      	uxtb	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	799b      	ldrb	r3, [r3, #6]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	799b      	ldrb	r3, [r3, #6]
 8002740:	461a      	mov	r2, r3
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	f002 fe26 	bl	8005394 <USB_EPStartXfer>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002774:	681b      	ldr	r3, [r3, #0]
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	460b      	mov	r3, r1
 8002790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002792:	7afb      	ldrb	r3, [r7, #11]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	3310      	adds	r3, #16
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2200      	movs	r2, #0
 80027ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2201      	movs	r2, #1
 80027c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c2:	7afb      	ldrb	r3, [r7, #11]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	799b      	ldrb	r3, [r3, #6]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	799b      	ldrb	r3, [r3, #6]
 80027e4:	461a      	mov	r2, r3
 80027e6:	6979      	ldr	r1, [r7, #20]
 80027e8:	f002 fdd4 	bl	8005394 <USB_EPStartXfer>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	7912      	ldrb	r2, [r2, #4]
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e04f      	b.n	80028b4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002818:	2b00      	cmp	r3, #0
 800281a:	da0f      	bge.n	800283c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	3310      	adds	r3, #16
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	705a      	strb	r2, [r3, #1]
 800283a:	e00d      	b.n	8002858 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_PCD_EP_SetStall+0x82>
 8002874:	2302      	movs	r3, #2
 8002876:	e01d      	b.n	80028b4 <HAL_PCD_EP_SetStall+0xbe>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	4618      	mov	r0, r3
 8002888:	f003 f962 	bl	8005b50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7999      	ldrb	r1, [r3, #6]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028a4:	461a      	mov	r2, r3
 80028a6:	f003 fb53 	bl	8005f50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	7912      	ldrb	r2, [r2, #4]
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e042      	b.n	8002960 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da0f      	bge.n	8002902 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	3310      	adds	r3, #16
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	3304      	adds	r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	705a      	strb	r2, [r3, #1]
 8002900:	e00f      	b.n	8002922 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	3304      	adds	r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_PCD_EP_ClrStall+0x86>
 800293e:	2302      	movs	r3, #2
 8002940:	e00e      	b.n	8002960 <HAL_PCD_EP_ClrStall+0xa4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 f96b 	bl	8005c2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002978:	2b00      	cmp	r3, #0
 800297a:	da0c      	bge.n	8002996 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	3310      	adds	r3, #16
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e00c      	b.n	80029b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 020f 	and.w	r2, r3, #15
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 ff8a 	bl	80058d0 <USB_EPStopXfer>
 80029bc:	4603      	mov	r3, r0
 80029be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029c0:	7afb      	ldrb	r3, [r7, #11]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b08a      	sub	sp, #40	@ 0x28
 80029ce:	af02      	add	r7, sp, #8
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	3310      	adds	r3, #16
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	3304      	adds	r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d901      	bls.n	8002a02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06b      	b.n	8002ada <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d902      	bls.n	8002a1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3303      	adds	r3, #3
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a26:	e02a      	b.n	8002a7e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d902      	bls.n	8002a44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3303      	adds	r3, #3
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6978      	ldr	r0, [r7, #20]
 8002a62:	f002 ffdf 	bl	8005a24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d809      	bhi.n	8002aa8 <PCD_WriteEmptyTxFifo+0xde>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d203      	bcs.n	8002aa8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1bf      	bne.n	8002a28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d811      	bhi.n	8002ad8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	6939      	ldr	r1, [r7, #16]
 8002ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	333c      	adds	r3, #60	@ 0x3c
 8002afc:	3304      	adds	r3, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	799b      	ldrb	r3, [r3, #6]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d17b      	bne.n	8002c12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4a61      	ldr	r2, [pc, #388]	@ (8002cac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	f240 80b9 	bls.w	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80b3 	beq.w	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b46:	461a      	mov	r2, r3
 8002b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b4c:	6093      	str	r3, [r2, #8]
 8002b4e:	e0a7      	b.n	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b66:	461a      	mov	r2, r3
 8002b68:	2320      	movs	r3, #32
 8002b6a:	6093      	str	r3, [r2, #8]
 8002b6c:	e098      	b.n	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 8093 	bne.w	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002cac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d90f      	bls.n	8002ba2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	e07e      	b.n	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	1ad2      	subs	r2, r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d114      	bne.n	8002c04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bec:	461a      	mov	r2, r3
 8002bee:	2101      	movs	r1, #1
 8002bf0:	f003 f9ae 	bl	8005f50 <USB_EP0_OutStart>
 8002bf4:	e006      	b.n	8002c04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	441a      	add	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f005 fc08 	bl	8008420 <HAL_PCD_DataOutStageCallback>
 8002c10:	e046      	b.n	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4a26      	ldr	r2, [pc, #152]	@ (8002cb0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d124      	bne.n	8002c64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c30:	461a      	mov	r2, r3
 8002c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c36:	6093      	str	r3, [r2, #8]
 8002c38:	e032      	b.n	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c50:	461a      	mov	r2, r3
 8002c52:	2320      	movs	r3, #32
 8002c54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f005 fbdf 	bl	8008420 <HAL_PCD_DataOutStageCallback>
 8002c62:	e01d      	b.n	8002ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d114      	bne.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f003 f95e 	bl	8005f50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f005 fbc0 	bl	8008420 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	4f54300a 	.word	0x4f54300a
 8002cb0:	4f54310a 	.word	0x4f54310a

08002cb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	333c      	adds	r3, #60	@ 0x3c
 8002ccc:	3304      	adds	r3, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d90e      	bls.n	8002d08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d00:	461a      	mov	r2, r3
 8002d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f005 fb77 	bl	80083fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d90c      	bls.n	8002d30 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	799b      	ldrb	r3, [r3, #6]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	f003 f910 	bl	8005f50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	4f54300a 	.word	0x4f54300a

08002d40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d5e:	883b      	ldrh	r3, [r7, #0]
 8002d60:	0419      	lsls	r1, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d6c:	e028      	b.n	8002dc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	4413      	add	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e00d      	b.n	8002d9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	3340      	adds	r3, #64	@ 0x40
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	4413      	add	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d3ec      	bcc.n	8002d82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002da8:	883b      	ldrh	r3, [r7, #0]
 8002daa:	0418      	lsls	r0, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	4302      	orrs	r2, r0
 8002db8:	3340      	adds	r3, #64	@ 0x40
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e267      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d075      	beq.n	8002f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e26:	4b88      	ldr	r3, [pc, #544]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d00c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e32:	4b85      	ldr	r3, [pc, #532]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d112      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3e:	4b82      	ldr	r3, [pc, #520]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d05b      	beq.n	8002f10 <HAL_RCC_OscConfig+0x108>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d157      	bne.n	8002f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e242      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x74>
 8002e6e:	4b76      	ldr	r3, [pc, #472]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a75      	ldr	r2, [pc, #468]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e01d      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b70      	ldr	r3, [pc, #448]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b6d      	ldr	r3, [pc, #436]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6c      	ldr	r2, [pc, #432]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002ea0:	4b69      	ldr	r3, [pc, #420]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a68      	ldr	r2, [pc, #416]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b66      	ldr	r3, [pc, #408]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a65      	ldr	r2, [pc, #404]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fffe 	bl	8000ec0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fd fffa 	bl	8000ec0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e207      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b5b      	ldr	r3, [pc, #364]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xc0>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fd ffea 	bl	8000ec0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fd ffe6 	bl	8000ec0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1f3      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	4b51      	ldr	r3, [pc, #324]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xe8>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2a:	4b47      	ldr	r3, [pc, #284]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d11c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f36:	4b44      	ldr	r3, [pc, #272]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d116      	bne.n	8002f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	4b41      	ldr	r3, [pc, #260]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_RCC_OscConfig+0x152>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e1c7      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4937      	ldr	r1, [pc, #220]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	e03a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f78:	4b34      	ldr	r3, [pc, #208]	@ (800304c <HAL_RCC_OscConfig+0x244>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fd ff9f 	bl	8000ec0 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f86:	f7fd ff9b 	bl	8000ec0 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e1a8      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	4b2b      	ldr	r3, [pc, #172]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b28      	ldr	r3, [pc, #160]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4925      	ldr	r1, [pc, #148]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fba:	4b24      	ldr	r3, [pc, #144]	@ (800304c <HAL_RCC_OscConfig+0x244>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fd ff7e 	bl	8000ec0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7fd ff7a 	bl	8000ec0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e187      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d036      	beq.n	8003060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <HAL_RCC_OscConfig+0x248>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd ff5e 	bl	8000ec0 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003008:	f7fd ff5a 	bl	8000ec0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e167      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_OscConfig+0x240>)
 800301c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x200>
 8003026:	e01b      	b.n	8003060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003028:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_RCC_OscConfig+0x248>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302e:	f7fd ff47 	bl	8000ec0 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003034:	e00e      	b.n	8003054 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003036:	f7fd ff43 	bl	8000ec0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d907      	bls.n	8003054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e150      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
 8003048:	40023800 	.word	0x40023800
 800304c:	42470000 	.word	0x42470000
 8003050:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	4b88      	ldr	r3, [pc, #544]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ea      	bne.n	8003036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8097 	beq.w	800319c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003072:	4b81      	ldr	r3, [pc, #516]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	4b7d      	ldr	r3, [pc, #500]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	4a7c      	ldr	r2, [pc, #496]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	@ 0x40
 800308e:	4b7a      	ldr	r3, [pc, #488]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309e:	4b77      	ldr	r3, [pc, #476]	@ (800327c <HAL_RCC_OscConfig+0x474>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d118      	bne.n	80030dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030aa:	4b74      	ldr	r3, [pc, #464]	@ (800327c <HAL_RCC_OscConfig+0x474>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a73      	ldr	r2, [pc, #460]	@ (800327c <HAL_RCC_OscConfig+0x474>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b6:	f7fd ff03 	bl	8000ec0 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030be:	f7fd feff 	bl	8000ec0 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e10c      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <HAL_RCC_OscConfig+0x474>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x2ea>
 80030e4:	4b64      	ldr	r3, [pc, #400]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	4a63      	ldr	r2, [pc, #396]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x324>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x30c>
 80030fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	6713      	str	r3, [r2, #112]	@ 0x70
 8003106:	4b5c      	ldr	r3, [pc, #368]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310a:	4a5b      	ldr	r2, [pc, #364]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6713      	str	r3, [r2, #112]	@ 0x70
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0x324>
 8003114:	4b58      	ldr	r3, [pc, #352]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003118:	4a57      	ldr	r2, [pc, #348]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003120:	4b55      	ldr	r3, [pc, #340]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003124:	4a54      	ldr	r2, [pc, #336]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003126:	f023 0304 	bic.w	r3, r3, #4
 800312a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d015      	beq.n	8003160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fd fec4 	bl	8000ec0 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313a:	e00a      	b.n	8003152 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7fd fec0 	bl	8000ec0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0cb      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	4b49      	ldr	r3, [pc, #292]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0ee      	beq.n	800313c <HAL_RCC_OscConfig+0x334>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003160:	f7fd feae 	bl	8000ec0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7fd feaa 	bl	8000ec0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0b5      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317e:	4b3e      	ldr	r3, [pc, #248]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ee      	bne.n	8003168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003190:	4b39      	ldr	r3, [pc, #228]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	4a38      	ldr	r2, [pc, #224]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800319a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a1 	beq.w	80032e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031a6:	4b34      	ldr	r3, [pc, #208]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d05c      	beq.n	800326c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d141      	bne.n	800323e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b31      	ldr	r3, [pc, #196]	@ (8003280 <HAL_RCC_OscConfig+0x478>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fe7e 	bl	8000ec0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fd fe7a 	bl	8000ec0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e087      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	019b      	lsls	r3, r3, #6
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	3b01      	subs	r3, #1
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	491b      	ldr	r1, [pc, #108]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003210:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <HAL_RCC_OscConfig+0x478>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003216:	f7fd fe53 	bl	8000ec0 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321e:	f7fd fe4f 	bl	8000ec0 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e05c      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x416>
 800323c:	e054      	b.n	80032e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <HAL_RCC_OscConfig+0x478>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fd fe3c 	bl	8000ec0 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7fd fe38 	bl	8000ec0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e045      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_RCC_OscConfig+0x470>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x444>
 800326a:	e03d      	b.n	80032e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e038      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
 8003278:	40023800 	.word	0x40023800
 800327c:	40007000 	.word	0x40007000
 8003280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003284:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x4ec>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d028      	beq.n	80032e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d121      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d11a      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032b4:	4013      	ands	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	4293      	cmp	r3, r2
 80032be:	d111      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	3b01      	subs	r3, #1
 80032ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800

080032f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0cc      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800330c:	4b68      	ldr	r3, [pc, #416]	@ (80034b0 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d90c      	bls.n	8003334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b65      	ldr	r3, [pc, #404]	@ (80034b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b63      	ldr	r3, [pc, #396]	@ (80034b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0b8      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800334c:	4b59      	ldr	r3, [pc, #356]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a58      	ldr	r2, [pc, #352]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003364:	4b53      	ldr	r3, [pc, #332]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a52      	ldr	r2, [pc, #328]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800336e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	494d      	ldr	r1, [pc, #308]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d044      	beq.n	8003418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b47      	ldr	r3, [pc, #284]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d119      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e07f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	4b3f      	ldr	r3, [pc, #252]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e06f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e067      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d6:	4b37      	ldr	r3, [pc, #220]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f023 0203 	bic.w	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4934      	ldr	r1, [pc, #208]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e8:	f7fd fd6a 	bl	8000ec0 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f0:	f7fd fd66 	bl	8000ec0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e04f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	4b2b      	ldr	r3, [pc, #172]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 020c 	and.w	r2, r3, #12
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	429a      	cmp	r2, r3
 8003416:	d1eb      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003418:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <HAL_RCC_ClockConfig+0x1b8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d20c      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b22      	ldr	r3, [pc, #136]	@ (80034b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e032      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344c:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4916      	ldr	r1, [pc, #88]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346a:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	490e      	ldr	r1, [pc, #56]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347e:	f000 f821 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	490a      	ldr	r1, [pc, #40]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	5ccb      	ldrb	r3, [r1, r3]
 8003492:	fa22 f303 	lsr.w	r3, r2, r3
 8003496:	4a09      	ldr	r2, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800349a:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fcca 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023c00 	.word	0x40023c00
 80034b4:	40023800 	.word	0x40023800
 80034b8:	08008a20 	.word	0x08008a20
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b090      	sub	sp, #64	@ 0x40
 80034ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034dc:	4b59      	ldr	r3, [pc, #356]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x180>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d00d      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x40>
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	f200 80a1 	bhi.w	8003630 <HAL_RCC_GetSysClockFreq+0x16c>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x34>
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x3a>
 80034f6:	e09b      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b53      	ldr	r3, [pc, #332]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x184>)
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034fc:	e09b      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fe:	4b53      	ldr	r3, [pc, #332]	@ (800364c <HAL_RCC_GetSysClockFreq+0x188>)
 8003500:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003502:	e098      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	4b4f      	ldr	r3, [pc, #316]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x180>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800350c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800350e:	4b4d      	ldr	r3, [pc, #308]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x180>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d028      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351a:	4b4a      	ldr	r3, [pc, #296]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x180>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	099b      	lsrs	r3, r3, #6
 8003520:	2200      	movs	r2, #0
 8003522:	623b      	str	r3, [r7, #32]
 8003524:	627a      	str	r2, [r7, #36]	@ 0x24
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800352c:	2100      	movs	r1, #0
 800352e:	4b47      	ldr	r3, [pc, #284]	@ (800364c <HAL_RCC_GetSysClockFreq+0x188>)
 8003530:	fb03 f201 	mul.w	r2, r3, r1
 8003534:	2300      	movs	r3, #0
 8003536:	fb00 f303 	mul.w	r3, r0, r3
 800353a:	4413      	add	r3, r2
 800353c:	4a43      	ldr	r2, [pc, #268]	@ (800364c <HAL_RCC_GetSysClockFreq+0x188>)
 800353e:	fba0 1202 	umull	r1, r2, r0, r2
 8003542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003544:	460a      	mov	r2, r1
 8003546:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800354a:	4413      	add	r3, r2
 800354c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003550:	2200      	movs	r2, #0
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	61fa      	str	r2, [r7, #28]
 8003556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800355e:	f7fc fe3b 	bl	80001d8 <__aeabi_uldivmod>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4613      	mov	r3, r2
 8003568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800356a:	e053      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356c:	4b35      	ldr	r3, [pc, #212]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	2200      	movs	r2, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	617a      	str	r2, [r7, #20]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800357e:	f04f 0b00 	mov.w	fp, #0
 8003582:	4652      	mov	r2, sl
 8003584:	465b      	mov	r3, fp
 8003586:	f04f 0000 	mov.w	r0, #0
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	0159      	lsls	r1, r3, #5
 8003590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003594:	0150      	lsls	r0, r2, #5
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	ebb2 080a 	subs.w	r8, r2, sl
 800359e:	eb63 090b 	sbc.w	r9, r3, fp
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035b6:	ebb2 0408 	subs.w	r4, r2, r8
 80035ba:	eb63 0509 	sbc.w	r5, r3, r9
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	00eb      	lsls	r3, r5, #3
 80035c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035cc:	00e2      	lsls	r2, r4, #3
 80035ce:	4614      	mov	r4, r2
 80035d0:	461d      	mov	r5, r3
 80035d2:	eb14 030a 	adds.w	r3, r4, sl
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	eb45 030b 	adc.w	r3, r5, fp
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ea:	4629      	mov	r1, r5
 80035ec:	028b      	lsls	r3, r1, #10
 80035ee:	4621      	mov	r1, r4
 80035f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f4:	4621      	mov	r1, r4
 80035f6:	028a      	lsls	r2, r1, #10
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	2200      	movs	r2, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	60fa      	str	r2, [r7, #12]
 8003604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003608:	f7fc fde6 	bl	80001d8 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4613      	mov	r3, r2
 8003612:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x180>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	3301      	adds	r3, #1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003624:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800362e:	e002      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x184>)
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003638:	4618      	mov	r0, r3
 800363a:	3740      	adds	r7, #64	@ 0x40
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	00f42400 	.word	0x00f42400
 800364c:	017d7840 	.word	0x017d7840

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800366c:	f7ff fff0 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0a9b      	lsrs	r3, r3, #10
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	@ (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08008a30 	.word	0x08008a30

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff ffdc 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0b5b      	lsrs	r3, r3, #13
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	@ (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	08008a30 	.word	0x08008a30

080036b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e041      	b.n	800374e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fa1e 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 fb28 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e041      	b.n	80037ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7fd f987 	bl	8000a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f000 fad9 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0202 	mvn.w	r2, #2
 8003828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa65 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa57 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fa68 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d020      	beq.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0204 	mvn.w	r2, #4
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa3f 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa31 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa42 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d020      	beq.n	80038f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01b      	beq.n	80038f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0208 	mvn.w	r2, #8
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa19 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa0b 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa1c 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d020      	beq.n	800393c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01b      	beq.n	800393c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0210 	mvn.w	r2, #16
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2208      	movs	r2, #8
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9f3 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9e5 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f9f6 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9c3 	bl	8003ce6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fd60 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9c7 	bl	8003d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0220 	mvn.w	r2, #32
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fd32 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e0ae      	b.n	8003b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	f200 809f 	bhi.w	8003b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a02:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003b41 	.word	0x08003b41
 8003a10:	08003b41 	.word	0x08003b41
 8003a14:	08003b41 	.word	0x08003b41
 8003a18:	08003a7d 	.word	0x08003a7d
 8003a1c:	08003b41 	.word	0x08003b41
 8003a20:	08003b41 	.word	0x08003b41
 8003a24:	08003b41 	.word	0x08003b41
 8003a28:	08003abf 	.word	0x08003abf
 8003a2c:	08003b41 	.word	0x08003b41
 8003a30:	08003b41 	.word	0x08003b41
 8003a34:	08003b41 	.word	0x08003b41
 8003a38:	08003aff 	.word	0x08003aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fa0e 	bl	8003e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0208 	orr.w	r2, r2, #8
 8003a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0204 	bic.w	r2, r2, #4
 8003a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6999      	ldr	r1, [r3, #24]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	619a      	str	r2, [r3, #24]
      break;
 8003a7a:	e064      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fa54 	bl	8003f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	021a      	lsls	r2, r3, #8
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]
      break;
 8003abc:	e043      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fa9f 	bl	8004008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0208 	orr.w	r2, r2, #8
 8003ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0204 	bic.w	r2, r2, #4
 8003ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69d9      	ldr	r1, [r3, #28]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	61da      	str	r2, [r3, #28]
      break;
 8003afc:	e023      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fae9 	bl	80040dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	021a      	lsls	r2, r3, #8
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	61da      	str	r2, [r3, #28]
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
      break;
 8003b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIM_ConfigClockSource+0x1c>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e0b4      	b.n	8003cde <HAL_TIM_ConfigClockSource+0x186>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bac:	d03e      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0xd4>
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb2:	f200 8087 	bhi.w	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bba:	f000 8086 	beq.w	8003cca <HAL_TIM_ConfigClockSource+0x172>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc2:	d87f      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b70      	cmp	r3, #112	@ 0x70
 8003bc6:	d01a      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0xa6>
 8003bc8:	2b70      	cmp	r3, #112	@ 0x70
 8003bca:	d87b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b60      	cmp	r3, #96	@ 0x60
 8003bce:	d050      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x11a>
 8003bd0:	2b60      	cmp	r3, #96	@ 0x60
 8003bd2:	d877      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b50      	cmp	r3, #80	@ 0x50
 8003bd6:	d03c      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0xfa>
 8003bd8:	2b50      	cmp	r3, #80	@ 0x50
 8003bda:	d873      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d058      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0x13a>
 8003be0:	2b40      	cmp	r3, #64	@ 0x40
 8003be2:	d86f      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b30      	cmp	r3, #48	@ 0x30
 8003be6:	d064      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b30      	cmp	r3, #48	@ 0x30
 8003bea:	d86b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d060      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d867      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05c      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d05a      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	e062      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	f000 fb2f 	bl	8004270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	609a      	str	r2, [r3, #8]
      break;
 8003c2a:	e04f      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	f000 fb18 	bl	8004270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c4e:	609a      	str	r2, [r3, #8]
      break;
 8003c50:	e03c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f000 fa8c 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2150      	movs	r1, #80	@ 0x50
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fae5 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003c70:	e02c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f000 faab 	bl	80041da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2160      	movs	r1, #96	@ 0x60
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fad5 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003c90:	e01c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 fa6c 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2140      	movs	r1, #64	@ 0x40
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fac5 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e00c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f000 fabc 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003cc2:	e003      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc8:	e000      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e48 <TIM_Base_SetConfig+0xfc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00f      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6a:	d00b      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a37      	ldr	r2, [pc, #220]	@ (8003e4c <TIM_Base_SetConfig+0x100>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d007      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a36      	ldr	r2, [pc, #216]	@ (8003e50 <TIM_Base_SetConfig+0x104>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a35      	ldr	r2, [pc, #212]	@ (8003e54 <TIM_Base_SetConfig+0x108>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d108      	bne.n	8003d96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2b      	ldr	r2, [pc, #172]	@ (8003e48 <TIM_Base_SetConfig+0xfc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d01b      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d017      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a28      	ldr	r2, [pc, #160]	@ (8003e4c <TIM_Base_SetConfig+0x100>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a27      	ldr	r2, [pc, #156]	@ (8003e50 <TIM_Base_SetConfig+0x104>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00f      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a26      	ldr	r2, [pc, #152]	@ (8003e54 <TIM_Base_SetConfig+0x108>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a25      	ldr	r2, [pc, #148]	@ (8003e58 <TIM_Base_SetConfig+0x10c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a24      	ldr	r2, [pc, #144]	@ (8003e5c <TIM_Base_SetConfig+0x110>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a23      	ldr	r2, [pc, #140]	@ (8003e60 <TIM_Base_SetConfig+0x114>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e48 <TIM_Base_SetConfig+0xfc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d103      	bne.n	8003e1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d105      	bne.n	8003e3a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f023 0201 	bic.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f023 0201 	bic.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0302 	bic.w	r3, r3, #2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <TIM_OC1_SetConfig+0xc8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10c      	bne.n	8003eda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0308 	bic.w	r3, r3, #8
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <TIM_OC1_SetConfig+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40010000 	.word	0x40010000

08003f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f023 0210 	bic.w	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0320 	bic.w	r3, r3, #32
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <TIM_OC2_SetConfig+0xd4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10d      	bne.n	8003fac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <TIM_OC2_SetConfig+0xd4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d113      	bne.n	8003fdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000

08004008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <TIM_OC3_SetConfig+0xd0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10d      	bne.n	8004082 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800406c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a14      	ldr	r2, [pc, #80]	@ (80040d8 <TIM_OC3_SetConfig+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010000 	.word	0x40010000

080040dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	031b      	lsls	r3, r3, #12
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <TIM_OC4_SetConfig+0x9c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d109      	bne.n	8004150 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000

0800417c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0201 	bic.w	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 030a 	bic.w	r3, r3, #10
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f023 0210 	bic.w	r2, r3, #16
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	f043 0307 	orr.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800428a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	431a      	orrs	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4313      	orrs	r3, r2
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e050      	b.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1c      	ldr	r2, [pc, #112]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004314:	d013      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a18      	ldr	r2, [pc, #96]	@ (800437c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a16      	ldr	r2, [pc, #88]	@ (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a15      	ldr	r2, [pc, #84]	@ (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a13      	ldr	r2, [pc, #76]	@ (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10c      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4313      	orrs	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40014000 	.word	0x40014000

0800438c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e03d      	b.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e042      	b.n	80044f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc fbd0 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	@ 0x24
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f82b 	bl	80044f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b0c0      	sub	sp, #256	@ 0x100
 80044fe:	af00      	add	r7, sp, #0
 8004500:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	68d9      	ldr	r1, [r3, #12]
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	ea40 0301 	orr.w	r3, r0, r1
 8004520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	431a      	orrs	r2, r3
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004550:	f021 010c 	bic.w	r1, r1, #12
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800455e:	430b      	orrs	r3, r1
 8004560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	6999      	ldr	r1, [r3, #24]
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	ea40 0301 	orr.w	r3, r0, r1
 800457e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b8f      	ldr	r3, [pc, #572]	@ (80047c4 <UART_SetConfig+0x2cc>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d005      	beq.n	8004598 <UART_SetConfig+0xa0>
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b8d      	ldr	r3, [pc, #564]	@ (80047c8 <UART_SetConfig+0x2d0>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d104      	bne.n	80045a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7ff f87a 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 800459c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045a0:	e003      	b.n	80045aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045a2:	f7ff f861 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 80045a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b4:	f040 810c 	bne.w	80047d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045d2:	415b      	adcs	r3, r3
 80045d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045da:	4621      	mov	r1, r4
 80045dc:	eb12 0801 	adds.w	r8, r2, r1
 80045e0:	4629      	mov	r1, r5
 80045e2:	eb43 0901 	adc.w	r9, r3, r1
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fa:	4690      	mov	r8, r2
 80045fc:	4699      	mov	r9, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	eb18 0303 	adds.w	r3, r8, r3
 8004604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004608:	462b      	mov	r3, r5
 800460a:	eb49 0303 	adc.w	r3, r9, r3
 800460e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800461e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004626:	460b      	mov	r3, r1
 8004628:	18db      	adds	r3, r3, r3
 800462a:	653b      	str	r3, [r7, #80]	@ 0x50
 800462c:	4613      	mov	r3, r2
 800462e:	eb42 0303 	adc.w	r3, r2, r3
 8004632:	657b      	str	r3, [r7, #84]	@ 0x54
 8004634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800463c:	f7fb fdcc 	bl	80001d8 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b61      	ldr	r3, [pc, #388]	@ (80047cc <UART_SetConfig+0x2d4>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	011c      	lsls	r4, r3, #4
 800464e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004658:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800465c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	1891      	adds	r1, r2, r2
 8004666:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004668:	415b      	adcs	r3, r3
 800466a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800466c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004670:	4641      	mov	r1, r8
 8004672:	eb12 0a01 	adds.w	sl, r2, r1
 8004676:	4649      	mov	r1, r9
 8004678:	eb43 0b01 	adc.w	fp, r3, r1
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800468c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004690:	4692      	mov	sl, r2
 8004692:	469b      	mov	fp, r3
 8004694:	4643      	mov	r3, r8
 8004696:	eb1a 0303 	adds.w	r3, sl, r3
 800469a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800469e:	464b      	mov	r3, r9
 80046a0:	eb4b 0303 	adc.w	r3, fp, r3
 80046a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046bc:	460b      	mov	r3, r1
 80046be:	18db      	adds	r3, r3, r3
 80046c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c2:	4613      	mov	r3, r2
 80046c4:	eb42 0303 	adc.w	r3, r2, r3
 80046c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046d2:	f7fb fd81 	bl	80001d8 <__aeabi_uldivmod>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <UART_SetConfig+0x2d4>)
 80046de:	fba3 2301 	umull	r2, r3, r3, r1
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	2264      	movs	r2, #100	@ 0x64
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	1acb      	subs	r3, r1, r3
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046f2:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <UART_SetConfig+0x2d4>)
 80046f4:	fba3 2302 	umull	r2, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004700:	441c      	add	r4, r3
 8004702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800470c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	1891      	adds	r1, r2, r2
 800471a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800471c:	415b      	adcs	r3, r3
 800471e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004724:	4641      	mov	r1, r8
 8004726:	1851      	adds	r1, r2, r1
 8004728:	6339      	str	r1, [r7, #48]	@ 0x30
 800472a:	4649      	mov	r1, r9
 800472c:	414b      	adcs	r3, r1
 800472e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800473c:	4659      	mov	r1, fp
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4651      	mov	r1, sl
 8004742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004746:	4651      	mov	r1, sl
 8004748:	00ca      	lsls	r2, r1, #3
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	4603      	mov	r3, r0
 8004750:	4642      	mov	r2, r8
 8004752:	189b      	adds	r3, r3, r2
 8004754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004758:	464b      	mov	r3, r9
 800475a:	460a      	mov	r2, r1
 800475c:	eb42 0303 	adc.w	r3, r2, r3
 8004760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004770:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004778:	460b      	mov	r3, r1
 800477a:	18db      	adds	r3, r3, r3
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477e:	4613      	mov	r3, r2
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800478a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800478e:	f7fb fd23 	bl	80001d8 <__aeabi_uldivmod>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4b0d      	ldr	r3, [pc, #52]	@ (80047cc <UART_SetConfig+0x2d4>)
 8004798:	fba3 1302 	umull	r1, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	2164      	movs	r1, #100	@ 0x64
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	3332      	adds	r3, #50	@ 0x32
 80047aa:	4a08      	ldr	r2, [pc, #32]	@ (80047cc <UART_SetConfig+0x2d4>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	f003 0207 	and.w	r2, r3, #7
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4422      	add	r2, r4
 80047be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047c0:	e106      	b.n	80049d0 <UART_SetConfig+0x4d8>
 80047c2:	bf00      	nop
 80047c4:	40011000 	.word	0x40011000
 80047c8:	40011400 	.word	0x40011400
 80047cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047e2:	4642      	mov	r2, r8
 80047e4:	464b      	mov	r3, r9
 80047e6:	1891      	adds	r1, r2, r2
 80047e8:	6239      	str	r1, [r7, #32]
 80047ea:	415b      	adcs	r3, r3
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047f2:	4641      	mov	r1, r8
 80047f4:	1854      	adds	r4, r2, r1
 80047f6:	4649      	mov	r1, r9
 80047f8:	eb43 0501 	adc.w	r5, r3, r1
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	00eb      	lsls	r3, r5, #3
 8004806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480a:	00e2      	lsls	r2, r4, #3
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	4643      	mov	r3, r8
 8004812:	18e3      	adds	r3, r4, r3
 8004814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004818:	464b      	mov	r3, r9
 800481a:	eb45 0303 	adc.w	r3, r5, r3
 800481e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800482e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800483e:	4629      	mov	r1, r5
 8004840:	008b      	lsls	r3, r1, #2
 8004842:	4621      	mov	r1, r4
 8004844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004848:	4621      	mov	r1, r4
 800484a:	008a      	lsls	r2, r1, #2
 800484c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004850:	f7fb fcc2 	bl	80001d8 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4b60      	ldr	r3, [pc, #384]	@ (80049dc <UART_SetConfig+0x4e4>)
 800485a:	fba3 2302 	umull	r2, r3, r3, r2
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	011c      	lsls	r4, r3, #4
 8004862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004866:	2200      	movs	r2, #0
 8004868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800486c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	1891      	adds	r1, r2, r2
 800487a:	61b9      	str	r1, [r7, #24]
 800487c:	415b      	adcs	r3, r3
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004884:	4641      	mov	r1, r8
 8004886:	1851      	adds	r1, r2, r1
 8004888:	6139      	str	r1, [r7, #16]
 800488a:	4649      	mov	r1, r9
 800488c:	414b      	adcs	r3, r1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800489c:	4659      	mov	r1, fp
 800489e:	00cb      	lsls	r3, r1, #3
 80048a0:	4651      	mov	r1, sl
 80048a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a6:	4651      	mov	r1, sl
 80048a8:	00ca      	lsls	r2, r1, #3
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	4642      	mov	r2, r8
 80048b2:	189b      	adds	r3, r3, r2
 80048b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048b8:	464b      	mov	r3, r9
 80048ba:	460a      	mov	r2, r1
 80048bc:	eb42 0303 	adc.w	r3, r2, r3
 80048c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048dc:	4649      	mov	r1, r9
 80048de:	008b      	lsls	r3, r1, #2
 80048e0:	4641      	mov	r1, r8
 80048e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e6:	4641      	mov	r1, r8
 80048e8:	008a      	lsls	r2, r1, #2
 80048ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ee:	f7fb fc73 	bl	80001d8 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	4b38      	ldr	r3, [pc, #224]	@ (80049dc <UART_SetConfig+0x4e4>)
 80048fa:	fba3 2301 	umull	r2, r3, r3, r1
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	2264      	movs	r2, #100	@ 0x64
 8004902:	fb02 f303 	mul.w	r3, r2, r3
 8004906:	1acb      	subs	r3, r1, r3
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	3332      	adds	r3, #50	@ 0x32
 800490c:	4a33      	ldr	r2, [pc, #204]	@ (80049dc <UART_SetConfig+0x4e4>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004918:	441c      	add	r4, r3
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	673b      	str	r3, [r7, #112]	@ 0x70
 8004922:	677a      	str	r2, [r7, #116]	@ 0x74
 8004924:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	415b      	adcs	r3, r3
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004938:	4641      	mov	r1, r8
 800493a:	1851      	adds	r1, r2, r1
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	4649      	mov	r1, r9
 8004940:	414b      	adcs	r3, r1
 8004942:	607b      	str	r3, [r7, #4]
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004950:	4659      	mov	r1, fp
 8004952:	00cb      	lsls	r3, r1, #3
 8004954:	4651      	mov	r1, sl
 8004956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495a:	4651      	mov	r1, sl
 800495c:	00ca      	lsls	r2, r1, #3
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	4603      	mov	r3, r0
 8004964:	4642      	mov	r2, r8
 8004966:	189b      	adds	r3, r3, r2
 8004968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800496a:	464b      	mov	r3, r9
 800496c:	460a      	mov	r2, r1
 800496e:	eb42 0303 	adc.w	r3, r2, r3
 8004972:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	663b      	str	r3, [r7, #96]	@ 0x60
 800497e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800498c:	4649      	mov	r1, r9
 800498e:	008b      	lsls	r3, r1, #2
 8004990:	4641      	mov	r1, r8
 8004992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004996:	4641      	mov	r1, r8
 8004998:	008a      	lsls	r2, r1, #2
 800499a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800499e:	f7fb fc1b 	bl	80001d8 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <UART_SetConfig+0x4e4>)
 80049a8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	2164      	movs	r1, #100	@ 0x64
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	3332      	adds	r3, #50	@ 0x32
 80049ba:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <UART_SetConfig+0x4e4>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	f003 020f 	and.w	r2, r3, #15
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4422      	add	r2, r4
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049d6:	46bd      	mov	sp, r7
 80049d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049dc:	51eb851f 	.word	0x51eb851f

080049e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049e0:	b084      	sub	sp, #16
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	f107 001c 	add.w	r0, r7, #28
 80049ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d123      	bne.n	8004a42 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 fae8 	bl	800600c <USB_CoreReset>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	e01b      	b.n	8004a7a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 fadc 	bl	800600c <USB_CoreReset>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a6c:	e005      	b.n	8004a7a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a7a:	7fbb      	ldrb	r3, [r7, #30]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d10b      	bne.n	8004a98 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f043 0206 	orr.w	r2, r3, #6
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f043 0220 	orr.w	r2, r3, #32
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa4:	b004      	add	sp, #16
 8004aa6:	4770      	bx	lr

08004aa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d165      	bne.n	8004b88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a41      	ldr	r2, [pc, #260]	@ (8004bc4 <USB_SetTurnaroundTime+0x11c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d906      	bls.n	8004ad2 <USB_SetTurnaroundTime+0x2a>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a40      	ldr	r2, [pc, #256]	@ (8004bc8 <USB_SetTurnaroundTime+0x120>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d202      	bcs.n	8004ad2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004acc:	230f      	movs	r3, #15
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e062      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc8 <USB_SetTurnaroundTime+0x120>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d306      	bcc.n	8004ae8 <USB_SetTurnaroundTime+0x40>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a3b      	ldr	r2, [pc, #236]	@ (8004bcc <USB_SetTurnaroundTime+0x124>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d202      	bcs.n	8004ae8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ae2:	230e      	movs	r3, #14
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e057      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4a38      	ldr	r2, [pc, #224]	@ (8004bcc <USB_SetTurnaroundTime+0x124>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d306      	bcc.n	8004afe <USB_SetTurnaroundTime+0x56>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a37      	ldr	r2, [pc, #220]	@ (8004bd0 <USB_SetTurnaroundTime+0x128>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d202      	bcs.n	8004afe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004af8:	230d      	movs	r3, #13
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e04c      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4a33      	ldr	r2, [pc, #204]	@ (8004bd0 <USB_SetTurnaroundTime+0x128>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d306      	bcc.n	8004b14 <USB_SetTurnaroundTime+0x6c>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a32      	ldr	r2, [pc, #200]	@ (8004bd4 <USB_SetTurnaroundTime+0x12c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d802      	bhi.n	8004b14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b0e:	230c      	movs	r3, #12
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e041      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd4 <USB_SetTurnaroundTime+0x12c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d906      	bls.n	8004b2a <USB_SetTurnaroundTime+0x82>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd8 <USB_SetTurnaroundTime+0x130>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d802      	bhi.n	8004b2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b24:	230b      	movs	r3, #11
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e036      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd8 <USB_SetTurnaroundTime+0x130>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d906      	bls.n	8004b40 <USB_SetTurnaroundTime+0x98>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4a29      	ldr	r2, [pc, #164]	@ (8004bdc <USB_SetTurnaroundTime+0x134>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d802      	bhi.n	8004b40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b3a:	230a      	movs	r3, #10
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	e02b      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4a26      	ldr	r2, [pc, #152]	@ (8004bdc <USB_SetTurnaroundTime+0x134>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d906      	bls.n	8004b56 <USB_SetTurnaroundTime+0xae>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4a25      	ldr	r2, [pc, #148]	@ (8004be0 <USB_SetTurnaroundTime+0x138>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d202      	bcs.n	8004b56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b50:	2309      	movs	r3, #9
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e020      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4a21      	ldr	r2, [pc, #132]	@ (8004be0 <USB_SetTurnaroundTime+0x138>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d306      	bcc.n	8004b6c <USB_SetTurnaroundTime+0xc4>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a20      	ldr	r2, [pc, #128]	@ (8004be4 <USB_SetTurnaroundTime+0x13c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d802      	bhi.n	8004b6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b66:	2308      	movs	r3, #8
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e015      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <USB_SetTurnaroundTime+0x13c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d906      	bls.n	8004b82 <USB_SetTurnaroundTime+0xda>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4a1c      	ldr	r2, [pc, #112]	@ (8004be8 <USB_SetTurnaroundTime+0x140>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d202      	bcs.n	8004b82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b7c:	2307      	movs	r3, #7
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	e00a      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b82:	2306      	movs	r3, #6
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e007      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b8e:	2309      	movs	r3, #9
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e001      	b.n	8004b98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b94:	2309      	movs	r3, #9
 8004b96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	029b      	lsls	r3, r3, #10
 8004bac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	00d8acbf 	.word	0x00d8acbf
 8004bc8:	00e4e1c0 	.word	0x00e4e1c0
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	01067380 	.word	0x01067380
 8004bd4:	011a499f 	.word	0x011a499f
 8004bd8:	01312cff 	.word	0x01312cff
 8004bdc:	014ca43f 	.word	0x014ca43f
 8004be0:	016e3600 	.word	0x016e3600
 8004be4:	01a6ab1f 	.word	0x01a6ab1f
 8004be8:	01e84800 	.word	0x01e84800

08004bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f043 0201 	orr.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d115      	bne.n	8004c7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c5e:	200a      	movs	r0, #10
 8004c60:	f7fc f93a 	bl	8000ed8 <HAL_Delay>
      ms += 10U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	330a      	adds	r3, #10
 8004c68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f001 f93f 	bl	8005eee <USB_GetMode>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d01e      	beq.n	8004cb4 <USB_SetCurrentMode+0x84>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c7a:	d9f0      	bls.n	8004c5e <USB_SetCurrentMode+0x2e>
 8004c7c:	e01a      	b.n	8004cb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d115      	bne.n	8004cb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c90:	200a      	movs	r0, #10
 8004c92:	f7fc f921 	bl	8000ed8 <HAL_Delay>
      ms += 10U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	330a      	adds	r3, #10
 8004c9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 f926 	bl	8005eee <USB_GetMode>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <USB_SetCurrentMode+0x84>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2bc7      	cmp	r3, #199	@ 0xc7
 8004cac:	d9f0      	bls.n	8004c90 <USB_SetCurrentMode+0x60>
 8004cae:	e001      	b.n	8004cb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e005      	b.n	8004cc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2bc8      	cmp	r3, #200	@ 0xc8
 8004cb8:	d101      	bne.n	8004cbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc8:	b084      	sub	sp, #16
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e009      	b.n	8004cfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3340      	adds	r3, #64	@ 0x40
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0e      	cmp	r3, #14
 8004d00:	d9f2      	bls.n	8004ce8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11c      	bne.n	8004d44 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d18:	f043 0302 	orr.w	r3, r3, #2
 8004d1c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d42:	e00b      	b.n	8004d5c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d62:	461a      	mov	r2, r3
 8004d64:	2300      	movs	r3, #0
 8004d66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d10d      	bne.n	8004d8c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d78:	2100      	movs	r1, #0
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f968 	bl	8005050 <USB_SetDevSpeed>
 8004d80:	e008      	b.n	8004d94 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d82:	2101      	movs	r1, #1
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f963 	bl	8005050 <USB_SetDevSpeed>
 8004d8a:	e003      	b.n	8004d94 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d8c:	2103      	movs	r1, #3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f95e 	bl	8005050 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d94:	2110      	movs	r1, #16
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f8fa 	bl	8004f90 <USB_FlushTxFifo>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f924 	bl	8004ff4 <USB_FlushRxFifo>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	e043      	b.n	8004e68 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df6:	d118      	bne.n	8004e2a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e013      	b.n	8004e3c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e20:	461a      	mov	r2, r3
 8004e22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	e008      	b.n	8004e3c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3301      	adds	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d3b5      	bcc.n	8004de0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e043      	b.n	8004f02 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e90:	d118      	bne.n	8004ec4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	e013      	b.n	8004ed6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e008      	b.n	8004ed6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004efa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	3301      	adds	r3, #1
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f06:	461a      	mov	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d3b5      	bcc.n	8004e7a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004f2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f043 0210 	orr.w	r2, r3, #16
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <USB_DevInit+0x2c4>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f043 0208 	orr.w	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f88:	b004      	add	sp, #16
 8004f8a:	4770      	bx	lr
 8004f8c:	803c3800 	.word	0x803c3800

08004f90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004faa:	d901      	bls.n	8004fb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e01b      	b.n	8004fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	daf2      	bge.n	8004f9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	019b      	lsls	r3, r3, #6
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fd4:	d901      	bls.n	8004fda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d0f0      	beq.n	8004fc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800500c:	d901      	bls.n	8005012 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e018      	b.n	8005044 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	daf2      	bge.n	8005000 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2210      	movs	r2, #16
 8005022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3301      	adds	r3, #1
 8005028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005030:	d901      	bls.n	8005036 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e006      	b.n	8005044 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b10      	cmp	r3, #16
 8005040:	d0f0      	beq.n	8005024 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0306 	and.w	r3, r3, #6
 800509a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]
 80050a6:	e00a      	b.n	80050be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d002      	beq.n	80050b4 <USB_GetDevSpeed+0x32>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d102      	bne.n	80050ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050b4:	2302      	movs	r3, #2
 80050b6:	75fb      	strb	r3, [r7, #23]
 80050b8:	e001      	b.n	80050be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050ba:	230f      	movs	r3, #15
 80050bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050be:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d13a      	bne.n	800515e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	2101      	movs	r1, #1
 80050fa:	fa01 f303 	lsl.w	r3, r1, r3
 80050fe:	b29b      	uxth	r3, r3
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005106:	4313      	orrs	r3, r2
 8005108:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d155      	bne.n	80051cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800513c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	059b      	lsls	r3, r3, #22
 8005142:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005144:	4313      	orrs	r3, r2
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e036      	b.n	80051cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	2101      	movs	r1, #1
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800517c:	4313      	orrs	r3, r2
 800517e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d11a      	bne.n	80051cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051b2:	430b      	orrs	r3, r1
 80051b4:	4313      	orrs	r3, r2
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d161      	bne.n	80052bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800520e:	d11f      	bne.n	8005250 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800522a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800522e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800524a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800524e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005270:	4013      	ands	r3, r2
 8005272:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	2101      	movs	r1, #1
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005294:	4013      	ands	r3, r2
 8005296:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	0159      	lsls	r1, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	440b      	add	r3, r1
 80052ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b2:	4619      	mov	r1, r3
 80052b4:	4b35      	ldr	r3, [pc, #212]	@ (800538c <USB_DeactivateEndpoint+0x1b0>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]
 80052ba:	e060      	b.n	800537e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d2:	d11f      	bne.n	8005314 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800530e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005312:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	43db      	mvns	r3, r3
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005334:	4013      	ands	r3, r2
 8005336:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	2101      	movs	r1, #1
 800534a:	fa01 f303 	lsl.w	r3, r1, r3
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	43db      	mvns	r3, r3
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005358:	4013      	ands	r3, r2
 800535a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	0159      	lsls	r1, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	440b      	add	r3, r1
 8005372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005376:	4619      	mov	r1, r3
 8005378:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <USB_DeactivateEndpoint+0x1b4>)
 800537a:	4013      	ands	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	ec337800 	.word	0xec337800
 8005390:	eff37800 	.word	0xeff37800

08005394 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	@ 0x28
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 817f 	bne.w	80056b4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d132      	bne.n	8005424 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005400:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541c:	0cdb      	lsrs	r3, r3, #19
 800541e:	04db      	lsls	r3, r3, #19
 8005420:	6113      	str	r3, [r2, #16]
 8005422:	e097      	b.n	8005554 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800543e:	0cdb      	lsrs	r3, r3, #19
 8005440:	04db      	lsls	r3, r3, #19
 8005442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	440a      	add	r2, r1
 800545a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800545e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005462:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005466:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d11a      	bne.n	80054a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	d903      	bls.n	8005482 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800549c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054a0:	6113      	str	r3, [r2, #16]
 80054a2:	e044      	b.n	800552e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	1e5a      	subs	r2, r3, #1
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	8afb      	ldrh	r3, [r7, #22]
 80054ca:	04d9      	lsls	r1, r3, #19
 80054cc:	4ba4      	ldr	r3, [pc, #656]	@ (8005760 <USB_EPStartXfer+0x3cc>)
 80054ce:	400b      	ands	r3, r1
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	0148      	lsls	r0, r1, #5
 80054d4:	69f9      	ldr	r1, [r7, #28]
 80054d6:	4401      	add	r1, r0
 80054d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	791b      	ldrb	r3, [r3, #4]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d122      	bne.n	800552e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005502:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005506:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	8afb      	ldrh	r3, [r7, #22]
 8005518:	075b      	lsls	r3, r3, #29
 800551a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800551e:	69b9      	ldr	r1, [r7, #24]
 8005520:	0148      	lsls	r0, r1, #5
 8005522:	69f9      	ldr	r1, [r7, #28]
 8005524:	4401      	add	r1, r0
 8005526:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800552a:	4313      	orrs	r3, r2
 800552c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	0148      	lsls	r0, r1, #5
 8005548:	69f9      	ldr	r1, [r7, #28]
 800554a:	4401      	add	r1, r0
 800554c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005550:	4313      	orrs	r3, r2
 8005552:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d14b      	bne.n	80055f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556e:	461a      	mov	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d128      	bne.n	80055d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d110      	bne.n	80055b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e00f      	b.n	80055d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e166      	b.n	80058c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800560c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005610:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	791b      	ldrb	r3, [r3, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d015      	beq.n	8005646 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 814e 	beq.w	80058c0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	2101      	movs	r1, #1
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005640:	4313      	orrs	r3, r2
 8005642:	634b      	str	r3, [r1, #52]	@ 0x34
 8005644:	e13c      	b.n	80058c0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d110      	bne.n	8005678 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005670:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e00f      	b.n	8005698 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005696:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	68d9      	ldr	r1, [r3, #12]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	b298      	uxth	r0, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	4603      	mov	r3, r0
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f9b9 	bl	8005a24 <USB_WritePacket>
 80056b2:	e105      	b.n	80058c0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ce:	0cdb      	lsrs	r3, r3, #19
 80056d0:	04db      	lsls	r3, r3, #19
 80056d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d132      	bne.n	8005764 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	69b9      	ldr	r1, [r7, #24]
 800572e:	0148      	lsls	r0, r1, #5
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	4401      	add	r1, r0
 8005734:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005756:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800575a:	6113      	str	r3, [r2, #16]
 800575c:	e062      	b.n	8005824 <USB_EPStartXfer+0x490>
 800575e:	bf00      	nop
 8005760:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d123      	bne.n	80057b4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	0148      	lsls	r0, r1, #5
 8005786:	69f9      	ldr	r1, [r7, #28]
 8005788:	4401      	add	r1, r0
 800578a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057b0:	6113      	str	r3, [r2, #16]
 80057b2:	e037      	b.n	8005824 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4413      	add	r3, r2
 80057be:	1e5a      	subs	r2, r3, #1
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	8afa      	ldrh	r2, [r7, #22]
 80057d0:	fb03 f202 	mul.w	r2, r3, r2
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	8afb      	ldrh	r3, [r7, #22]
 80057e8:	04d9      	lsls	r1, r3, #19
 80057ea:	4b38      	ldr	r3, [pc, #224]	@ (80058cc <USB_EPStartXfer+0x538>)
 80057ec:	400b      	ands	r3, r1
 80057ee:	69b9      	ldr	r1, [r7, #24]
 80057f0:	0148      	lsls	r0, r1, #5
 80057f2:	69f9      	ldr	r1, [r7, #28]
 80057f4:	4401      	add	r1, r0
 80057f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057fa:	4313      	orrs	r3, r2
 80057fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005814:	69b9      	ldr	r1, [r7, #24]
 8005816:	0148      	lsls	r0, r1, #5
 8005818:	69f9      	ldr	r1, [r7, #28]
 800581a:	4401      	add	r1, r0
 800581c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005820:	4313      	orrs	r3, r2
 8005822:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10d      	bne.n	8005846 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68d9      	ldr	r1, [r3, #12]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005842:	460a      	mov	r2, r1
 8005844:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	791b      	ldrb	r3, [r3, #4]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d128      	bne.n	80058a0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d110      	bne.n	8005880 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005878:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e00f      	b.n	80058a0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	1ff80000 	.word	0x1ff80000

080058d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d14a      	bne.n	8005984 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005906:	f040 8086 	bne.w	8005a16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	7812      	ldrb	r2, [r2, #0]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005928:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800592c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005950:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800595e:	4293      	cmp	r3, r2
 8005960:	d902      	bls.n	8005968 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
          break;
 8005966:	e056      	b.n	8005a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800597c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005980:	d0e7      	beq.n	8005952 <USB_EPStopXfer+0x82>
 8005982:	e048      	b.n	8005a16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005998:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800599c:	d13b      	bne.n	8005a16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	7812      	ldrb	r2, [r2, #0]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d902      	bls.n	80059fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
          break;
 80059fa:	e00c      	b.n	8005a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a14:	d0e7      	beq.n	80059e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	@ 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	460b      	mov	r3, r1
 8005a34:	71fb      	strb	r3, [r7, #7]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d123      	bne.n	8005a92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a4a:	88bb      	ldrh	r3, [r7, #4]
 8005a4c:	3303      	adds	r3, #3
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e018      	b.n	8005a8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	031a      	lsls	r2, r3, #12
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a64:	461a      	mov	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	3301      	adds	r3, #1
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d3e2      	bcc.n	8005a58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3724      	adds	r7, #36	@ 0x24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b08b      	sub	sp, #44	@ 0x2c
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	e014      	b.n	8005af6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	3301      	adds	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	3301      	adds	r3, #1
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	3301      	adds	r3, #1
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3e6      	bcc.n	8005acc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005afe:	8bfb      	ldrh	r3, [r7, #30]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01e      	beq.n	8005b42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f107 0310 	add.w	r3, r7, #16
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	701a      	strb	r2, [r3, #0]
      i++;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	3301      	adds	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b36:	8bfb      	ldrh	r3, [r7, #30]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b3c:	8bfb      	ldrh	r3, [r7, #30]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1ea      	bne.n	8005b18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	372c      	adds	r7, #44	@ 0x2c
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d12c      	bne.n	8005bc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	db12      	blt.n	8005ba4 <USB_EPSetStall+0x54>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00f      	beq.n	8005ba4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ba2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e02b      	b.n	8005c1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db12      	blt.n	8005bfe <USB_EPSetStall+0xae>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00f      	beq.n	8005bfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d128      	bne.n	8005c9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	791b      	ldrb	r3, [r3, #4]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d003      	beq.n	8005c78 <USB_EPClearStall+0x4c>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	791b      	ldrb	r3, [r3, #4]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d138      	bne.n	8005cea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e027      	b.n	8005cea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	791b      	ldrb	r3, [r3, #4]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d003      	beq.n	8005cca <USB_EPClearStall+0x9e>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	791b      	ldrb	r3, [r3, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d10f      	bne.n	8005cea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005d1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005d2c:	68f9      	ldr	r1, [r7, #12]
 8005d2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d32:	4313      	orrs	r3, r2
 8005d34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d72:	f023 0302 	bic.w	r3, r3, #2
 8005d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005da0:	f023 0303 	bic.w	r3, r3, #3
 8005da4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005de0:	68fb      	ldr	r3, [r7, #12]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0c1b      	lsrs	r3, r3, #16
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	b29b      	uxth	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e84:	68bb      	ldr	r3, [r7, #8]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b087      	sub	sp, #28
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	01db      	lsls	r3, r3, #7
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4013      	ands	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0301 	and.w	r3, r3, #1
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	333c      	adds	r3, #60	@ 0x3c
 8005f66:	3304      	adds	r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4a26      	ldr	r2, [pc, #152]	@ (8006008 <USB_EP0_OutStart+0xb8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d90a      	bls.n	8005f8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f84:	d101      	bne.n	8005f8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e037      	b.n	8005ffa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fb8:	f043 0318 	orr.w	r3, r3, #24
 8005fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fcc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005fd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10f      	bne.n	8005ff8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	4f54300a 	.word	0x4f54300a

0800600c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006024:	d901      	bls.n	800602a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e01b      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	daf2      	bge.n	8006018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800604e:	d901      	bls.n	8006054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e006      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d0f0      	beq.n	8006042 <USB_CoreReset+0x36>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800607c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006080:	f002 fc2e 	bl	80088e0 <USBD_static_malloc>
 8006084:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	32b0      	adds	r2, #176	@ 0xb0
 8006096:	2100      	movs	r1, #0
 8006098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800609c:	2302      	movs	r3, #2
 800609e:	e0d4      	b.n	800624a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80060a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80060a4:	2100      	movs	r1, #0
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f002 fc5e 	bl	8008968 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32b0      	adds	r2, #176	@ 0xb0
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	32b0      	adds	r2, #176	@ 0xb0
 80060c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7c1b      	ldrb	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d138      	bne.n	800614a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006254 <USBD_CDC_Init+0x1e4>)
 80060da:	7819      	ldrb	r1, [r3, #0]
 80060dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060e0:	2202      	movs	r2, #2
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f002 fad9 	bl	800869a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006254 <USBD_CDC_Init+0x1e4>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3324      	adds	r3, #36	@ 0x24
 80060fe:	2201      	movs	r2, #1
 8006100:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006102:	4b55      	ldr	r3, [pc, #340]	@ (8006258 <USBD_CDC_Init+0x1e8>)
 8006104:	7819      	ldrb	r1, [r3, #0]
 8006106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800610a:	2202      	movs	r2, #2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f002 fac4 	bl	800869a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006112:	4b51      	ldr	r3, [pc, #324]	@ (8006258 <USBD_CDC_Init+0x1e8>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f003 020f 	and.w	r2, r3, #15
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800612a:	2201      	movs	r2, #1
 800612c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800612e:	4b4b      	ldr	r3, [pc, #300]	@ (800625c <USBD_CDC_Init+0x1ec>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	f003 020f 	and.w	r2, r3, #15
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	3326      	adds	r3, #38	@ 0x26
 8006144:	2210      	movs	r2, #16
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e035      	b.n	80061b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800614a:	4b42      	ldr	r3, [pc, #264]	@ (8006254 <USBD_CDC_Init+0x1e4>)
 800614c:	7819      	ldrb	r1, [r3, #0]
 800614e:	2340      	movs	r3, #64	@ 0x40
 8006150:	2202      	movs	r2, #2
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f002 faa1 	bl	800869a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006158:	4b3e      	ldr	r3, [pc, #248]	@ (8006254 <USBD_CDC_Init+0x1e4>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	3324      	adds	r3, #36	@ 0x24
 800616e:	2201      	movs	r2, #1
 8006170:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006172:	4b39      	ldr	r3, [pc, #228]	@ (8006258 <USBD_CDC_Init+0x1e8>)
 8006174:	7819      	ldrb	r1, [r3, #0]
 8006176:	2340      	movs	r3, #64	@ 0x40
 8006178:	2202      	movs	r2, #2
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f002 fa8d 	bl	800869a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006180:	4b35      	ldr	r3, [pc, #212]	@ (8006258 <USBD_CDC_Init+0x1e8>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006198:	2201      	movs	r2, #1
 800619a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800619c:	4b2f      	ldr	r3, [pc, #188]	@ (800625c <USBD_CDC_Init+0x1ec>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	3326      	adds	r3, #38	@ 0x26
 80061b2:	2210      	movs	r2, #16
 80061b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061b6:	4b29      	ldr	r3, [pc, #164]	@ (800625c <USBD_CDC_Init+0x1ec>)
 80061b8:	7819      	ldrb	r1, [r3, #0]
 80061ba:	2308      	movs	r3, #8
 80061bc:	2203      	movs	r2, #3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f002 fa6b 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80061c4:	4b25      	ldr	r3, [pc, #148]	@ (800625c <USBD_CDC_Init+0x1ec>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3324      	adds	r3, #36	@ 0x24
 80061da:	2201      	movs	r2, #1
 80061dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	33b0      	adds	r3, #176	@ 0xb0
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006214:	2302      	movs	r3, #2
 8006216:	e018      	b.n	800624a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	7c1b      	ldrb	r3, [r3, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006220:	4b0d      	ldr	r3, [pc, #52]	@ (8006258 <USBD_CDC_Init+0x1e8>)
 8006222:	7819      	ldrb	r1, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800622a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f002 fb22 	bl	8008878 <USBD_LL_PrepareReceive>
 8006234:	e008      	b.n	8006248 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <USBD_CDC_Init+0x1e8>)
 8006238:	7819      	ldrb	r1, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006240:	2340      	movs	r3, #64	@ 0x40
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f002 fb18 	bl	8008878 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000093 	.word	0x20000093
 8006258:	20000094 	.word	0x20000094
 800625c:	20000095 	.word	0x20000095

08006260 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800626c:	4b3a      	ldr	r3, [pc, #232]	@ (8006358 <USBD_CDC_DeInit+0xf8>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 fa37 	bl	80086e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006278:	4b37      	ldr	r3, [pc, #220]	@ (8006358 <USBD_CDC_DeInit+0xf8>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	3324      	adds	r3, #36	@ 0x24
 800628e:	2200      	movs	r2, #0
 8006290:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006292:	4b32      	ldr	r3, [pc, #200]	@ (800635c <USBD_CDC_DeInit+0xfc>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 fa24 	bl	80086e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800629e:	4b2f      	ldr	r3, [pc, #188]	@ (800635c <USBD_CDC_DeInit+0xfc>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062b6:	2200      	movs	r2, #0
 80062b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <USBD_CDC_DeInit+0x100>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f002 fa10 	bl	80086e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80062c6:	4b26      	ldr	r3, [pc, #152]	@ (8006360 <USBD_CDC_DeInit+0x100>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	3324      	adds	r3, #36	@ 0x24
 80062dc:	2200      	movs	r2, #0
 80062de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80062e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006360 <USBD_CDC_DeInit+0x100>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f003 020f 	and.w	r2, r3, #15
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	3326      	adds	r3, #38	@ 0x26
 80062f6:	2200      	movs	r2, #0
 80062f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	32b0      	adds	r2, #176	@ 0xb0
 8006304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01f      	beq.n	800634c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	33b0      	adds	r3, #176	@ 0xb0
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32b0      	adds	r2, #176	@ 0xb0
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	4618      	mov	r0, r3
 8006330:	f002 fae4 	bl	80088fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	32b0      	adds	r2, #176	@ 0xb0
 800633e:	2100      	movs	r1, #0
 8006340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000093 	.word	0x20000093
 800635c:	20000094 	.word	0x20000094
 8006360:	20000095 	.word	0x20000095

08006364 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	32b0      	adds	r2, #176	@ 0xb0
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	e0bf      	b.n	8006514 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800639c:	2b00      	cmp	r3, #0
 800639e:	d050      	beq.n	8006442 <USBD_CDC_Setup+0xde>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	f040 80af 	bne.w	8006504 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	88db      	ldrh	r3, [r3, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d03a      	beq.n	8006424 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	b25b      	sxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da1b      	bge.n	80063f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	33b0      	adds	r3, #176	@ 0xb0
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80063ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	88d2      	ldrh	r2, [r2, #6]
 80063d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	88db      	ldrh	r3, [r3, #6]
 80063da:	2b07      	cmp	r3, #7
 80063dc:	bf28      	it	cs
 80063de:	2307      	movcs	r3, #7
 80063e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	89fa      	ldrh	r2, [r7, #14]
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fd53 	bl	8007e94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80063ee:	e090      	b.n	8006512 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	785a      	ldrb	r2, [r3, #1]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	88db      	ldrh	r3, [r3, #6]
 80063fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8006400:	d803      	bhi.n	800640a <USBD_CDC_Setup+0xa6>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	88db      	ldrh	r3, [r3, #6]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	e000      	b.n	800640c <USBD_CDC_Setup+0xa8>
 800640a:	2240      	movs	r2, #64	@ 0x40
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006412:	6939      	ldr	r1, [r7, #16]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800641a:	461a      	mov	r2, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fd65 	bl	8007eec <USBD_CtlPrepareRx>
      break;
 8006422:	e076      	b.n	8006512 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	33b0      	adds	r3, #176	@ 0xb0
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	7850      	ldrb	r0, [r2, #1]
 800643a:	2200      	movs	r2, #0
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	4798      	blx	r3
      break;
 8006440:	e067      	b.n	8006512 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b0b      	cmp	r3, #11
 8006448:	d851      	bhi.n	80064ee <USBD_CDC_Setup+0x18a>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <USBD_CDC_Setup+0xec>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006481 	.word	0x08006481
 8006454:	080064fd 	.word	0x080064fd
 8006458:	080064ef 	.word	0x080064ef
 800645c:	080064ef 	.word	0x080064ef
 8006460:	080064ef 	.word	0x080064ef
 8006464:	080064ef 	.word	0x080064ef
 8006468:	080064ef 	.word	0x080064ef
 800646c:	080064ef 	.word	0x080064ef
 8006470:	080064ef 	.word	0x080064ef
 8006474:	080064ef 	.word	0x080064ef
 8006478:	080064ab 	.word	0x080064ab
 800647c:	080064d5 	.word	0x080064d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d107      	bne.n	800649c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800648c:	f107 030a 	add.w	r3, r7, #10
 8006490:	2202      	movs	r2, #2
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fcfd 	bl	8007e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800649a:	e032      	b.n	8006502 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fc7b 	bl	8007d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	75fb      	strb	r3, [r7, #23]
          break;
 80064a8:	e02b      	b.n	8006502 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d107      	bne.n	80064c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80064b6:	f107 030d 	add.w	r3, r7, #13
 80064ba:	2201      	movs	r2, #1
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 fce8 	bl	8007e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064c4:	e01d      	b.n	8006502 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fc66 	bl	8007d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	75fb      	strb	r3, [r7, #23]
          break;
 80064d2:	e016      	b.n	8006502 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d00f      	beq.n	8006500 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fc59 	bl	8007d9a <USBD_CtlError>
            ret = USBD_FAIL;
 80064e8:	2303      	movs	r3, #3
 80064ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064ec:	e008      	b.n	8006500 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 fc52 	bl	8007d9a <USBD_CtlError>
          ret = USBD_FAIL;
 80064f6:	2303      	movs	r3, #3
 80064f8:	75fb      	strb	r3, [r7, #23]
          break;
 80064fa:	e002      	b.n	8006502 <USBD_CDC_Setup+0x19e>
          break;
 80064fc:	bf00      	nop
 80064fe:	e008      	b.n	8006512 <USBD_CDC_Setup+0x1ae>
          break;
 8006500:	bf00      	nop
      }
      break;
 8006502:	e006      	b.n	8006512 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fc47 	bl	8007d9a <USBD_CtlError>
      ret = USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	75fb      	strb	r3, [r7, #23]
      break;
 8006510:	bf00      	nop
  }

  return (uint8_t)ret;
 8006512:	7dfb      	ldrb	r3, [r7, #23]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800652e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32b0      	adds	r2, #176	@ 0xb0
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006542:	2303      	movs	r3, #3
 8006544:	e065      	b.n	8006612 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	32b0      	adds	r2, #176	@ 0xb0
 8006550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006554:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	f003 020f 	and.w	r2, r3, #15
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	3318      	adds	r3, #24
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d02f      	beq.n	80065d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	3318      	adds	r3, #24
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 010f 	and.w	r1, r3, #15
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	460b      	mov	r3, r1
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	440b      	add	r3, r1
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4403      	add	r3, r0
 8006598:	331c      	adds	r3, #28
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	fbb2 f1f3 	udiv	r1, r2, r3
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d112      	bne.n	80065d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	f003 020f 	and.w	r2, r3, #15
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	3318      	adds	r3, #24
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065c2:	78f9      	ldrb	r1, [r7, #3]
 80065c4:	2300      	movs	r3, #0
 80065c6:	2200      	movs	r2, #0
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f002 f934 	bl	8008836 <USBD_LL_Transmit>
 80065ce:	e01f      	b.n	8006610 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	33b0      	adds	r3, #176	@ 0xb0
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d010      	beq.n	8006610 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	33b0      	adds	r3, #176	@ 0xb0
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	32b0      	adds	r2, #176	@ 0xb0
 8006630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006634:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	32b0      	adds	r2, #176	@ 0xb0
 8006640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006648:	2303      	movs	r3, #3
 800664a:	e01a      	b.n	8006682 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f002 f932 	bl	80088ba <USBD_LL_GetRxDataSize>
 8006656:	4602      	mov	r2, r0
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	33b0      	adds	r3, #176	@ 0xb0
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800667c:	4611      	mov	r1, r2
 800667e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	32b0      	adds	r2, #176	@ 0xb0
 800669c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e024      	b.n	80066f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	33b0      	adds	r3, #176	@ 0xb0
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d019      	beq.n	80066f4 <USBD_CDC_EP0_RxReady+0x6a>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80066c6:	2bff      	cmp	r3, #255	@ 0xff
 80066c8:	d014      	beq.n	80066f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	33b0      	adds	r3, #176	@ 0xb0
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80066e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	22ff      	movs	r2, #255	@ 0xff
 80066f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006708:	2182      	movs	r1, #130	@ 0x82
 800670a:	4818      	ldr	r0, [pc, #96]	@ (800676c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800670c:	f000 fd0f 	bl	800712e <USBD_GetEpDesc>
 8006710:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006712:	2101      	movs	r1, #1
 8006714:	4815      	ldr	r0, [pc, #84]	@ (800676c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006716:	f000 fd0a 	bl	800712e <USBD_GetEpDesc>
 800671a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800671c:	2181      	movs	r1, #129	@ 0x81
 800671e:	4813      	ldr	r0, [pc, #76]	@ (800676c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006720:	f000 fd05 	bl	800712e <USBD_GetEpDesc>
 8006724:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2210      	movs	r2, #16
 8006730:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d006      	beq.n	8006746 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2200      	movs	r2, #0
 800673c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006740:	711a      	strb	r2, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d006      	beq.n	800675a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006754:	711a      	strb	r2, [r3, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2243      	movs	r2, #67	@ 0x43
 800675e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006760:	4b02      	ldr	r3, [pc, #8]	@ (800676c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000050 	.word	0x20000050

08006770 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006778:	2182      	movs	r1, #130	@ 0x82
 800677a:	4818      	ldr	r0, [pc, #96]	@ (80067dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800677c:	f000 fcd7 	bl	800712e <USBD_GetEpDesc>
 8006780:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006782:	2101      	movs	r1, #1
 8006784:	4815      	ldr	r0, [pc, #84]	@ (80067dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006786:	f000 fcd2 	bl	800712e <USBD_GetEpDesc>
 800678a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800678c:	2181      	movs	r1, #129	@ 0x81
 800678e:	4813      	ldr	r0, [pc, #76]	@ (80067dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006790:	f000 fccd 	bl	800712e <USBD_GetEpDesc>
 8006794:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2210      	movs	r2, #16
 80067a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d006      	beq.n	80067b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2200      	movs	r2, #0
 80067ac:	711a      	strb	r2, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f042 0202 	orr.w	r2, r2, #2
 80067b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d006      	beq.n	80067ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	711a      	strb	r2, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f042 0202 	orr.w	r2, r2, #2
 80067c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2243      	movs	r2, #67	@ 0x43
 80067ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067d0:	4b02      	ldr	r3, [pc, #8]	@ (80067dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000050 	.word	0x20000050

080067e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067e8:	2182      	movs	r1, #130	@ 0x82
 80067ea:	4818      	ldr	r0, [pc, #96]	@ (800684c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067ec:	f000 fc9f 	bl	800712e <USBD_GetEpDesc>
 80067f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067f2:	2101      	movs	r1, #1
 80067f4:	4815      	ldr	r0, [pc, #84]	@ (800684c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067f6:	f000 fc9a 	bl	800712e <USBD_GetEpDesc>
 80067fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067fc:	2181      	movs	r1, #129	@ 0x81
 80067fe:	4813      	ldr	r0, [pc, #76]	@ (800684c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006800:	f000 fc95 	bl	800712e <USBD_GetEpDesc>
 8006804:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2210      	movs	r2, #16
 8006810:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d006      	beq.n	8006826 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2200      	movs	r2, #0
 800681c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006820:	711a      	strb	r2, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d006      	beq.n	800683a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006834:	711a      	strb	r2, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2243      	movs	r2, #67	@ 0x43
 800683e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006840:	4b02      	ldr	r3, [pc, #8]	@ (800684c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000050 	.word	0x20000050

08006850 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	220a      	movs	r2, #10
 800685c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800685e:	4b03      	ldr	r3, [pc, #12]	@ (800686c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	2000000c 	.word	0x2000000c

08006870 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e009      	b.n	8006898 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	33b0      	adds	r3, #176	@ 0xb0
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	32b0      	adds	r2, #176	@ 0xb0
 80068ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e008      	b.n	80068dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	32b0      	adds	r2, #176	@ 0xb0
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	e004      	b.n	8006916 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
	...

08006924 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	32b0      	adds	r2, #176	@ 0xb0
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	32b0      	adds	r2, #176	@ 0xb0
 8006946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800694e:	2303      	movs	r3, #3
 8006950:	e018      	b.n	8006984 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7c1b      	ldrb	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800695a:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <USBD_CDC_ReceivePacket+0x68>)
 800695c:	7819      	ldrb	r1, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 ff85 	bl	8008878 <USBD_LL_PrepareReceive>
 800696e:	e008      	b.n	8006982 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006970:	4b06      	ldr	r3, [pc, #24]	@ (800698c <USBD_CDC_ReceivePacket+0x68>)
 8006972:	7819      	ldrb	r1, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800697a:	2340      	movs	r3, #64	@ 0x40
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 ff7b 	bl	8008878 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000094 	.word	0x20000094

08006990 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e01f      	b.n	80069e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	79fa      	ldrb	r2, [r7, #7]
 80069da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f001 fdf5 	bl	80085cc <USBD_LL_Init>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e025      	b.n	8006a54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	32ae      	adds	r2, #174	@ 0xae
 8006a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00f      	beq.n	8006a44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32ae      	adds	r2, #174	@ 0xae
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a34:	f107 020e 	add.w	r2, r7, #14
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fdfd 	bl	8008664 <USBD_LL_Start>
 8006a6a:	4603      	mov	r3, r0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d009      	beq.n	8006ab8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	4611      	mov	r1, r2
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 f90c 	bl	8007d26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d01a      	beq.n	8006b68 <USBD_LL_SetupStage+0x72>
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d822      	bhi.n	8006b7c <USBD_LL_SetupStage+0x86>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <USBD_LL_SetupStage+0x4a>
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d00a      	beq.n	8006b54 <USBD_LL_SetupStage+0x5e>
 8006b3e:	e01d      	b.n	8006b7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fb63 	bl	8007214 <USBD_StdDevReq>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
      break;
 8006b52:	e020      	b.n	8006b96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbcb 	bl	80072f8 <USBD_StdItfReq>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
      break;
 8006b66:	e016      	b.n	8006b96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fc2d 	bl	80073d0 <USBD_StdEPReq>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7a:	e00c      	b.n	8006b96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fdca 	bl	8008724 <USBD_LL_StallEP>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	bf00      	nop
  }

  return ret;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d16e      	bne.n	8006c96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006bbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	f040 8098 	bne.w	8006cfc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d913      	bls.n	8006c00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bf28      	it	cs
 8006bf2:	4613      	movcs	r3, r2
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f001 f994 	bl	8007f26 <USBD_CtlContinueRx>
 8006bfe:	e07d      	b.n	8006cfc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d014      	beq.n	8006c38 <USBD_LL_DataOutStage+0x98>
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d81d      	bhi.n	8006c4e <USBD_LL_DataOutStage+0xae>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <USBD_LL_DataOutStage+0x7c>
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d003      	beq.n	8006c22 <USBD_LL_DataOutStage+0x82>
 8006c1a:	e018      	b.n	8006c4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75bb      	strb	r3, [r7, #22]
            break;
 8006c20:	e018      	b.n	8006c54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fa64 	bl	80070fa <USBD_CoreFindIF>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75bb      	strb	r3, [r7, #22]
            break;
 8006c36:	e00d      	b.n	8006c54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	4619      	mov	r1, r3
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fa66 	bl	8007114 <USBD_CoreFindEP>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c4c:	e002      	b.n	8006c54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75bb      	strb	r3, [r7, #22]
            break;
 8006c52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c54:	7dbb      	ldrb	r3, [r7, #22]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d119      	bne.n	8006c8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d113      	bne.n	8006c8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c66:	7dba      	ldrb	r2, [r7, #22]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	32ae      	adds	r2, #174	@ 0xae
 8006c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c76:	7dba      	ldrb	r2, [r7, #22]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c7e:	7dba      	ldrb	r2, [r7, #22]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	32ae      	adds	r2, #174	@ 0xae
 8006c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 f95a 	bl	8007f48 <USBD_CtlSendStatus>
 8006c94:	e032      	b.n	8006cfc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 fa37 	bl	8007114 <USBD_CoreFindEP>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	2bff      	cmp	r3, #255	@ 0xff
 8006cae:	d025      	beq.n	8006cfc <USBD_LL_DataOutStage+0x15c>
 8006cb0:	7dbb      	ldrb	r3, [r7, #22]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d122      	bne.n	8006cfc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d117      	bne.n	8006cf2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006cc2:	7dba      	ldrb	r2, [r7, #22]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	32ae      	adds	r2, #174	@ 0xae
 8006cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00f      	beq.n	8006cf2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006cd2:	7dba      	ldrb	r2, [r7, #22]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006cda:	7dba      	ldrb	r2, [r7, #22]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	32ae      	adds	r2, #174	@ 0xae
 8006ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	7afa      	ldrb	r2, [r7, #11]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	e000      	b.n	8006cfe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d16f      	bne.n	8006dfa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3314      	adds	r3, #20
 8006d1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d15a      	bne.n	8006de0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d914      	bls.n	8006d60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f001 f8bc 	bl	8007eca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d52:	2300      	movs	r3, #0
 8006d54:	2200      	movs	r2, #0
 8006d56:	2100      	movs	r1, #0
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f001 fd8d 	bl	8008878 <USBD_LL_PrepareReceive>
 8006d5e:	e03f      	b.n	8006de0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d11c      	bne.n	8006da6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d316      	bcc.n	8006da6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d20f      	bcs.n	8006da6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d86:	2200      	movs	r2, #0
 8006d88:	2100      	movs	r1, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f001 f89d 	bl	8007eca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f001 fd6a 	bl	8008878 <USBD_LL_PrepareReceive>
 8006da4:	e01c      	b.n	8006de0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d10f      	bne.n	8006dd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	@ 0x80
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 fca5 	bl	8008724 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 f8c7 	bl	8007f6e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03a      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fe42 	bl	8006a74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006df8:	e032      	b.n	8006e60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	4619      	mov	r1, r3
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 f985 	bl	8007114 <USBD_CoreFindEP>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2bff      	cmp	r3, #255	@ 0xff
 8006e12:	d025      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d122      	bne.n	8006e60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d11c      	bne.n	8006e60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e26:	7dfa      	ldrb	r2, [r7, #23]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	32ae      	adds	r2, #174	@ 0xae
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d014      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e36:	7dfa      	ldrb	r2, [r7, #23]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e3e:	7dfa      	ldrb	r2, [r7, #23]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	32ae      	adds	r2, #174	@ 0xae
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	7afa      	ldrb	r2, [r7, #11]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	4798      	blx	r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e56:	7dbb      	ldrb	r3, [r7, #22]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	e000      	b.n	8006e62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d014      	beq.n	8006ed0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00e      	beq.n	8006ed0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6852      	ldr	r2, [r2, #4]
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ed0:	2340      	movs	r3, #64	@ 0x40
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fbdf 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2240      	movs	r2, #64	@ 0x40
 8006ee8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eec:	2340      	movs	r3, #64	@ 0x40
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2180      	movs	r1, #128	@ 0x80
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fbd1 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2240      	movs	r2, #64	@ 0x40
 8006f02:	621a      	str	r2, [r3, #32]

  return ret;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d006      	beq.n	8006f50 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2204      	movs	r2, #4
 8006f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d106      	bne.n	8006f88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d110      	bne.n	8006fcc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	32ae      	adds	r2, #174	@ 0xae
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e01c      	b.n	8007032 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b03      	cmp	r3, #3
 8007002:	d115      	bne.n	8007030 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	32ae      	adds	r2, #174	@ 0xae
 800700e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	32ae      	adds	r2, #174	@ 0xae
 8007022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	78fa      	ldrb	r2, [r7, #3]
 800702a:	4611      	mov	r1, r2
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	32ae      	adds	r2, #174	@ 0xae
 8007050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	e01c      	b.n	8007096 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b03      	cmp	r3, #3
 8007066:	d115      	bne.n	8007094 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32ae      	adds	r2, #174	@ 0xae
 8007072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32ae      	adds	r2, #174	@ 0xae
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	4611      	mov	r1, r2
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00e      	beq.n	80070f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6852      	ldr	r2, [r2, #4]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	4611      	mov	r1, r2
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80070ec:	2303      	movs	r3, #3
 80070ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007106:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007120:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b086      	sub	sp, #24
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	885b      	ldrh	r3, [r3, #2]
 800714a:	b29b      	uxth	r3, r3
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	4293      	cmp	r3, r2
 8007152:	d91f      	bls.n	8007194 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800715a:	e013      	b.n	8007184 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800715c:	f107 030a 	add.w	r3, r7, #10
 8007160:	4619      	mov	r1, r3
 8007162:	6978      	ldr	r0, [r7, #20]
 8007164:	f000 f81b 	bl	800719e <USBD_GetNextDesc>
 8007168:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	2b05      	cmp	r3, #5
 8007170:	d108      	bne.n	8007184 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	789b      	ldrb	r3, [r3, #2]
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	429a      	cmp	r2, r3
 800717e:	d008      	beq.n	8007192 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	885b      	ldrh	r3, [r3, #2]
 8007188:	b29a      	uxth	r2, r3
 800718a:	897b      	ldrh	r3, [r7, #10]
 800718c:	429a      	cmp	r2, r3
 800718e:	d8e5      	bhi.n	800715c <USBD_GetEpDesc+0x2e>
 8007190:	e000      	b.n	8007194 <USBD_GetEpDesc+0x66>
          break;
 8007192:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007194:	693b      	ldr	r3, [r7, #16]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	4413      	add	r3, r2
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071c8:	68fb      	ldr	r3, [r7, #12]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	3301      	adds	r3, #1
 80071ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071f4:	8a3b      	ldrh	r3, [r7, #16]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	b21a      	sxth	r2, r3
 80071fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071fe:	4313      	orrs	r3, r2
 8007200:	b21b      	sxth	r3, r3
 8007202:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007204:	89fb      	ldrh	r3, [r7, #14]
}
 8007206:	4618      	mov	r0, r3
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800722a:	2b40      	cmp	r3, #64	@ 0x40
 800722c:	d005      	beq.n	800723a <USBD_StdDevReq+0x26>
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	d857      	bhi.n	80072e2 <USBD_StdDevReq+0xce>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00f      	beq.n	8007256 <USBD_StdDevReq+0x42>
 8007236:	2b20      	cmp	r3, #32
 8007238:	d153      	bne.n	80072e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	32ae      	adds	r2, #174	@ 0xae
 8007244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
      break;
 8007254:	e04a      	b.n	80072ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	2b09      	cmp	r3, #9
 800725c:	d83b      	bhi.n	80072d6 <USBD_StdDevReq+0xc2>
 800725e:	a201      	add	r2, pc, #4	@ (adr r2, 8007264 <USBD_StdDevReq+0x50>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	080072b9 	.word	0x080072b9
 8007268:	080072cd 	.word	0x080072cd
 800726c:	080072d7 	.word	0x080072d7
 8007270:	080072c3 	.word	0x080072c3
 8007274:	080072d7 	.word	0x080072d7
 8007278:	08007297 	.word	0x08007297
 800727c:	0800728d 	.word	0x0800728d
 8007280:	080072d7 	.word	0x080072d7
 8007284:	080072af 	.word	0x080072af
 8007288:	080072a1 	.word	0x080072a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa3c 	bl	800770c <USBD_GetDescriptor>
          break;
 8007294:	e024      	b.n	80072e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fba1 	bl	80079e0 <USBD_SetAddress>
          break;
 800729e:	e01f      	b.n	80072e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fbe0 	bl	8007a68 <USBD_SetConfig>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]
          break;
 80072ac:	e018      	b.n	80072e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc83 	bl	8007bbc <USBD_GetConfig>
          break;
 80072b6:	e013      	b.n	80072e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fcb4 	bl	8007c28 <USBD_GetStatus>
          break;
 80072c0:	e00e      	b.n	80072e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fce3 	bl	8007c90 <USBD_SetFeature>
          break;
 80072ca:	e009      	b.n	80072e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fd07 	bl	8007ce2 <USBD_ClrFeature>
          break;
 80072d4:	e004      	b.n	80072e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fd5e 	bl	8007d9a <USBD_CtlError>
          break;
 80072de:	bf00      	nop
      }
      break;
 80072e0:	e004      	b.n	80072ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fd58 	bl	8007d9a <USBD_CtlError>
      break;
 80072ea:	bf00      	nop
  }

  return ret;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop

080072f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800730e:	2b40      	cmp	r3, #64	@ 0x40
 8007310:	d005      	beq.n	800731e <USBD_StdItfReq+0x26>
 8007312:	2b40      	cmp	r3, #64	@ 0x40
 8007314:	d852      	bhi.n	80073bc <USBD_StdItfReq+0xc4>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <USBD_StdItfReq+0x26>
 800731a:	2b20      	cmp	r3, #32
 800731c:	d14e      	bne.n	80073bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	2b02      	cmp	r3, #2
 800732a:	d840      	bhi.n	80073ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	889b      	ldrh	r3, [r3, #4]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b01      	cmp	r3, #1
 8007334:	d836      	bhi.n	80073a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	889b      	ldrh	r3, [r3, #4]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff fedb 	bl	80070fa <USBD_CoreFindIF>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2bff      	cmp	r3, #255	@ 0xff
 800734c:	d01d      	beq.n	800738a <USBD_StdItfReq+0x92>
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11a      	bne.n	800738a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007354:	7bba      	ldrb	r2, [r7, #14]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	@ 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00f      	beq.n	8007384 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007364:	7bba      	ldrb	r2, [r7, #14]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800736c:	7bba      	ldrb	r2, [r7, #14]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32ae      	adds	r2, #174	@ 0xae
 8007372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007382:	e004      	b.n	800738e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007388:	e001      	b.n	800738e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	88db      	ldrh	r3, [r3, #6]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d110      	bne.n	80073b8 <USBD_StdItfReq+0xc0>
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10d      	bne.n	80073b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fdd3 	bl	8007f48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073a2:	e009      	b.n	80073b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fcf7 	bl	8007d9a <USBD_CtlError>
          break;
 80073ac:	e004      	b.n	80073b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fcf2 	bl	8007d9a <USBD_CtlError>
          break;
 80073b6:	e000      	b.n	80073ba <USBD_StdItfReq+0xc2>
          break;
 80073b8:	bf00      	nop
      }
      break;
 80073ba:	e004      	b.n	80073c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fceb 	bl	8007d9a <USBD_CtlError>
      break;
 80073c4:	bf00      	nop
  }

  return ret;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	889b      	ldrh	r3, [r3, #4]
 80073e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ec:	2b40      	cmp	r3, #64	@ 0x40
 80073ee:	d007      	beq.n	8007400 <USBD_StdEPReq+0x30>
 80073f0:	2b40      	cmp	r3, #64	@ 0x40
 80073f2:	f200 817f 	bhi.w	80076f4 <USBD_StdEPReq+0x324>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02a      	beq.n	8007450 <USBD_StdEPReq+0x80>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	f040 817a 	bne.w	80076f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff fe85 	bl	8007114 <USBD_CoreFindEP>
 800740a:	4603      	mov	r3, r0
 800740c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800740e:	7b7b      	ldrb	r3, [r7, #13]
 8007410:	2bff      	cmp	r3, #255	@ 0xff
 8007412:	f000 8174 	beq.w	80076fe <USBD_StdEPReq+0x32e>
 8007416:	7b7b      	ldrb	r3, [r7, #13]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f040 8170 	bne.w	80076fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800741e:	7b7a      	ldrb	r2, [r7, #13]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007426:	7b7a      	ldrb	r2, [r7, #13]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	32ae      	adds	r2, #174	@ 0xae
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8163 	beq.w	80076fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007438:	7b7a      	ldrb	r2, [r7, #13]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	32ae      	adds	r2, #174	@ 0xae
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800744e:	e156      	b.n	80076fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d008      	beq.n	800746a <USBD_StdEPReq+0x9a>
 8007458:	2b03      	cmp	r3, #3
 800745a:	f300 8145 	bgt.w	80076e8 <USBD_StdEPReq+0x318>
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 809b 	beq.w	800759a <USBD_StdEPReq+0x1ca>
 8007464:	2b01      	cmp	r3, #1
 8007466:	d03c      	beq.n	80074e2 <USBD_StdEPReq+0x112>
 8007468:	e13e      	b.n	80076e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d002      	beq.n	800747c <USBD_StdEPReq+0xac>
 8007476:	2b03      	cmp	r3, #3
 8007478:	d016      	beq.n	80074a8 <USBD_StdEPReq+0xd8>
 800747a:	e02c      	b.n	80074d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <USBD_StdEPReq+0xce>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b80      	cmp	r3, #128	@ 0x80
 8007486:	d00a      	beq.n	800749e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f949 	bl	8008724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007492:	2180      	movs	r1, #128	@ 0x80
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f945 	bl	8008724 <USBD_LL_StallEP>
 800749a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800749c:	e020      	b.n	80074e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc7a 	bl	8007d9a <USBD_CtlError>
              break;
 80074a6:	e01b      	b.n	80074e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	885b      	ldrh	r3, [r3, #2]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10e      	bne.n	80074ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <USBD_StdEPReq+0xfe>
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	2b80      	cmp	r3, #128	@ 0x80
 80074ba:	d008      	beq.n	80074ce <USBD_StdEPReq+0xfe>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	88db      	ldrh	r3, [r3, #6]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d104      	bne.n	80074ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 f92b 	bl	8008724 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fd3a 	bl	8007f48 <USBD_CtlSendStatus>

              break;
 80074d4:	e004      	b.n	80074e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc5e 	bl	8007d9a <USBD_CtlError>
              break;
 80074de:	bf00      	nop
          }
          break;
 80074e0:	e107      	b.n	80076f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d002      	beq.n	80074f4 <USBD_StdEPReq+0x124>
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d016      	beq.n	8007520 <USBD_StdEPReq+0x150>
 80074f2:	e04b      	b.n	800758c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00d      	beq.n	8007516 <USBD_StdEPReq+0x146>
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b80      	cmp	r3, #128	@ 0x80
 80074fe:	d00a      	beq.n	8007516 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 f90d 	bl	8008724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800750a:	2180      	movs	r1, #128	@ 0x80
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 f909 	bl	8008724 <USBD_LL_StallEP>
 8007512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007514:	e040      	b.n	8007598 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc3e 	bl	8007d9a <USBD_CtlError>
              break;
 800751e:	e03b      	b.n	8007598 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d136      	bne.n	8007596 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 f913 	bl	8008762 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fd03 	bl	8007f48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fde4 	bl	8007114 <USBD_CoreFindEP>
 800754c:	4603      	mov	r3, r0
 800754e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007550:	7b7b      	ldrb	r3, [r7, #13]
 8007552:	2bff      	cmp	r3, #255	@ 0xff
 8007554:	d01f      	beq.n	8007596 <USBD_StdEPReq+0x1c6>
 8007556:	7b7b      	ldrb	r3, [r7, #13]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d11c      	bne.n	8007596 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800755c:	7b7a      	ldrb	r2, [r7, #13]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007564:	7b7a      	ldrb	r2, [r7, #13]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32ae      	adds	r2, #174	@ 0xae
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d010      	beq.n	8007596 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007574:	7b7a      	ldrb	r2, [r7, #13]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32ae      	adds	r2, #174	@ 0xae
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800758a:	e004      	b.n	8007596 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fc03 	bl	8007d9a <USBD_CtlError>
              break;
 8007594:	e000      	b.n	8007598 <USBD_StdEPReq+0x1c8>
              break;
 8007596:	bf00      	nop
          }
          break;
 8007598:	e0ab      	b.n	80076f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d002      	beq.n	80075ac <USBD_StdEPReq+0x1dc>
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d032      	beq.n	8007610 <USBD_StdEPReq+0x240>
 80075aa:	e097      	b.n	80076dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <USBD_StdEPReq+0x1f2>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b80      	cmp	r3, #128	@ 0x80
 80075b6:	d004      	beq.n	80075c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fbed 	bl	8007d9a <USBD_CtlError>
                break;
 80075c0:	e091      	b.n	80076e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da0b      	bge.n	80075e2 <USBD_StdEPReq+0x212>
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	3310      	adds	r3, #16
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	3304      	adds	r3, #4
 80075e0:	e00b      	b.n	80075fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4413      	add	r3, r2
 80075f8:	3304      	adds	r3, #4
 80075fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2202      	movs	r2, #2
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc43 	bl	8007e94 <USBD_CtlSendData>
              break;
 800760e:	e06a      	b.n	80076e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	da11      	bge.n	800763c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	f003 020f 	and.w	r2, r3, #15
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	3324      	adds	r3, #36	@ 0x24
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d117      	bne.n	8007662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fbb0 	bl	8007d9a <USBD_CtlError>
                  break;
 800763a:	e054      	b.n	80076e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	f003 020f 	and.w	r2, r3, #15
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fb9d 	bl	8007d9a <USBD_CtlError>
                  break;
 8007660:	e041      	b.n	80076e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007666:	2b00      	cmp	r3, #0
 8007668:	da0b      	bge.n	8007682 <USBD_StdEPReq+0x2b2>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	3310      	adds	r3, #16
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	3304      	adds	r3, #4
 8007680:	e00b      	b.n	800769a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	3304      	adds	r3, #4
 800769a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <USBD_StdEPReq+0x2d8>
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b80      	cmp	r3, #128	@ 0x80
 80076a6:	d103      	bne.n	80076b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e00e      	b.n	80076ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 f873 	bl	80087a0 <USBD_LL_IsStallEP>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e002      	b.n	80076ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2202      	movs	r2, #2
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fbdd 	bl	8007e94 <USBD_CtlSendData>
              break;
 80076da:	e004      	b.n	80076e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fb5b 	bl	8007d9a <USBD_CtlError>
              break;
 80076e4:	bf00      	nop
          }
          break;
 80076e6:	e004      	b.n	80076f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb55 	bl	8007d9a <USBD_CtlError>
          break;
 80076f0:	bf00      	nop
      }
      break;
 80076f2:	e005      	b.n	8007700 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fb4f 	bl	8007d9a <USBD_CtlError>
      break;
 80076fc:	e000      	b.n	8007700 <USBD_StdEPReq+0x330>
      break;
 80076fe:	bf00      	nop
  }

  return ret;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	885b      	ldrh	r3, [r3, #2]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	2b06      	cmp	r3, #6
 800772e:	f200 8128 	bhi.w	8007982 <USBD_GetDescriptor+0x276>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <USBD_GetDescriptor+0x2c>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007755 	.word	0x08007755
 800773c:	0800776d 	.word	0x0800776d
 8007740:	080077ad 	.word	0x080077ad
 8007744:	08007983 	.word	0x08007983
 8007748:	08007983 	.word	0x08007983
 800774c:	08007923 	.word	0x08007923
 8007750:	0800794f 	.word	0x0800794f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
      break;
 800776a:	e112      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c1b      	ldrb	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777c:	f107 0208 	add.w	r2, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	2202      	movs	r2, #2
 800778c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800778e:	e100      	b.n	8007992 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	f107 0208 	add.w	r2, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e0f2      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	885b      	ldrh	r3, [r3, #2]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	f200 80ac 	bhi.w	8007910 <USBD_GetDescriptor+0x204>
 80077b8:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <USBD_GetDescriptor+0xb4>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077d9 	.word	0x080077d9
 80077c4:	0800780d 	.word	0x0800780d
 80077c8:	08007841 	.word	0x08007841
 80077cc:	08007875 	.word	0x08007875
 80077d0:	080078a9 	.word	0x080078a9
 80077d4:	080078dd 	.word	0x080078dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e091      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 facb 	bl	8007d9a <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e089      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e077      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fab1 	bl	8007d9a <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e06f      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e05d      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa97 	bl	8007d9a <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e055      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e043      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa7d 	bl	8007d9a <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e03b      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ca:	e029      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa63 	bl	8007d9a <USBD_CtlError>
            err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
          break;
 80078da:	e021      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7c12      	ldrb	r2, [r2, #16]
 80078f4:	f107 0108 	add.w	r1, r7, #8
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fe:	e00f      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa49 	bl	8007d9a <USBD_CtlError>
            err++;
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	3301      	adds	r3, #1
 800790c:	72fb      	strb	r3, [r7, #11]
          break;
 800790e:	e007      	b.n	8007920 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa41 	bl	8007d9a <USBD_CtlError>
          err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800791e:	bf00      	nop
      }
      break;
 8007920:	e037      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7c1b      	ldrb	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007932:	f107 0208 	add.w	r2, r7, #8
 8007936:	4610      	mov	r0, r2
 8007938:	4798      	blx	r3
 800793a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800793c:	e029      	b.n	8007992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa2a 	bl	8007d9a <USBD_CtlError>
        err++;
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	3301      	adds	r3, #1
 800794a:	72fb      	strb	r3, [r7, #11]
      break;
 800794c:	e021      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800795c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
 8007966:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	2207      	movs	r2, #7
 800796e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007970:	e00f      	b.n	8007992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fa10 	bl	8007d9a <USBD_CtlError>
        err++;
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	3301      	adds	r3, #1
 800797e:	72fb      	strb	r3, [r7, #11]
      break;
 8007980:	e007      	b.n	8007992 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa08 	bl	8007d9a <USBD_CtlError>
      err++;
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	3301      	adds	r3, #1
 800798e:	72fb      	strb	r3, [r7, #11]
      break;
 8007990:	bf00      	nop
  }

  if (err != 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11e      	bne.n	80079d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079a0:	893b      	ldrh	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	88da      	ldrh	r2, [r3, #6]
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bf28      	it	cs
 80079b0:	4613      	movcs	r3, r2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079b6:	893b      	ldrh	r3, [r7, #8]
 80079b8:	461a      	mov	r2, r3
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa69 	bl	8007e94 <USBD_CtlSendData>
 80079c2:	e009      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9e7 	bl	8007d9a <USBD_CtlError>
 80079cc:	e004      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 faba 	bl	8007f48 <USBD_CtlSendStatus>
 80079d4:	e000      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    return;
 80079d6:	bf00      	nop
  }
}
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop

080079e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	889b      	ldrh	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d131      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d12d      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a00:	d829      	bhi.n	8007a56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d104      	bne.n	8007a24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9bc 	bl	8007d9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a22:	e01d      	b.n	8007a60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7bfa      	ldrb	r2, [r7, #15]
 8007a28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fee1 	bl	80087f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa86 	bl	8007f48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	e009      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a54:	e004      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f99e 	bl	8007d9a <USBD_CtlError>
  }
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007a7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a80:	4b4d      	ldr	r3, [pc, #308]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d905      	bls.n	8007a94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f985 	bl	8007d9a <USBD_CtlError>
    return USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e08c      	b.n	8007bae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d002      	beq.n	8007aa6 <USBD_SetConfig+0x3e>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d029      	beq.n	8007af8 <USBD_SetConfig+0x90>
 8007aa4:	e075      	b.n	8007b92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007aa6:	4b44      	ldr	r3, [pc, #272]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d020      	beq.n	8007af0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007aae:	4b42      	ldr	r3, [pc, #264]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fe ffe3 	bl	8006a8a <USBD_SetClassConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f962 	bl	8007d9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ade:	e065      	b.n	8007bac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa31 	bl	8007f48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2203      	movs	r2, #3
 8007aea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007aee:	e05d      	b.n	8007bac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa29 	bl	8007f48 <USBD_CtlSendStatus>
      break;
 8007af6:	e059      	b.n	8007bac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007af8:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d112      	bne.n	8007b26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007b08:	4b2b      	ldr	r3, [pc, #172]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b12:	4b29      	ldr	r3, [pc, #164]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe ffd2 	bl	8006ac2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa12 	bl	8007f48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b24:	e042      	b.n	8007bac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b26:	4b24      	ldr	r3, [pc, #144]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d02a      	beq.n	8007b8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fe ffc0 	bl	8006ac2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b42:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fe ff99 	bl	8006a8a <USBD_SetClassConfig>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00f      	beq.n	8007b82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f918 	bl	8007d9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fe ffa5 	bl	8006ac2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b80:	e014      	b.n	8007bac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9e0 	bl	8007f48 <USBD_CtlSendStatus>
      break;
 8007b88:	e010      	b.n	8007bac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9dc 	bl	8007f48 <USBD_CtlSendStatus>
      break;
 8007b90:	e00c      	b.n	8007bac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f900 	bl	8007d9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b9a:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <USBD_SetConfig+0x150>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7fe ff8e 	bl	8006ac2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8007baa:	bf00      	nop
  }

  return ret;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	2000023c 	.word	0x2000023c

08007bbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	88db      	ldrh	r3, [r3, #6]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d004      	beq.n	8007bd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8e2 	bl	8007d9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bd6:	e023      	b.n	8007c20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	dc02      	bgt.n	8007bea <USBD_GetConfig+0x2e>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dc03      	bgt.n	8007bf0 <USBD_GetConfig+0x34>
 8007be8:	e015      	b.n	8007c16 <USBD_GetConfig+0x5a>
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d00b      	beq.n	8007c06 <USBD_GetConfig+0x4a>
 8007bee:	e012      	b.n	8007c16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f948 	bl	8007e94 <USBD_CtlSendData>
        break;
 8007c04:	e00c      	b.n	8007c20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f940 	bl	8007e94 <USBD_CtlSendData>
        break;
 8007c14:	e004      	b.n	8007c20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8be 	bl	8007d9a <USBD_CtlError>
        break;
 8007c1e:	bf00      	nop
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d81e      	bhi.n	8007c7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d004      	beq.n	8007c52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f8a5 	bl	8007d9a <USBD_CtlError>
        break;
 8007c50:	e01a      	b.n	8007c88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f043 0202 	orr.w	r2, r3, #2
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	330c      	adds	r3, #12
 8007c72:	2202      	movs	r2, #2
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f90c 	bl	8007e94 <USBD_CtlSendData>
      break;
 8007c7c:	e004      	b.n	8007c88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f88a 	bl	8007d9a <USBD_CtlError>
      break;
 8007c86:	bf00      	nop
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d107      	bne.n	8007cb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f94c 	bl	8007f48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007cb0:	e013      	b.n	8007cda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d10b      	bne.n	8007cd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	889b      	ldrh	r3, [r3, #4]
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f93c 	bl	8007f48 <USBD_CtlSendStatus>
}
 8007cd0:	e003      	b.n	8007cda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f860 	bl	8007d9a <USBD_CtlError>
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d80b      	bhi.n	8007d12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	885b      	ldrh	r3, [r3, #2]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10c      	bne.n	8007d1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f91c 	bl	8007f48 <USBD_CtlSendStatus>
      }
      break;
 8007d10:	e004      	b.n	8007d1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f840 	bl	8007d9a <USBD_CtlError>
      break;
 8007d1a:	e000      	b.n	8007d1e <USBD_ClrFeature+0x3c>
      break;
 8007d1c:	bf00      	nop
  }
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	781a      	ldrb	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	781a      	ldrb	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff fa40 	bl	80071d6 <SWAPBYTE>
 8007d56:	4603      	mov	r3, r0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fa33 	bl	80071d6 <SWAPBYTE>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fa26 	bl	80071d6 <SWAPBYTE>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	80da      	strh	r2, [r3, #6]
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007da4:	2180      	movs	r1, #128	@ 0x80
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fcbc 	bl	8008724 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fcb8 	bl	8008724 <USBD_LL_StallEP>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d042      	beq.n	8007e58 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007dd6:	6938      	ldr	r0, [r7, #16]
 8007dd8:	f000 f842 	bl	8007e60 <USBD_GetLen>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	3301      	adds	r3, #1
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de6:	d808      	bhi.n	8007dfa <USBD_GetString+0x3e>
 8007de8:	6938      	ldr	r0, [r7, #16]
 8007dea:	f000 f839 	bl	8007e60 <USBD_GetLen>
 8007dee:	4603      	mov	r3, r0
 8007df0:	3301      	adds	r3, #1
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	e001      	b.n	8007dfe <USBD_GetString+0x42>
 8007dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	4413      	add	r3, r2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	3301      	adds	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	3301      	adds	r3, #1
 8007e22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e24:	e013      	b.n	8007e4e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	7812      	ldrb	r2, [r2, #0]
 8007e30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
    idx++;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	4413      	add	r3, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e7      	bne.n	8007e26 <USBD_GetString+0x6a>
 8007e56:	e000      	b.n	8007e5a <USBD_GetString+0x9e>
    return;
 8007e58:	bf00      	nop
  }
}
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e70:	e005      	b.n	8007e7e <USBD_GetLen+0x1e>
  {
    len++;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	3301      	adds	r3, #1
 8007e76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f5      	bne.n	8007e72 <USBD_GetLen+0x12>
  }

  return len;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	2100      	movs	r1, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fcbb 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	2100      	movs	r1, #0
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fcaa 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2203      	movs	r2, #3
 8007efc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fcae 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	2100      	movs	r1, #0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fc9d 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fc69 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2205      	movs	r2, #5
 8007f7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2200      	movs	r2, #0
 8007f82:	2100      	movs	r1, #0
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fc77 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4912      	ldr	r1, [pc, #72]	@ (8007fe4 <MX_USB_DEVICE_Init+0x50>)
 8007f9c:	4812      	ldr	r0, [pc, #72]	@ (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007f9e:	f7fe fcf7 	bl	8006990 <USBD_Init>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fa8:	f7f8 fd00 	bl	80009ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fac:	490f      	ldr	r1, [pc, #60]	@ (8007fec <MX_USB_DEVICE_Init+0x58>)
 8007fae:	480e      	ldr	r0, [pc, #56]	@ (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007fb0:	f7fe fd1e 	bl	80069f0 <USBD_RegisterClass>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fba:	f7f8 fcf7 	bl	80009ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fbe:	490c      	ldr	r1, [pc, #48]	@ (8007ff0 <MX_USB_DEVICE_Init+0x5c>)
 8007fc0:	4809      	ldr	r0, [pc, #36]	@ (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007fc2:	f7fe fc55 	bl	8006870 <USBD_CDC_RegisterInterface>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fcc:	f7f8 fcee 	bl	80009ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fd0:	4805      	ldr	r0, [pc, #20]	@ (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007fd2:	f7fe fd43 	bl	8006a5c <USBD_Start>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fdc:	f7f8 fce6 	bl	80009ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fe0:	bf00      	nop
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200000ac 	.word	0x200000ac
 8007fe8:	20000240 	.word	0x20000240
 8007fec:	20000018 	.word	0x20000018
 8007ff0:	20000098 	.word	0x20000098

08007ff4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	4905      	ldr	r1, [pc, #20]	@ (8008010 <CDC_Init_FS+0x1c>)
 8007ffc:	4805      	ldr	r0, [pc, #20]	@ (8008014 <CDC_Init_FS+0x20>)
 8007ffe:	f7fe fc51 	bl	80068a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008002:	4905      	ldr	r1, [pc, #20]	@ (8008018 <CDC_Init_FS+0x24>)
 8008004:	4803      	ldr	r0, [pc, #12]	@ (8008014 <CDC_Init_FS+0x20>)
 8008006:	f7fe fc6f 	bl	80068e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800800a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800800c:	4618      	mov	r0, r3
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000d1c 	.word	0x20000d1c
 8008014:	20000240 	.word	0x20000240
 8008018:	2000051c 	.word	0x2000051c

0800801c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008020:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008022:	4618      	mov	r0, r3
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
 8008038:	4613      	mov	r3, r2
 800803a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	2b23      	cmp	r3, #35	@ 0x23
 8008040:	d84a      	bhi.n	80080d8 <CDC_Control_FS+0xac>
 8008042:	a201      	add	r2, pc, #4	@ (adr r2, 8008048 <CDC_Control_FS+0x1c>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	080080d9 	.word	0x080080d9
 800804c:	080080d9 	.word	0x080080d9
 8008050:	080080d9 	.word	0x080080d9
 8008054:	080080d9 	.word	0x080080d9
 8008058:	080080d9 	.word	0x080080d9
 800805c:	080080d9 	.word	0x080080d9
 8008060:	080080d9 	.word	0x080080d9
 8008064:	080080d9 	.word	0x080080d9
 8008068:	080080d9 	.word	0x080080d9
 800806c:	080080d9 	.word	0x080080d9
 8008070:	080080d9 	.word	0x080080d9
 8008074:	080080d9 	.word	0x080080d9
 8008078:	080080d9 	.word	0x080080d9
 800807c:	080080d9 	.word	0x080080d9
 8008080:	080080d9 	.word	0x080080d9
 8008084:	080080d9 	.word	0x080080d9
 8008088:	080080d9 	.word	0x080080d9
 800808c:	080080d9 	.word	0x080080d9
 8008090:	080080d9 	.word	0x080080d9
 8008094:	080080d9 	.word	0x080080d9
 8008098:	080080d9 	.word	0x080080d9
 800809c:	080080d9 	.word	0x080080d9
 80080a0:	080080d9 	.word	0x080080d9
 80080a4:	080080d9 	.word	0x080080d9
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080d9 	.word	0x080080d9
 80080bc:	080080d9 	.word	0x080080d9
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080d9 	.word	0x080080d9
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	080080d9 	.word	0x080080d9
 80080d0:	080080d9 	.word	0x080080d9
 80080d4:	080080d9 	.word	0x080080d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080d8:	bf00      	nop
  }

  return (USBD_OK);
 80080da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4805      	ldr	r0, [pc, #20]	@ (800810c <CDC_Receive_FS+0x24>)
 80080f6:	f7fe fbf7 	bl	80068e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080fa:	4804      	ldr	r0, [pc, #16]	@ (800810c <CDC_Receive_FS+0x24>)
 80080fc:	f7fe fc12 	bl	8006924 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008100:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000240 	.word	0x20000240

08008110 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008126:	4618      	mov	r0, r3
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2212      	movs	r2, #18
 8008144:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008146:	4b03      	ldr	r3, [pc, #12]	@ (8008154 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	200000c8 	.word	0x200000c8

08008158 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2204      	movs	r2, #4
 8008168:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800816a:	4b03      	ldr	r3, [pc, #12]	@ (8008178 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	200000dc 	.word	0x200000dc

0800817c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4907      	ldr	r1, [pc, #28]	@ (80081b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008192:	4808      	ldr	r0, [pc, #32]	@ (80081b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008194:	f7ff fe12 	bl	8007dbc <USBD_GetString>
 8008198:	e004      	b.n	80081a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	4904      	ldr	r1, [pc, #16]	@ (80081b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800819e:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80081a0:	f7ff fe0c 	bl	8007dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a4:	4b02      	ldr	r3, [pc, #8]	@ (80081b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	2000151c 	.word	0x2000151c
 80081b4:	080089d8 	.word	0x080089d8

080081b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	4904      	ldr	r1, [pc, #16]	@ (80081d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081c8:	4804      	ldr	r0, [pc, #16]	@ (80081dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081ca:	f7ff fdf7 	bl	8007dbc <USBD_GetString>
  return USBD_StrDesc;
 80081ce:	4b02      	ldr	r3, [pc, #8]	@ (80081d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	2000151c 	.word	0x2000151c
 80081dc:	080089f0 	.word	0x080089f0

080081e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	221a      	movs	r2, #26
 80081f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081f2:	f000 f843 	bl	800827c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081f6:	4b02      	ldr	r3, [pc, #8]	@ (8008200 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	200000e0 	.word	0x200000e0

08008204 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	6039      	str	r1, [r7, #0]
 800820e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d105      	bne.n	8008222 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4907      	ldr	r1, [pc, #28]	@ (8008238 <USBD_FS_ConfigStrDescriptor+0x34>)
 800821a:	4808      	ldr	r0, [pc, #32]	@ (800823c <USBD_FS_ConfigStrDescriptor+0x38>)
 800821c:	f7ff fdce 	bl	8007dbc <USBD_GetString>
 8008220:	e004      	b.n	800822c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4904      	ldr	r1, [pc, #16]	@ (8008238 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008226:	4805      	ldr	r0, [pc, #20]	@ (800823c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008228:	f7ff fdc8 	bl	8007dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800822c:	4b02      	ldr	r3, [pc, #8]	@ (8008238 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	2000151c 	.word	0x2000151c
 800823c:	08008a04 	.word	0x08008a04

08008240 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d105      	bne.n	800825e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4907      	ldr	r1, [pc, #28]	@ (8008274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008256:	4808      	ldr	r0, [pc, #32]	@ (8008278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008258:	f7ff fdb0 	bl	8007dbc <USBD_GetString>
 800825c:	e004      	b.n	8008268 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	4904      	ldr	r1, [pc, #16]	@ (8008274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008262:	4805      	ldr	r0, [pc, #20]	@ (8008278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008264:	f7ff fdaa 	bl	8007dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008268:	4b02      	ldr	r3, [pc, #8]	@ (8008274 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	2000151c 	.word	0x2000151c
 8008278:	08008a10 	.word	0x08008a10

0800827c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008282:	4b0f      	ldr	r3, [pc, #60]	@ (80082c0 <Get_SerialNum+0x44>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008288:	4b0e      	ldr	r3, [pc, #56]	@ (80082c4 <Get_SerialNum+0x48>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800828e:	4b0e      	ldr	r3, [pc, #56]	@ (80082c8 <Get_SerialNum+0x4c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4413      	add	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d009      	beq.n	80082b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082a2:	2208      	movs	r2, #8
 80082a4:	4909      	ldr	r1, [pc, #36]	@ (80082cc <Get_SerialNum+0x50>)
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f814 	bl	80082d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082ac:	2204      	movs	r2, #4
 80082ae:	4908      	ldr	r1, [pc, #32]	@ (80082d0 <Get_SerialNum+0x54>)
 80082b0:	68b8      	ldr	r0, [r7, #8]
 80082b2:	f000 f80f 	bl	80082d4 <IntToUnicode>
  }
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	1fff7a10 	.word	0x1fff7a10
 80082c4:	1fff7a14 	.word	0x1fff7a14
 80082c8:	1fff7a18 	.word	0x1fff7a18
 80082cc:	200000e2 	.word	0x200000e2
 80082d0:	200000f2 	.word	0x200000f2

080082d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	4613      	mov	r3, r2
 80082e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	75fb      	strb	r3, [r7, #23]
 80082ea:	e027      	b.n	800833c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	0f1b      	lsrs	r3, r3, #28
 80082f0:	2b09      	cmp	r3, #9
 80082f2:	d80b      	bhi.n	800830c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	0f1b      	lsrs	r3, r3, #28
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4619      	mov	r1, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	440b      	add	r3, r1
 8008304:	3230      	adds	r2, #48	@ 0x30
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e00a      	b.n	8008322 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	0f1b      	lsrs	r3, r3, #28
 8008310:	b2da      	uxtb	r2, r3
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	4619      	mov	r1, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	440b      	add	r3, r1
 800831c:	3237      	adds	r2, #55	@ 0x37
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	3301      	adds	r3, #1
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4413      	add	r3, r2
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	3301      	adds	r3, #1
 800833a:	75fb      	strb	r3, [r7, #23]
 800833c:	7dfa      	ldrb	r2, [r7, #23]
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	429a      	cmp	r2, r3
 8008342:	d3d3      	bcc.n	80082ec <IntToUnicode+0x18>
  }
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	@ 0x28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	605a      	str	r2, [r3, #4]
 8008366:	609a      	str	r2, [r3, #8]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008374:	d13a      	bne.n	80083ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008376:	2300      	movs	r3, #0
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	4b1e      	ldr	r3, [pc, #120]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 800837c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800837e:	4a1d      	ldr	r2, [pc, #116]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6313      	str	r3, [r2, #48]	@ 0x30
 8008386:	4b1b      	ldr	r3, [pc, #108]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 8008388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008392:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008398:	2302      	movs	r3, #2
 800839a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839c:	2300      	movs	r3, #0
 800839e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083a0:	2303      	movs	r3, #3
 80083a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083a4:	230a      	movs	r3, #10
 80083a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083a8:	f107 0314 	add.w	r3, r7, #20
 80083ac:	4619      	mov	r1, r3
 80083ae:	4812      	ldr	r0, [pc, #72]	@ (80083f8 <HAL_PCD_MspInit+0xa4>)
 80083b0:	f7f9 f93a 	bl	8001628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083b4:	4b0f      	ldr	r3, [pc, #60]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 80083b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083b8:	4a0e      	ldr	r2, [pc, #56]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 80083ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083be:	6353      	str	r3, [r2, #52]	@ 0x34
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	4b0b      	ldr	r3, [pc, #44]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 80083c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c8:	4a0a      	ldr	r2, [pc, #40]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 80083ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80083d0:	4b08      	ldr	r3, [pc, #32]	@ (80083f4 <HAL_PCD_MspInit+0xa0>)
 80083d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083dc:	2200      	movs	r2, #0
 80083de:	2100      	movs	r1, #0
 80083e0:	2043      	movs	r0, #67	@ 0x43
 80083e2:	f7f9 f8ea 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083e6:	2043      	movs	r0, #67	@ 0x43
 80083e8:	f7f9 f903 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083ec:	bf00      	nop
 80083ee:	3728      	adds	r7, #40	@ 0x28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	40023800 	.word	0x40023800
 80083f8:	40020000 	.word	0x40020000

080083fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7fe fb6f 	bl	8006af6 <USBD_LL_SetupStage>
}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008432:	78fa      	ldrb	r2, [r7, #3]
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	4619      	mov	r1, r3
 800844a:	f7fe fba9 	bl	8006ba0 <USBD_LL_DataOutStage>
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008468:	78fa      	ldrb	r2, [r7, #3]
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	3320      	adds	r3, #32
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	4619      	mov	r1, r3
 800847e:	f7fe fc42 	bl	8006d06 <USBD_LL_DataInStage>
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe fd7c 	bl	8006f96 <USBD_LL_SOF>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084ae:	2301      	movs	r3, #1
 80084b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	79db      	ldrb	r3, [r3, #7]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d001      	beq.n	80084be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084ba:	f7f8 fa77 	bl	80009ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084c4:	7bfa      	ldrb	r2, [r7, #15]
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe fd20 	bl	8006f0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fcc8 	bl	8006e6a <USBD_LL_Reset>
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fd1b 	bl	8006f2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800850a:	f043 0301 	orr.w	r3, r3, #1
 800850e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7adb      	ldrb	r3, [r3, #11]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008518:	4b04      	ldr	r3, [pc, #16]	@ (800852c <HAL_PCD_SuspendCallback+0x48>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	4a03      	ldr	r2, [pc, #12]	@ (800852c <HAL_PCD_SuspendCallback+0x48>)
 800851e:	f043 0306 	orr.w	r3, r3, #6
 8008522:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	e000ed00 	.word	0xe000ed00

08008530 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe fd11 	bl	8006f66 <USBD_LL_Resume>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fd69 	bl	800703a <USBD_LL_IsoOUTIncomplete>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fd25 	bl	8006fd6 <USBD_LL_IsoINIncomplete>
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fd7b 	bl	800709e <USBD_LL_DevConnected>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe fd78 	bl	80070b4 <USBD_LL_DevDisconnected>
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d13c      	bne.n	8008656 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085dc:	4a20      	ldr	r2, [pc, #128]	@ (8008660 <USBD_LL_Init+0x94>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008660 <USBD_LL_Init+0x94>)
 80085e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <USBD_LL_Init+0x94>)
 80085ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80085f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008660 <USBD_LL_Init+0x94>)
 80085f6:	2204      	movs	r2, #4
 80085f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085fa:	4b19      	ldr	r3, [pc, #100]	@ (8008660 <USBD_LL_Init+0x94>)
 80085fc:	2202      	movs	r2, #2
 80085fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008600:	4b17      	ldr	r3, [pc, #92]	@ (8008660 <USBD_LL_Init+0x94>)
 8008602:	2200      	movs	r2, #0
 8008604:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008606:	4b16      	ldr	r3, [pc, #88]	@ (8008660 <USBD_LL_Init+0x94>)
 8008608:	2202      	movs	r2, #2
 800860a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800860c:	4b14      	ldr	r3, [pc, #80]	@ (8008660 <USBD_LL_Init+0x94>)
 800860e:	2200      	movs	r2, #0
 8008610:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008612:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <USBD_LL_Init+0x94>)
 8008614:	2200      	movs	r2, #0
 8008616:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008618:	4b11      	ldr	r3, [pc, #68]	@ (8008660 <USBD_LL_Init+0x94>)
 800861a:	2200      	movs	r2, #0
 800861c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800861e:	4b10      	ldr	r3, [pc, #64]	@ (8008660 <USBD_LL_Init+0x94>)
 8008620:	2200      	movs	r2, #0
 8008622:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008624:	4b0e      	ldr	r3, [pc, #56]	@ (8008660 <USBD_LL_Init+0x94>)
 8008626:	2200      	movs	r2, #0
 8008628:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800862a:	480d      	ldr	r0, [pc, #52]	@ (8008660 <USBD_LL_Init+0x94>)
 800862c:	f7f9 f999 	bl	8001962 <HAL_PCD_Init>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008636:	f7f8 f9b9 	bl	80009ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800863a:	2180      	movs	r1, #128	@ 0x80
 800863c:	4808      	ldr	r0, [pc, #32]	@ (8008660 <USBD_LL_Init+0x94>)
 800863e:	f7fa fbc6 	bl	8002dce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008642:	2240      	movs	r2, #64	@ 0x40
 8008644:	2100      	movs	r1, #0
 8008646:	4806      	ldr	r0, [pc, #24]	@ (8008660 <USBD_LL_Init+0x94>)
 8008648:	f7fa fb7a 	bl	8002d40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800864c:	2280      	movs	r2, #128	@ 0x80
 800864e:	2101      	movs	r1, #1
 8008650:	4803      	ldr	r0, [pc, #12]	@ (8008660 <USBD_LL_Init+0x94>)
 8008652:	f7fa fb75 	bl	8002d40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	2000171c 	.word	0x2000171c

08008664 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800867a:	4618      	mov	r0, r3
 800867c:	f7f9 fa80 	bl	8001b80 <HAL_PCD_Start>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f942 	bl	8008910 <USBD_Get_USB_Status>
 800868c:	4603      	mov	r3, r0
 800868e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008690:	7bbb      	ldrb	r3, [r7, #14]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	4608      	mov	r0, r1
 80086a4:	4611      	mov	r1, r2
 80086a6:	461a      	mov	r2, r3
 80086a8:	4603      	mov	r3, r0
 80086aa:	70fb      	strb	r3, [r7, #3]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70bb      	strb	r3, [r7, #2]
 80086b0:	4613      	mov	r3, r2
 80086b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086c2:	78bb      	ldrb	r3, [r7, #2]
 80086c4:	883a      	ldrh	r2, [r7, #0]
 80086c6:	78f9      	ldrb	r1, [r7, #3]
 80086c8:	f7f9 ff54 	bl	8002574 <HAL_PCD_EP_Open>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f91c 	bl	8008910 <USBD_Get_USB_Status>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7f9 ff9f 	bl	8002648 <HAL_PCD_EP_Close>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f8fd 	bl	8008910 <USBD_Get_USB_Status>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871a:	7bbb      	ldrb	r3, [r7, #14]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800873e:	78fa      	ldrb	r2, [r7, #3]
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f7fa f857 	bl	80027f6 <HAL_PCD_EP_SetStall>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f8de 	bl	8008910 <USBD_Get_USB_Status>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008758:	7bbb      	ldrb	r3, [r7, #14]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f7fa f89b 	bl	80028bc <HAL_PCD_EP_ClrStall>
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f8bf 	bl	8008910 <USBD_Get_USB_Status>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008796:	7bbb      	ldrb	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da0b      	bge.n	80087d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	3316      	adds	r3, #22
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	e00b      	b.n	80087ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	4613      	mov	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80087ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7f9 fe88 	bl	800252c <HAL_PCD_SetAddress>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f874 	bl	8008910 <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b086      	sub	sp, #24
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
 8008842:	460b      	mov	r3, r1
 8008844:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008854:	7af9      	ldrb	r1, [r7, #11]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	f7f9 ff92 	bl	8002782 <HAL_PCD_EP_Transmit>
 800885e:	4603      	mov	r3, r0
 8008860:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f853 	bl	8008910 <USBD_Get_USB_Status>
 800886a:	4603      	mov	r3, r0
 800886c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800886e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	607a      	str	r2, [r7, #4]
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	460b      	mov	r3, r1
 8008886:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008896:	7af9      	ldrb	r1, [r7, #11]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	f7f9 ff1e 	bl	80026dc <HAL_PCD_EP_Receive>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f832 	bl	8008910 <USBD_Get_USB_Status>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7f9 ff3e 	bl	8002752 <HAL_PCD_EP_GetRxCount>
 80088d6:	4603      	mov	r3, r0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088e8:	4b03      	ldr	r3, [pc, #12]	@ (80088f8 <USBD_static_malloc+0x18>)
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	20001c00 	.word	0x20001c00

080088fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]

}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d817      	bhi.n	8008954 <USBD_Get_USB_Status+0x44>
 8008924:	a201      	add	r2, pc, #4	@ (adr r2, 800892c <USBD_Get_USB_Status+0x1c>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	0800893d 	.word	0x0800893d
 8008930:	08008943 	.word	0x08008943
 8008934:	08008949 	.word	0x08008949
 8008938:	0800894f 	.word	0x0800894f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
    break;
 8008940:	e00b      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008942:	2303      	movs	r3, #3
 8008944:	73fb      	strb	r3, [r7, #15]
    break;
 8008946:	e008      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	e005      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	73fb      	strb	r3, [r7, #15]
    break;
 8008952:	e002      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	bf00      	nop
  }
  return usb_status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <memset>:
 8008968:	4402      	add	r2, r0
 800896a:	4603      	mov	r3, r0
 800896c:	4293      	cmp	r3, r2
 800896e:	d100      	bne.n	8008972 <memset+0xa>
 8008970:	4770      	bx	lr
 8008972:	f803 1b01 	strb.w	r1, [r3], #1
 8008976:	e7f9      	b.n	800896c <memset+0x4>

08008978 <__libc_init_array>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	4d0d      	ldr	r5, [pc, #52]	@ (80089b0 <__libc_init_array+0x38>)
 800897c:	4c0d      	ldr	r4, [pc, #52]	@ (80089b4 <__libc_init_array+0x3c>)
 800897e:	1b64      	subs	r4, r4, r5
 8008980:	10a4      	asrs	r4, r4, #2
 8008982:	2600      	movs	r6, #0
 8008984:	42a6      	cmp	r6, r4
 8008986:	d109      	bne.n	800899c <__libc_init_array+0x24>
 8008988:	4d0b      	ldr	r5, [pc, #44]	@ (80089b8 <__libc_init_array+0x40>)
 800898a:	4c0c      	ldr	r4, [pc, #48]	@ (80089bc <__libc_init_array+0x44>)
 800898c:	f000 f818 	bl	80089c0 <_init>
 8008990:	1b64      	subs	r4, r4, r5
 8008992:	10a4      	asrs	r4, r4, #2
 8008994:	2600      	movs	r6, #0
 8008996:	42a6      	cmp	r6, r4
 8008998:	d105      	bne.n	80089a6 <__libc_init_array+0x2e>
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a0:	4798      	blx	r3
 80089a2:	3601      	adds	r6, #1
 80089a4:	e7ee      	b.n	8008984 <__libc_init_array+0xc>
 80089a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089aa:	4798      	blx	r3
 80089ac:	3601      	adds	r6, #1
 80089ae:	e7f2      	b.n	8008996 <__libc_init_array+0x1e>
 80089b0:	08008a40 	.word	0x08008a40
 80089b4:	08008a40 	.word	0x08008a40
 80089b8:	08008a40 	.word	0x08008a40
 80089bc:	08008a44 	.word	0x08008a44

080089c0 <_init>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr

080089cc <_fini>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr
